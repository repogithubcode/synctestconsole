using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using ProEstimator.Business.Model;
using ProEstimatorData;
using ProEstimatorData.DataModel;

namespace ProEstimator.Business.OptOut.Commands
{
    /// <summary>
    /// A command that processes a link generated by the OptOutService.GetOptOutLink()
    /// This encrypted string contains a LoginID, OptOutType, and an optional DetailID.
    /// </summary>
    public class ProcessOptOutLinkCommand : CommandBase
    {
        private IOptOutService _optOutService;
        private string _encryptedString;
        private List<IOptOutHandler> _optOutHanders;

        private int _loginID;
        private OptOutType _optOutType;
        private int _detailID;

        /// <summary>
        /// IF the Execute command is successfull this is the messaage to show the user
        /// </summary>
        public string SuccessMessage { get; private set; }


        public ProcessOptOutLinkCommand(IOptOutService optOutService, string encryptedString)
        {
            _optOutService = optOutService;
            _encryptedString = encryptedString;

            _optOutHanders = new List<IOptOutHandler>();
            _optOutHanders.Add(new OptOutHandlerAutoPay());
        }

        public override bool Execute()
        {
            if (ProcessEncryptedString())
            {
                return ExecuteHandlers();
            }
            else
            {
                return Error("Invalid opt out link.");
            }
        }

        private bool ProcessEncryptedString()
        {
            try
            {
                // Decrypte the string and get the data
                string decryptedString = Encryptor.Decrypt(_encryptedString);

                // The decrypted data will be in the format loginID::optOutType::detailID
                string[] pieces = decryptedString.Split("::".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                _loginID = InputHelper.GetInteger(pieces[0]);
                _optOutType = (OptOutType)InputHelper.GetInteger(pieces[1]);
                _detailID = InputHelper.GetInteger(pieces[2]);

                if (_loginID <= 0)
                {
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                
            }

            return false;
        }

        /// <summary>
        /// Process all handlers and return the result.
        /// NOTE: This assumes there is only one handler per OptOutType, only the first match will process.
        /// </summary>
        /// <returns></returns>
        private bool ExecuteHandlers()
        {
            foreach (IOptOutHandler handler in _optOutHanders)
            {
                if (handler.OptOutType == _optOutType)
                {
                    FunctionResult result = handler.Process(_optOutService, _loginID, _detailID);
                    if (result != null)
                    {
                        if (result.Success)
                        {
                            SuccessMessage = result.ErrorMessage;
                            return true;
                        }
                        else
                        {
                            return Error(result.ErrorMessage);
                        }
                    }
                }
            }

            return Error("Opt out handler not found for the passed link.");
        }

    }
}
