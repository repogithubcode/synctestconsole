@model Proestimator.ViewModel.AddPartsGraphicallyVM

@using ProEstimator.Business.ProAdvisor;
@using ProEstimatorData.Models.SubModel;
@using ProEstimatorData.DataModel;

@{
    ViewBag.Title = Proestimator.Resources.ProStrings.PageTitle_AddPartsGraphically;
    object vehicleID = ViewBag.VehicleID;
}

<style>
    .k-slider-selection {
        background-color: #1d69a6;
    }

    ul.k-reset.k-slider-items li.k-tick.k-first.k-tick-large span.k-label {
        display: none;
    }

    ul.k-reset.k-slider-items li.k-tick.k-last.k-tick-large span.k-label {
        display: none;
    }

    #part-search-container {
        width: 100%;
        height: 100%;
        display: none;
        position: relative;
        z-index: 100;
    }

    .search-section {
        float: left;
        display: none;
        overflow-y: auto;
        height: 100%;
        padding-left: 20px;
    }

    .refinish-container {
        display: inline-flex;
        position: relative;
        top: 5px;
    }

    .refinish-List {
        width: 117px;
        position: relative;
    }

    .parts-search-results-container {
        position: absolute;
        top: 45px;
        bottom: 5px;
    }

    .search-back-container {
    }

    .search-row {
        width: 100%;
        height: 45px;
        position: absolute;
        top: 0;
    }

    .search-row div {
        float: left;
        margin: 5px;
    }

    .search-row p {
        margin-top: 5px;
    }

    .search-button-add-wrapper {
        display: none;
    }

    .item-detail {
        margin-bottom: 0px;
    }

    .item-header {
        margin-top: 0px;
    }

    .popup-panel-buttons-container {
        text-align: center;
        padding-top: 10px;
        padding-bottom: 10px;
        clear: both;
    }

    .popup-panel-buttons-container input[type=button] {
        max-width: 200px;
    }

    #imgDropdown li {
        padding-left: 15px;
        padding-right: 15px;
    }

    #add-ons-grid {
        cursor: pointer;
    }

    .parts-search-results-container .k-state-selected {
        background-color: #1d69a6 !important;
    }

        .parts-search-results-container .k-state-selected td {
            color: white !important;
        }

   .k-state-selected {
        background-color: transparent !important;
        border-color: transparent !important;
        font-weight: bold;
        color: black;
        font-weight: bold;
    }

    .k-state-selected td {
        background-color: transparent !important;
        color: black !important;
    }

    .row-selected td {
        background-color: #1d69a6 !important;
        color: white !important;
    }

    .add-on-trial-message {
        color: red;
        text-align: center;
        padding: 0px 200px;
    }

    #btnPartsSearch {
        display: none;
        width: 80%;
        margin-top: 5px;
        margin-bottom: 5px;
    }

    #btnPartsNow {
        width: 80%;
        margin-top: 5px;
        margin-bottom: 5px;
    }

    .k-list-container {
        background-color: white;
    }

    .k-list-container.k-popup-dropdowntree .k-treeview {
        padding: 0px;
    }

    .k-item .k-state-focused {
        box-shadow: none;
    }

    .k-list-container k-popup k-group k-reset {
        display: block;
    }

    .k-list-container.k-popup.k-group.k-reset.k-popup-dropdowntree.k-state-border-up {
        margin-left: 137px;
    }

    .k-animation-container {
        left: 10px !important;
    }

    #btnPDREstimateunlockLink {
        margin-top: 0px;
    }

    #btnPDR {
        margin-top: 0px;
    }

    #btnAddNewManual {
        margin-top: 10px;
        margin-bottom: 5px;
    }

    #lblShowAllYears {
        font-size: 0.8em;
        width: 50%;
        float: left;
        margin-top:2px;
    }

    #partsSectionLabel {
        font-weight: bold;
        float: right;
        font-size: 0.9em
    }

    #sectionContainerEstimateLocked {
        width: 80%;
        margin: 0px auto;
    }

    #estimateIsImported {
        width: 80%;
    }

    #mitchellPages {
        width: 200px;
        /*margin-left: 400px;*/
    }

    #estimateIsLockedMessageD {
        display: block;
    }

    #estimateIsLockedMessageM {
        display: none;
    }

    #imgDropdownContainer {
       margin-bottom: 10px;
    }

    @@media (max-width: 700px) {
        .add-on-trial-message {
            padding: 30px 20px;
        }

        .refinish-container {
            width: 100%;
            margin-top: -10px;
            margin-bottom: 10px;
        }

        .refinish-List {
            margin-left: 5px;
            margin-right: 5px;
            width: 100%;
        }

        #part-search-container {
            position: fixed;
            top: 0;
            left: 0;
            bottom: 0;
            overflow-y: auto;
            padding-left: 10px;
            padding-top: 20px;
            width: 100%;
            margin-left: 0px;
            display: none;
            padding-left: 10px;
            padding-right: 10px;
            background-color: white;
            z-index: 100;
        }

        .parts-search-results-container {
            position: relative;
        }

        .search-section {
            width: 100%;
            padding-bottom: 20px;
            padding-left: 0px;
            height: auto;
        }

        .mobile-break {
            clear: both;
            float: none;
        }

        .search-back-container {
        }

        .search-button-wrapper {
            width: 100%;
            margin-top: 10px !important;
        }

        .search-row {
            height: auto;
            position: relative;
        }

        .search-row div {
            width: 100%;
            padding: 0px;
            margin: 0px;
        }

        .search-row div p {
            padding: 0px;
            margin: 0px;
        }

        #sectionSelect {
            margin-bottom: 15px;
        }

        .page-container-hide {
            display: none;
        }

        .search-button-add-wrapper {
            width: 100%;
        }

        .item-detail {
            margin-bottom: 10px;
        }

        .item-header {
            margin-top: 5px;
            padding-top: 5px;
            border-top: 1px solid black;
        }

        .popup-panel-buttons-container input[type=button] {
            max-width: initial;
        }

        #btnPartsSearch {
            display: block;
        }
        /*        #mitchellPages {
            width: 25%;
            float: none;
            margin-left: 400px;
            margin-top: -25px;
        }*/

        #btnPDR {
            width: 100%;
        }

        #btnAddNewManual {
            width: 100%;
        }
    }

    .graphic-container-small-no-hide {
        display: block;
        float: left;
        padding: 5px;
        z-index: 10;
    }

    #imgAreaContainer {
        position: relative;
        margin-bottom: 20px;
        height: 100%;
        overflow: auto;
    }

    @@media (max-width: 900px) {

        #imgAreaContainer {
            z-index: 100;
            position: relative;
            overflow: overlay;
            clear: both;
        }

        .resize {
            z-index: 100;
            position: relative;
        }
        /*#mitchellPages {
            width: 25%;
            float: none;
            margin-left: 400px;*/
        /*margin-top: -25px;*/
        /*}*/
    }

    @@media (min-width: 900px) {
        .resize {
        }
    }

    #imgContainer {
        display: block;
        width: 100%;
        height: auto;
        overflow: overlay;
    }

        #imgContainer img {
            width: 100%;
            margin: 0px;
        }

    #mapContainer {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

        #mapContainer > div {
            background-color: #349ad8;
            position: absolute;
            cursor: pointer;
            opacity: .15;
            border-radius: 5px;
        }

    #btnRowContainer {
        top: 175px;
        pointer-events: none;
    }

    /*
      ##Device = Tablets, Ipads (portrait)
      ##Screen = B/w 768px to 1024px
    */

    @@media (min-width: 768px) and (max-width: 1024px) and (orientation: portrait) {
        /* CSS */

        .k-animation-container {
            width:auto !important ;
        }

        .k-list-container.k-popup.k-group.k-reset.k-popup-dropdowntree.k-state-border-up {
            margin-left: 137px;
        }

        #imgAreaContainer {
            margin-left: 10px;
            width: 95%;
        }
        /*        #imgDropdownContainer {
            margin-left: 10px;
        }*/

        #printImageContainer {
            margin-right: 25px;
            margin-bottom: 10px;
        }

        #btnPDREstimateunlockLink {
            margin-top: 0px !important;
        }

        #btnAddNewManual {
            margin-top: 10px;
            margin-bottom: 10px;
        }

        #partsLabor {
            margin-bottom: 0px;
        }

        #btnPDR {
            margin-top: 0px;
        }

        #lblShowAllYears {
            width: 100%;
        }

        #btnPartsSearch {
            width: 80%;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #btnPartsNow {
            width: 80%;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #estimateIsLockedMessageD {
            display: none;
        }

        #estimateIsLockedMessageM {
            display: block;
        }

        #partsSectionLabel {
            width:50%;
            float:none;
        }

    }

    @@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
        /* CSS */

        #btnPartsSearch {
            width: 100%;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #btnPartsNow {
            width: 100%;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #estimateIsLockedMessageD {
            display: none;
        }

        #estimateIsLockedMessageM {
            display: block;
        }

        #partsSectionLabel {
            width: 50%;
            float: none;
        }

    }

    /*
          ##Device = Low Resolution Tablets, Mobiles (Landscape)
          ##Screen = B/w 481px to 767px
        */

    @@media (min-width: 481px) and (max-width: 767px) {

        .k-animation-container {
            width: auto !important;
        }

        .k-list-container.k-popup.k-group.k-reset.k-popup-dropdowntree.k-state-border-up {
            margin-left: 75px;
        }

        #imgAreaContainer {
            margin-left: 10px;
            width: 95%;
        }
        /*            #imgDropdownContainer {
                margin-left: 10px;
            }*/

        #printImageContainer {
            margin-right: 25px;
            margin-bottom: 10px;
        }

        #mitchellPages {
            margin-top: 10px;
        }

        #btnPDREstimateunlockLink {
            margin-top: 0px !important;
        }

        #btnAddNewManual {
            margin-top: 10px;
            margin-bottom: 10px;
        }

        #partsLabor {
            margin-bottom: 0px;
        }

        #btnPDR {
            margin-top: 0px;
        }

        #lblShowAllYears {
            width: 100%;
        }

        /*  #btnPartsSearch {
            width: 80%;
            margin-top: 5px;
            margin-bottom: 5px;
        }*/

        #btnPartsSearch {
            width: 100%;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #btnPartsNow {
            width: 100%;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #estimateIsLockedMessageD {
            display: none;
        }

        #estimateIsLockedMessageM {
            display: block;
        }
    }

    @@media (min-width:320px) and (max-width: 481px) {
        .k-list-container.k-popup.k-group.k-reset.k-popup-dropdowntree.k-state-border-up {
            margin-left: 0px;
        }

        #estimateIsLockedMessageD {
            display: none;
        }

        #estimateIsLockedMessageM {
            display: block;
        }

        #btnPartsSearch {
            width: 100%;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #btnAddNewManual {
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #btnPartsNow {
            width: 80%;
            margin-left: 40px;
        }

        #btnPDR {
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #btnPDREstimateLockLink {
            margin-top: 5px;
            margin-bottom: 5px;
        }

        #btnPDREstimateunlockLink {
            margin-top: 5px;
            margin-bottom: 5px;
        }
    }

</style>

<script>
    $(document).ready(function () {

        @if (ViewBag.UseLegacyPartsSectionDropdown) {
         <text>
            $("#sectionContainerEstimateLocked").css("height", "150px");

            @if (!ViewBag.IsMobileDevice)
            {
                <text>
                    $("#sectionSearchContainer").css("width", "20%");
                    $("#partInfoTableContainer").css("width", "");
                    $("#partInfoTableContainer").css("margin-left", "25%");
                    $("#imageContainer").css("float", "");
                    $("#partsLabor").css("margin-bottom", "10px");
                </text>
            }
            </text>
        }
        else {
            <text>
                $("#sectionContainerEstimateLocked").css("height", "10px");
            </text>
        }

        @if (ViewBag.IsMobileDevice)
        {
            <text>
                $("#paintTypeExternalDiv").css("display", "none");
                $("#refinishListExternalDiv").css("display", "none");
            </text>
        }
        else
        {
            <text>
                $("#paintTypeExternalDiv").css("display", "block");
                $("#paintTypeInternalDiv").css("display", "block");
                $("#btnAddNewManual").insertAfter($("#HeaderPaintType"));
                $("#HeaderPaintType").css("display", "none");
                $("#btnAddNewManual").css("margin-top", "0px");
                //$("#btnAddNewManual").css("width", "120px");

                $("#refinishListExternalDiv").css("display", "block");
                $("#refinishListInternalDiv").css("display", "block");
                $("#DropDownListAutoPaint").css("display", "none");

                @if (ViewBag.UseLegacyPartsSectionDropdown)
                {
                    <text>
                        $("#btnPartsSearch").css("width", $("#partsLabor").css("width"));
                        //$("#btnPartsSearch").css("margin-top", "5px");

                        $("#btnPartsNow").css("width", $("#partsLabor").css("width"));
                        //$("#btnPartsNow").css("margin-top", "0px");
                    </text>
                }

                @if (Model.HasPDRContract)
                {
                    if (Model.PDREnabled)
                    {
                        <text>
                            $("#btnPDR").insertAfter($("#DropDownListAutoPaint"));
                            //$("#btnPDR").css("margin-top", "0px");
                            //$("#btnPDR").css("width", "120px");
                        </text>
                    }
                    else
                    {
                        if (Model.EstimateIsLocked)
                        {
                            <text>
                                $("#btnPDREstimateLockLink").insertAfter($("#DropDownListAutoPaint"));
                                //$("#btnPDREstimateLockLink").css("margin-top", "0px");
                                //$("#btnPDREstimateLockLink").css("width", "120px");
                            </text>
                        }
                        else
                        {
                            <text>
                                $("#btnPDREstimateunlockLink").insertAfter($("#DropDownListAutoPaint"));
                                //$("#btnPDREstimateunlockLink").css("margin-top", "0px");
                                //$("#btnPDREstimateunlockLink").css("width", "120px");
                            </text>
                        }
                    }
                }

            </text>
        }

        if (_isImpersonated) {
            $(".graphical-header").css("top", "140px");
        }

         
    });

    function OnSliderChange(e) {
        $(".k-treeview").css("font-size", e.value + "px");

        $.ajax({
            //url: '/api/getPartsNow',
            url: '@Url.Action("SaveFontSizeAccountPreferences", "Settings")',
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({"userID": @ViewBag.UserID,"loginID":@Model.LoginID, "partsSectionTreeFontSize": e.value  }),
            beforeSend: function () {
                $(".k-treeview").css("font-size", e.value + "px");
            },
            success: function (result) {
                console.log(result);
            },
            error: function (error) {
                console.log("error");
                console.log(error);
            }
        });
    }

</script>

<script>

    $(document).ready(function () {

        @if (ViewBag.IsMobileDevice)
        {
            <text>
                $("#paintTypeExternalDiv").css("display", "none");
                $("#refinishListInternalDiv").css("display", "none");
                $("#partsLabor").css("width", "100%");
                //$("#mitchellPages").insertAfter($("#sectionslistdropdowntree"));
                //$("#mitchellPages").css("margin-left", "0px");
                //$("#mitchellPages").css("margin-top", "10px");
                //$("#mitchellPages").css("width", "100%");
            </text>
        }
        else
        {
            <text>
                $("#paintTypeExternalDiv").css("display", "block");
                $("#paintTypeInternalDiv").css("display", "block");
                $("#btnAddNewManual").insertAfter($("#HeaderPaintType"));
                $("#HeaderPaintType").css("display", "none");
                //$("#btnAddNewManual").css("margin-top", "0px");
                //$("#btnAddNewManual").css("width", "120px");

                $("#refinishListInternalDiv").css("display", "block");
                $("#refinishListInternalDiv").css("display", "block");
                $("#DropDownListAutoPaint").css("display", "none");

                @if (Model.HasPDRContract)
                {
                    if (Model.PDREnabled)
                    {
                        <text>
                            $("#btnPDR").insertAfter($("#DropDownListAutoPaint"));
                            //$("#btnPDR").css("margin-top", "0px");
                            //$("#btnPDR").css("width", "120px");
                        </text>
                    }
                    else
                    {
                        if (Model.EstimateIsLocked)
                        {
                            <text>
                                $("#btnPDREstimateLockLink").insertAfter($("#DropDownListAutoPaint"));
                               /* $("#btnPDREstimateLockLink").css("margin-top", "0px");*/
                                //$("#btnPDREstimateLockLink").css("width", "120px");
                            </text>
                        }
                        else
                        {
                            <text>
                                $("#btnPDREstimateunlockLink").insertAfter($("#DropDownListAutoPaint"));
                                /*$("#btnPDREstimateunlockLink").css("margin-top", "0px");*/
                                //$("#btnPDREstimateunlockLink").css("width", "120px");
                            </text>
                        }
                    }
                }

        $("#partsLabor").insertAfter($("#controlToDisplayAfter"));

            </text>
        }
    });

</script>

<script src="~/Scripts/PaintCalculations.js?18"></script>

<div id="workDesk" class="page-container" style="display: none;">
    @using (Html.BeginForm("AddPartsGraphically", "Estimate", FormMethod.Post, new { @class = "container" }))
    {
        @Html.Hidden("currentPart")
        @Html.HiddenFor(o => o.PDREnabled)

        <div class="graphical-header">
            <div class="graphic-top-row">

                @* Large screen Repair Type radio buttons *@
                <div class="radio-container" style="z-index: 100; position: relative;">
                    <div class="radio-title">@Proestimator.Resources.ProStrings.Action:</div>

                    @if (Model.ForceSmallTop)
                    {
                        <div class="graphic-container-small-no-hide">
                            <select id="repairTypeSelect">
                                <option id="smReplaceID" value="Replace">@Proestimator.Resources.ProStrings.OperationType_Replace</option>
                                <option id="smRepairID" value="Repair">@Proestimator.Resources.ProStrings.OperationType_Repair</option>
                                <option id="smRIID" value="RI">@Proestimator.Resources.ProStrings.OperationType_RI</option>
                                <option id="smRefinishID" value="Refinish">@Proestimator.Resources.ProStrings.OperationType_Refinish</option>
                                <option id="smBlendID" value="Blend">@Proestimator.Resources.ProStrings.OperationType_Blend</option>
                            </select>
                        </div>
                    }
                    else
                    {
                        <div class="graphic-container-large">
                            <label class="radio-button">@Html.RadioButton("HeaderAction", "Replace", true, new { @class = "HeaderAction" }) <span>@Proestimator.Resources.ProStrings.OperationType_Replace</span></label>
                            <label class="radio-button">@Html.RadioButton("HeaderAction", "Repair", false, new { @class = "HeaderAction" }) <span>@Proestimator.Resources.ProStrings.OperationType_Repair</span></label>
                            <label class="radio-button">@Html.RadioButton("HeaderAction", "RI", false, new { @class = "HeaderAction" }) <span>@Proestimator.Resources.ProStrings.OperationType_RI</span></label>
                            <label class="radio-button">@Html.RadioButton("HeaderAction", "Refinish", false, new { @class = "HeaderAction" }) <span>@Proestimator.Resources.ProStrings.OperationType_Refinish</span></label>
                            <label class="radio-button">@Html.RadioButton("HeaderAction", "Blend", false, new { @class = "HeaderAction" }) <span>@Proestimator.Resources.ProStrings.OperationType_Blend</span></label>
                        </div>

                        <div class="graphic-container-small">
                            <select id="repairTypeSelect">
                                <option id="smReplaceID" value="Replace">@Proestimator.Resources.ProStrings.OperationType_Replace</option>
                                <option id="smRepairID" value="Repair">@Proestimator.Resources.ProStrings.OperationType_Repair</option>
                                <option id="smRIID" value="RI">@Proestimator.Resources.ProStrings.OperationType_RI</option>
                                <option id="smRefinishID" value="Refinish">@Proestimator.Resources.ProStrings.OperationType_Refinish</option>
                                <option id="smBlendID" value="Blend">@Proestimator.Resources.ProStrings.OperationType_Blend</option>
                            </select>
                        </div>
                    }

                </div>

                @* Large Screen Part Type radio buttons *@
                <div class="radio-container" style="z-index: 100; position: relative;">
                    <div class="radio-title">@Proestimator.Resources.ProStrings.PartSource:</div>

                    @if (Model.ForceSmallTop)
                    {
                        <div class="graphic-container-small-no-hide">
                            <select id="partTypeSelect">
                                <option id="smOEMID" value="OEM">@Proestimator.Resources.ProStrings.OEM</option>
                                <option id="smAfterID" value="After">@Proestimator.Resources.ProStrings.AftermarketGraphical</option>
                                <option id="smLKQID" value="LKQ">@Proestimator.Resources.ProStrings.LKQ</option>
                                <option id="smRemanID" value="Reman">@Proestimator.Resources.ProStrings.Reman</option>
                            </select>
                        </div>
                    }
                    else
                    {
                        <div class="graphic-container-large">
                            <label class="radio-button">@Html.RadioButton("HeaderPartSource", "OEM", true, new { @class = "HeaderPartSource" }) <span>@Proestimator.Resources.ProStrings.OEM</span></label>
                            <label class="radio-button">@Html.RadioButton("HeaderPartSource", "After", false, new { @class = "HeaderPartSource" }) <span>@Proestimator.Resources.ProStrings.AftermarketGraphical</span></label>
                            <label class="radio-button">@Html.RadioButton("HeaderPartSource", "LKQ", false, new { @class = "HeaderPartSource" }) <span>@Proestimator.Resources.ProStrings.LKQ</span></label>
                            <label class="radio-button">@Html.RadioButton("HeaderPartSource", "Reman", false, new { @class = "HeaderPartSource" }) <span>@Proestimator.Resources.ProStrings.Reman</span></label>
                        </div>

                        <div class="graphic-container-small">
                            <select id="partTypeSelect">
                                <option id="smOEMID" value="OEM">@Proestimator.Resources.ProStrings.OEM</option>
                                <option id="smAfterID" value="After">@Proestimator.Resources.ProStrings.AftermarketGraphical</option>
                                <option id="smLKQID" value="LKQ">@Proestimator.Resources.ProStrings.LKQ</option>
                                <option id="smRemanID" value="Reman">@Proestimator.Resources.ProStrings.Reman</option>
                            </select>
                        </div>
                    }

                </div>

                @* The Left and Right radio buttons, and the Large Screen Paint Type drop down*@
                <div class="radio-container" style="z-index: 100; position: relative;">
                    <div class="radio-title">@Proestimator.Resources.ProStrings.Side:</div>

                    @if (Model.ForceSmallTop)
                    {
                        <div class="graphic-container-small-no-hide">
                            <select id="sideSelect">
                                <option value="L">@Proestimator.Resources.ProStrings.Left</option>
                                <option value="R">@Proestimator.Resources.ProStrings.Right</option>
                            </select>
                        </div>
                    }
                    else
                    {
                        <div class="graphic-container-large">
                            <label class="radio-button">@Html.RadioButton("rbLeftRight", "L", true) <span>@Proestimator.Resources.ProStrings.Left</span></label>
                            <label class="radio-button">@Html.RadioButton("rbLeftRight", "R") <span>@Proestimator.Resources.ProStrings.Right</span></label>
                        </div>

                        <div class="graphic-container-small">
                            <select id="sideSelect">
                                <option value="L">@Proestimator.Resources.ProStrings.Left</option>
                                <option value="R">@Proestimator.Resources.ProStrings.Right</option>
                            </select>
                        </div>
                    }

                </div>

                <div class="radio-container" id="paintTypeExternalDiv">
                    <div class="radio-title"></div>
                    <div class="paint-type" id="paintTypeInternalDiv">@Html.DropDownListFor(model => model.PaintType, new SelectList(Model.PaintList, "Value", "Text"), new { @id = "HeaderPaintType" })</div>
                </div>

                <div class="radio-container" id="refinishListExternalDiv">
                    <div class="lg_hide md_display refinish-container">
                        <div class="refinish-List" id="refinishListInternalDiv">
                            @Html.DropDownList("DropDownListAutoPaint", new SelectList(Model.RefinishList, "Value", "Text"))
                        </div>

                    </div>
                </div>
            </div>

        </div>

        <div class="graphical-container">
            <div class="resizable resizable-top">

                <div id="graphical-page-stuff">

                    @* The Select Section drop down box *@
                    <div id="sectionSearchContainer">
                        @if (!string.IsNullOrEmpty(Model.ManualEntry.Details.VehicleProuctionDate))
                        {
                            <label style="text-align: center; padding-bottom: 10px;"><b>@Proestimator.Resources.ProStrings.ProductionDate :<span> @Model.ManualEntry.Details.VehicleProuctionDate</span></b></label>
                        }

                    <div id="sectionContainer">
                        @if (Model.ShowSectionsDropdown)
                        {
                            if (ViewBag.UseLegacyPartsSectionDropdown)
                            {
                                <p class="inputLabel sm_hide lg_display">@Proestimator.Resources.ProStrings.Graphical_SelectPartsSection</p>
                            }

                            @Html.Hidden("VID", vehicleID)
                            if (Model.EstimateIsLocked)
                            {
                                <p id="estimateIsLockedMessageM" style="color: red; text-align: center;">@Proestimator.Resources.ProStrings.Graphcial_LockMessage2</p>
                            }
                            <label id="controlToDisplayAfter" style="display:none"></label>
                            if (ViewBag.UseLegacyPartsSectionDropdown)
                            {
                                @Html.DropDownList("sectionSelect", new SelectList(Model.Sections, "Value", "Text"))

                                <label id="lblShowAllYears">@Html.CheckBoxFor(o => o.ShowAllYears, new { id = "checkShowAllYears" }) @Proestimator.Resources.ProStrings.ShowAllYears</label>
                                <label id="deselectArrow" class="sm_hide lg_display" style="font-size: 0.9em; width: 50%; float: right; margin-top: -5px;"><span style="font-size: 1.5em">&#8592;</span> <span id="deselectArrowNote">@Proestimator.Resources.ProStrings.DeselectAllYears</span></label>
                            }

                            if (!ViewBag.UseLegacyPartsSectionDropdown)
                            {
                                    <label id="lblShowAllYears">@Html.CheckBoxFor(o => o.ShowAllYears, new { id = "checkShowAllYears" }) @Proestimator.Resources.ProStrings.SelectToShowAllYears</label>
                                <p id="partsSectionLabel" class="inputLabel sm_hide lg_display">@Proestimator.Resources.ProStrings.Graphical_SelectPartsSection</p>
                                @(Html.Kendo().Slider()
                                .Name("treeViewFontSizeSlider")
                                .Min(12)
                                .ShowButtons(false)
                                .Max(24)
                                .SmallStep(1)
                                .Value(@Model.PartsSectionTreeFontSize)
                                .LargeStep(12).Events(e => e
                                                .Change("OnSliderChange")
                                            ))
                                                           
                                if (ViewBag.IsMobileDevice)
                                {
                                    @(Html.Kendo().DropDownTree()
                                          .Name("sectionslistdropdowntree")
                                          .AutoWidth(true)
                                          .DataTextField("Text")
                                          .HtmlAttributes(new { style = "width: 100%;background-color:white;font-size:15px" })
                                          .Height("500px")
                                          .AutoClose(false)
                                          .ClearButton(false)
                                          .LoadOnDemand(false)
                                          .Events(events => events.DataBound("sectionsListTreeControl_DataBound"))
                                          .DataSource(d => d
                                                .Model(m => m
                                                    .Id("Id")
                                                    .HasChildren("HasChildren")
                                                    .Children("Items"))
                                                .Read(r => r.Action("GetSectionsDropDown", "Estimate").Data("GetTreeSectionSearchParameters"))
                                           )
                                    )
                                }
                                else
                                {
                                    @(Html.Kendo().TreeView()
                                        .Name("sectionslisttreeview")
                                        .DataTextField("Text")
                                        .AutoBind(true)
                                        .AutoScroll(true)
                                        .LoadOnDemand(false)
                                        .ExpandAll(false)
                                        .HtmlAttributes(new { style = "height: 390px; width:80%; border-width:1px;font-size:15px" })
                                        .DataSource(d => d
                                            .Model(m => m
                                                .Id("Id")
                                                .HasChildren("HasChildren")
                                                .Children("Items"))
                                            .Read(r => r.Action("GetSectionsDropDown", "Estimate").Data("GetTreeSectionSearchParameters"))
                                       )
                                    )
                                }
                            }

                            if (!Model.VehicleDataFound)
                            {
                                <p class="error-message" style="font-size: 0.8em;">There is currently no part data for the selected vehicle.  You can try using the "show all years" option above to see parts from previous years.</p>
                            }
                        }
                        else
                        {
                            <p class="inputLabel sm_hide lg_display admonishment">@Proestimator.Resources.ProStrings.AccessVehicleDatabaseBodyType</p>
                        }
                    </div>

                        <div id="sectionContainerEstimateLocked">

                            @if (Model.EstimateIsLocked)
                            {
                                <a id="btnPartsSearch" class="button col" style="opacity:0.5">@Proestimator.Resources.ProStrings.PartsSearch</a>
                                <a id="btnAddNewManual" class="button col" style="opacity:0.5">@Proestimator.Resources.ProStrings.Graphical_AddManual</a>

                                if (ViewBag.UseLegacyPartsSectionDropdown)
                                {
                                    <a id="partsLabor" class="button col partsLaborButton" style="margin-top: 10px;opacity:0.5">@Proestimator.Resources.ProStrings.PartsLabor</a>
                                }
                                else
                                {
                                    <a id="partsLabor" class="button col partsLaborButton" style="margin-bottom: 10px;opacity:0.5;width:80%">@Proestimator.Resources.ProStrings.PartsLabor</a>
                                }
                            }
                            else
                            {
                                <a id="btnPartsSearch" class="button col do-not-disable">@Proestimator.Resources.ProStrings.PartsSearch</a>
                                <a id="btnAddNewManual" class="button col">@Proestimator.Resources.ProStrings.Graphical_AddManual</a>

                                if (ViewBag.UseLegacyPartsSectionDropdown)
                                {
                                    <a id="partsLabor" onclick="showPartsAndLabor();" class="button col partsLaborButton" style="margin-top: 10px;">@Proestimator.Resources.ProStrings.PartsLabor</a>
                                }
                                else
                                {
                                    <a id="partsLabor" onclick="showPartsAndLabor();" class="button col partsLaborButton" style="margin-bottom: 10px; width: 80%">@Proestimator.Resources.ProStrings.PartsLabor</a>
                                }
                            }

                            @if (Model.HasPDRContract)
                            {
                                if (Model.PDREnabled)
                                {
                                    if (Model.EstimateIsLocked)
                                    {
                                        <a id="btnPDR" class="button col resize" style="opacity:0.5">@Proestimator.Resources.ProStrings.PDR</a>
                                    }
                                    else
                                    {
                                        <a id="btnPDR" class="button col resize">@Proestimator.Resources.ProStrings.PDR</a>
                                    }
                                }
                                else
                                {
                                    if (Model.EstimateIsLocked)
                                    {
                                        <a id="btnPDREstimateLockLink" class="button col resize" style="margin-top: 0px;opacity:0.5">@Proestimator.Resources.ProStrings.PDR</a>
                                    }
                                    else
                                    {
                                        <a id="btnPDREstimateunlockLink" class="button col resize" href="/@ViewBag.UserID/estimate/@Model.EstimateID/pdr-profile-select?errorMessage=PDR">@Proestimator.Resources.ProStrings.PDR</a>
                                    }
                                }
                            }

                            @if (Model.EstimateIsImported)
                            {
                                <div style="color: red; clear: both;" class="inlineNote" id="estimateIsImported">
                                    <p>Due to program differences between Web-Est and ProEstimator, all imported estimates must be reviewed for accuracy.  We also recommend supplements be written on a new estimate.</p>
                                </div>
                            }

                            <div class="adding-parts-message" style="float: left;">

                            </div>
                        </div>

                        @if (Model.HasPartsNowContract)
                        {
                            <div id="sectionContainer">
                                <a id="btnPartsNow" class="button col" onclick="launchPartsNowPortal()">@Proestimator.Resources.ProStrings.PartsNow</a>
                            </div>
                        }
                    </div>

                    <div id="part-search-container">

                        <div class="search-row">
                            <div><p>Description</p></div>
                            <div><input autocomplete="off" id="SearchText" name="SearchText" type="text" value=""></div>
                            <div class="mobile-break"><p>Part Number</p></div>
                            <div><input autocomplete="off" id="SearchPartNumber" class="do-not-disable" name="SearchPartNumber" type="text" value=""></div>
                            <div class="mobile-break search-button-wrapper"><input id="btnSearch" type="button" class="button col sm_4_4 lg_12_12 do-not-disable" style="margin-top: 0px;" value="@Proestimator.Resources.ProStrings.Search" /></div>
                            <div class="search-back-container search-button-wrapper"><input type="button" value="Close" class="button col sm_4_4 lg_12_12 do-not-disable" id="btnSearchClose" style="margin-top: 0px;" /></div>
                            <div class="search-button-wrapper search-button-add-wrapper">
                                <input type="button" value="Add Part" class="button nav-btn do-not-disable btnSearchAdd" style="margin-top: 0px;" />
                            </div>
                        </div>

                        <div class="adding-parts-message" style="padding-top: 35px; padding-left: 5px;">
                        </div>

                        <div class="parts-search-results-container">

                            <div id="SectionsGridContainer" class="datagrid search-section">
                                @(Html.Kendo().Grid<ProEstimator.Business.Logic.PartSearchSection>()
                                .Name("sections-grid")
                                .Columns(columns =>
                                {
                                    columns.Bound(item => item.SectionKey).Hidden();
                                    columns.Bound(item => item.SectionName).Encoded(false);
                                    columns.Bound(item => item.PartCount).Encoded(false);
                                })
                                .Sortable()
                                .Selectable()
                                .Events(events => events
                                    .DataBound("SectionsGridDataChanged")
                                    .Change("SectionsGridLineSelectionChanged")
                                )
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .ServerOperation(false)
                                    .Sort(sort => sort.Add("LastView").Descending())
                                    .Read(read => read.Action("DoPartSearchSections", "Home").Data("GetSectionSearchParameters"))
                                )
                            )
                            </div>

                            <div id="PartsGridContainer" class="datagrid search-section">
                                @(Html.Kendo().Grid<ProEstimator.Business.Logic.PartSearchPart>()
                                .Name("parts-grid")
                                .Columns(columns =>
                                {
                                    columns.Bound(item => item.UnhilightedDescription).Hidden();
                                    columns.Bound(item => item.PartDescription).Encoded(false);
                                    columns.Bound(item => item.DetailCount).Encoded(false);
                                })
                                .Sortable()
                                .Selectable()
                                .Events(events => events
                                    .DataBound("PartsGridDataChanged")
                                    .Change("PartsGridLineSelectionChanged")
                                )
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .ServerOperation(false)
                                    .Sort(sort => sort.Add("LastView").Descending())
                                    .Read(read => read.Action("DoPartSearchParts", "Home").Data("GetPartSearchParameters"))
                                )
                            )
                            </div>

                            <div id="DetailsGridContainer" class="datagrid search-section">
                                @(Html.Kendo().Grid<ProEstimator.Business.Logic.PartSearchDetail>()
                                .Name("details-grid")
                                .Columns(columns =>
                                {
                                    columns.Bound(item => item.Barcode).Hidden();
                                    columns.Bound(item => item.PartText).Encoded(false);
                                    columns.Bound(item => item.PartNumber).Encoded(false);
                                    columns.Bound(item => item.Price).Encoded(false);
                                })
                                .Sortable()
                                .Selectable()
                                .Events(events => events
                                    .DataBound("DetailsGridDataChanged")
                                    .Change("DetailsGridLineSelectionChanged")
                                )
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .ServerOperation(false)
                                    .Sort(sort => sort.Add("LastView").Descending())
                                    .Read(read => read.Action("DoPartSearchDetails", "Home").Data("GetDetailsSearchParameters"))
                                )
                            )

                            </div>

                            <div class="search-button-add-wrapper" style="float: left; padding-bottom: 30px;">
                                <input type="button" value="Add Part" class="button nav-btn do-not-disable btnSearchAdd lg_hide" style="margin-top: 0px;" />
                            </div>
                        </div>
                    </div>



                    @* Image Container. *@
                <div id="imageContainer">

                    @if (Model.EstimateIsLocked)
                    {
                        <p id="estimateIsLockedMessageD" style="color: red; text-align: center;">@Proestimator.Resources.ProStrings.Graphcial_LockMessage2</p>
                    }


                    @if (ViewBag.UseLegacyPartsSectionDropdown)
                    {
                        <div id="imgDropdownContainer" style="height: 40px;">
                            @if (Model.ShowSectionsDropdown)
                            {
                                <p id="MakeSelectionLabel" class="sm_hide lg_display" style="font-size: larger;"><span style="font-size: 1.5em">&#8592;</span> @Proestimator.Resources.ProStrings.MakeSectionSelection</p>
                            }

                            <div id="imgDropdownMainContainer" style="display: none; background-color: white;">
                                <p style="margin: 0px; float: left; margin-top: 4px;">Please select an image</p>
                                <ul id="imgDropdown" style="display:inline-flex; list-style-type: none; margin: 0px; padding-left: 10px;">
                                    <li>1</li>
                                </ul>
                            </div>

                            <div id="printImageContainer" class="resize" style="width: 13%; float:right">
                                <a id="printPartsImg" class="button col">@Proestimator.Resources.ProStrings.Print</a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div id="imgDropdownContainer" style="height: 40px;">
                            <div id="mainContainer">
                                <div id="imgDropdownMainContainer" style="display: none; background-color: white;float:left">
                                    <p style="margin: 0px; float: left; margin-top: 4px;">Please select an image</p>
                                    <ul id="imgDropdown" style="display:inline-flex; list-style-type: none; margin: 0px; padding-left: 10px;">
                                        <li>1</li>
                                    </ul>
                                </div>

                                <div id="mitchellPagesPrintImageContainer" style="float:right;width:50%">
                                    <a id="mitchellPages" class="button col" href="#" onclick="javascript:window.open('@Proestimator.Resources.ProStrings.Mitchell_P_Pages_Document_Path', '@Proestimator.Resources.ProStrings.Mitchell_P_Pages');">@Proestimator.Resources.ProStrings.Mitchell_P_Pages</a>
                                    <div id="printImageContainer" class="resize" style="width: 25%; float:right;">
                                        <a id="printPartsImg" class="button col">@Proestimator.Resources.ProStrings.Print</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <div id="imgAreaContainer">
                        <div id="imgContainer">

                        </div>

                        <div id="mapContainer">

                        </div>
                    </div>

                    <div id="printImgContainer" style="display:none">

                    </div>
                </div>

                    @* Part Details - the column on the right side that shows details of the hovered part. *@
                    <div id="btnRowContainer" class="col sm_4_4 md_8_8 lg_3_12">

                        <div id="partInfoTableContainer" class="col sm_hide lg_12_12">
                            <div class="datagrid">

                                <table class="detailsTable" border="1">
                                    <thead>
                                        <tr>
                                            <th scope="col" colspan="2">@Proestimator.Resources.ProStrings.PartDetails</th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                        <tr>
                                            <td style="width:10%;" id="LabelPartNumberTitle">@Proestimator.Resources.ProStrings.PartNo</td>
                                            <td style="width:90%;">
                                                <label id="LabelPartNumber"></label>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td id="LabelDescriptionTitle">@Proestimator.Resources.ProStrings.Description</td>
                                            <td><label id="LabelDescription"></label></td>
                                        </tr>
                                        <tr>
                                            <td id="LabelPriceTitle">@Proestimator.Resources.ProStrings.Price</td>
                                            <td><label id="LabelPrice"></label></td>
                                        </tr>
                                        <tr>
                                            <td id="LabelLaborTypes">@Proestimator.Resources.ProStrings.Labor</td>
                                            <td>
                                                <table class="detailsTable" style="font-size:12px;">
                                                    <tr>
                                                        <td colspan="2">
                                                            <label id="LabelTimeTitle"></label>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <label id="LabelTimeText1"></label>
                                                        </td>
                                                        <td>
                                                            <label id="LabelTime1"></label>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <label id="LabelTimeText2"></label>
                                                        </td>
                                                        <td>
                                                            <label id="LabelTime2"></label>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td colspan="2">
                                                            <label id="LabelPaintType"></label>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td id="LabelNotesTitle">@Proestimator.Resources.ProStrings.Notes</td>
                                            <td><label id="LabelNotes"></label> </td>
                                        </tr>
                                        <tr>
                                            <td id="LabelActionTitle">@Proestimator.Resources.ProStrings.Action</td>
                                            <td><label id="LabelAction"></label></td>
                                        </tr>
                                        <tr>
                                            <td id="LabelQuantity">@Proestimator.Resources.ProStrings.Quantity</td>
                                            <td><label id="LabelQtyOrd"></label></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                </div>

                <div id="MEDetails" style="height: 100%; overflow: auto; display: none;">
                    @Html.EditorFor(model => model.ManualEntry.Details)
                </div>

                @* The Parts And Labor form. *@
                <div id="PartsAndLaborContainer">
                    <h1>
                        <label id="LabelParts">@Proestimator.Resources.ProStrings.Parts</label>
                    </h1>

                    <input onclick="javascript: PartsOKClicked();" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.ClosePartsAndLabor">

                    <span id="PartsTableLarge" class="sm_hide md_display lg_display">
                        <label>@Proestimator.Resources.ProStrings.PartListNote</label>
                    </span>

                    <span id="PartsTableSmall" class="md_hide lg_hide">
                        <label>@Proestimator.Resources.ProStrings.PartListNote</label>
                    </span>

                    <input onclick="javascript: PartsOKClicked();" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.ClosePartsAndLabor">
                </div>

                @* The Part information popup for mobile screens.*@
                <div id="PartInformation">
                    <input onclick="javascript: hideMobileDetails(true);" type="button" value="@Proestimator.Resources.ProStrings.CloseWindow" class="button nav-btn do-not-disable">
                    <input onclick="javascript: mobileAddPart();" type="button" value="@Proestimator.Resources.ProStrings.Button_AddPart" class="button nav-btn do-not-disable">

                    <div class="datagrid parts-info-wrapper">

                        <div class="parts-info-scroller">
                            <table class="detailsTable" border="1" style="margin-top: 0px;">
                                <thead>
                                    <tr>
                                        <th scope="col" colspan="2">@Proestimator.Resources.ProStrings.PartDetails</th>
                                    </tr>
                                </thead>

                                <tbody>
                                    <tr>
                                        <td style="width:10%;">@Proestimator.Resources.ProStrings.PartNo</td>
                                        <td style="width:90%;">
                                            <label id="LabelPartNumberPop"></label>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>@Proestimator.Resources.ProStrings.Description</td>
                                        <td><label id="LabelDescriptionPop"></label></td>
                                    </tr>
                                    <tr>
                                        <td>@Proestimator.Resources.ProStrings.Price</td>
                                        <td><label id="LabelPricePop"></label></td>
                                    </tr>
                                    <tr>
                                        <td id="LabelLaborTypesPop">@Proestimator.Resources.ProStrings.Labor</td>
                                        <td>
                                            <table class="detailsTable" style="font-size:12px;">
                                                <tr>
                                                    <td colspan="2">
                                                        <label id="LabelTimeTitlePop"></label>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>
                                                        <label id="LabelTimeText1Pop"></label>
                                                    </td>
                                                    <td>
                                                        <label id="LabelTime1Pop"></label>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>
                                                        <label id="LabelTimeText2Pop"></label>
                                                    </td>
                                                    <td>
                                                        <label id="LabelTime2Pop"></label>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td colspan="2">
                                                        <label id="LabelPaintTypePop"></label>
                                                    </td>
                                                </tr>
                                            </table>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>@Proestimator.Resources.ProStrings.Notes</td>
                                        <td><label id="LabelNotesPop"></label> </td>
                                    </tr>
                                    <tr>
                                        <td>@Proestimator.Resources.ProStrings.Action</td>
                                        <td><label id="LabelActionPop"></label></td>
                                    </tr>
                                    <tr>
                                        <td>@Proestimator.Resources.ProStrings.Quantity</td>
                                        <td><label id="LabelQtyOrdPop"></label></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <input onclick="javascript: hideMobileDetails(true);" type="button" value="@Proestimator.Resources.ProStrings.CloseWindow" class="button nav-btn sm_hide do-not-disable">
                    <input onclick="javascript: mobileAddPart();" type="button" value="@Proestimator.Resources.ProStrings.Button_AddPart" class="button nav-btn sm_hide do-not-disable">
                </div>

                @* The PDR Matrix form. *@
                @if (Model.HasPDRContract && Model.PDREnabled)
                {
                    <div id="PDRMatrixContainer" style="display: none; height: 100%; overflow: auto;">
                        @if (Model.PDRMatrix != null)
                        {
                            @Html.EditorFor(model => model.PDRMatrix);
                        }

                        @if (Model.PDRMatrixMobile != null)
                        {
                            <div class="lg_hide">
                                <div>
                                    <input type="button" class="button nav-btn do-not-disable" value="Rate Profile" onclick="SubmitAndRedirect('/@ViewBag.UserID/pdr-rates/@(Model.PDRMatrix != null ? Model.PDRMatrix.ProfileID : Model.PDRMatrixMobile.ProfileID)')" />
                                    <input type="button" class="button nav-btn do-not-disable" id="btnPDRClose" value="@Proestimator.Resources.ProStrings.Close" />
                                </div>

                                @Html.EditorFor(model => model.PDRMatrixMobile);
                            </div>
                        }
                    </div>
                }

            </div>

            <div class="resizable resizable-bottom">
                <div class="graphical-footer">
                    <div id="MEList">
                        @Html.EditorFor(model => model.ManualEntry.List)
                    </div>
                </div>
            </div>
        </div>

        <div class="size-detector"></div>

    }
</div>

<div class="modal-container">

    @* A popup that shows overlap options. *@
    <div id="OverlapPopup" class="popup-panel">
        <font size="+1">
            <label id="LabelOverlapRecommendations">@Proestimator.Resources.ProStrings.Graphical_OverlapRecommendations:</label>
        </font><br>
        <div class="popup-panel-buttons-container">
            <input onclick="javascript: AcceptAllOverlaps();" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.Graphical_OverlapAcceptAll">
            <input onclick="javascript: AcceptCheckedOverlaps();" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.Graphical_OverlapAcceptChecked">
            <input onclick="javascript: RejectAllClicked();" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.Graphical_OverlapRejectAll">
        </div>
        <span id="OverlapTable">
            <label id="LabelOverlapLoading">@Proestimator.Resources.ProStrings.Graphical_OverlapLoading</label>
        </span>
    </div>

    @* A popup that shows add ons. *@
    <div id="AddOnPopup" class="popup-panel">
        <font size="+1" style="float: left;">
            <label id="LabelOverlapRecommendations">ProAdvisor Recommendations:</label>
        </font>
        @if (Model.ProAdvisorTrial)
        {
            <label class="add-on-trial-message">
                Note: Pro Advisor recommendations are available for evaluation in a trial period.  This is not part of the base contract and requires the purchase of an add on to use once your trial has expired.
            </label>
        }

        <label id="AddOnNoneSelected" style="display: none; color: red; text-align: center;">
            No add ons selected
        </label>
        <br>
        <div class="popup-panel-buttons-container">
            <input onclick="javascript: AcceptCheckedAddOns();" type="button" id="btnAcceptCheckedAddOns" class="button do-not-disable" value="Accept Selected">
            @*<input onclick="javascript: AcceptAllAddOns();" type="button" class="button do-not-disable" value="Accept All">*@
            <input onclick="javascript: RejectAllAddOns();" type="button" class="button do-not-disable" value="Reject All">
        </div>
        <div class="datagrid">
            @(Html.Kendo().Grid<ProAdvisorRecommendation>()
                .Name("add-ons-grid")
                .Columns(columns =>
                {
                    columns.Bound(item => item.ID).Hidden();
                    columns.Bound(item => item.Name);
                    //columns.Bound(item => item.Charge);
                })
                .Selectable()
                .Events(events => events
                    .DataBound("AddOnsGridDataChanged")
                    .Change("AddOnsGridSelectionChanged")
                )
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .ServerOperation(false)
                    .Read(read => read.Action("Empty", "AddOn"))
                )
                .AutoBind(false)
            )
        </div>
    </div>

    @* A popup that shows when there are multiple parts for the selected part. *@
    <div id="MultiplePartsPopup" class="popup-panel">
        <font size="+1">
            <label id="LabelMultipleExist">@Proestimator.Resources.ProStrings.Graphical_MultiplePartNumbers:</label>
        </font><br>
        <div class="popup-panel-buttons-container">
            <input onclick="javascript: hide('MultiplePartsPopup')" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.Graphical_CloseMultiPart">
        </div>

        <span id="MultipartsTable"></span>

        <div class="popup-panel-buttons-container">
            <input onclick="javascript: hide('MultiplePartsPopup')" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.Graphical_CloseMultiPart">
        </div>

    </div>

    @* Non OEM popup?  Not sure what this is, there's javascript to hide it but never to show it. *@
    <div id="NonOemPopup" class="popup-panel">
        <font size="+1">
            <label id="LabelSelectPart">@Proestimator.Resources.ProStrings.Graphical_SelectPartSource:</label>
        </font><br>
        <div class="popup-panel-buttons-container">
            <input onclick="javascript: hide('NonOemPopup')" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.Graphical_CloseNonOem">
        </div>
        <span id="NonOemTable"></span>
        <div class="popup-panel-buttons-container">
            <input onclick="javascript: hide('NonOemPopup')" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.Graphical_CloseNonOem">
        </div>
    </div>

    @* The Repair popup *@
    <div id="RepairPopup" class="popup-panel">
        <div style=" display:table-row;column-span:all;border: solid;  text-align: center;font-size:medium;">
            <label class="med" id="LabelRepairOptions">@Proestimator.Resources.ProStrings.Graphical_RepairOptions:</label>
        </div>
        <div style="display: table-row;">
            <div style="display: table-cell;padding-left: 5px;">
                <label class="light" id="LabelRepairTime" style="text-align: right;">
                </label>
            </div>
            <div style="display: table-cell;padding-left: 5px;padding-right:5px;">
                <input id="TextBoxLaborSlider" onblur="javascript:LaborHasFocus=false;" style="width: 80px;" onfocus="javascript:LaborHasFocus=true;" type="text" value="0" name="TextBoxLaborSlider">
            </div>
        </div>
        <div style="display: table-row;">
            <div style="display: table-cell;padding-left: 5px;">
                <label class="light" id="LabelIncludeRI">
                    @Proestimator.Resources.ProStrings.Graphical_IncludeRI @Html.CheckBox("CheckBoxIncludeRI")
                </label>
            </div>
            <div style="display: table-cell;padding-left: 5px;">
                <input id="TextBoxLaborRI" style="  width: 80px;" type="text" value="0" name="TextBoxLaborRI">
            </div>
        </div>
        <div style="padding-left: 5px; font-weight: bold;">
            <label id="LabelCalcInfo" style="margin-bottom: 0; margin-top: 10px;"></label>
        </div>
    </div>

    @* Paint time popup. *@
    <div id="PaintPopup" class="popup-panel">

        <div style=" display:table-row;border: solid;  text-align: center;font-size:small;">
            <div style="display: table-cell;column-span:all;padding-left: 5px;">
                <label id="LabelPaintOptions">@Proestimator.Resources.ProStrings.Graphical_PaintOptions:</label>
            </div>
        </div>
        <div style="display:table;">
            <div style=" display:table-row;border: solid;  text-align: center;font-size:medium;">
                <div style="display: table-cell;padding-right: 4px;	padding-left: 4px;background:#8C96A5;font-size:small;">
                    <label class="TableHeaderBig" id="LabelPaintType2">@Proestimator.Resources.ProStrings.PaintType</label>
                </div>
                <div style="display: table-cell;padding-right: 4px;	padding-left: 4px;background:#8C96A5;font-size:small;">
                    <label id="LabelPaintTime">@Proestimator.Resources.ProStrings.PaintTime</label>
                </div>
                <div style="display: table-cell;padding-right: 4px;	padding-left: 4px;background:#8C96A5;font-size:small;" class="panel-type-wrapper">
                    <label id="LabelOverlap">@Proestimator.Resources.ProStrings.PanelType</label>
                </div>
                <div style="display: table-cell;padding-right: 4px;	padding-left: 4px;background:#8C96A5;font-size:small;">

                </div>
            </div>
            <div style=" display:table-row;border: solid;  text-align: center;font-size:small;">
                <div style="display: table-cell;padding-left: 5px;">
                    @Html.DropDownList("Popup_DropDownListPaintType", new SelectList(Model.PaintList, "Value", "Text"))
                </div>
                <div style="display: table-cell;padding-left: 5px;">
                    <div style="display:table;">
                        <div style="display:table-row;">
                            <div style="display: table-cell;padding-left: 5px;">
                            </div>
                            <div style="display: table-cell;padding-left: 5px;font-size:small;">
                                @Html.TextBox("Popup_TextBoxPaintTime", "0", new { style = "width: 78px;" })
                            </div>
                            <div style="display: table-cell;padding-left: 5px;">
                            </div>
                            <div style="display: table-cell;padding-left: 5px;">
                                <label id="Label1">@Proestimator.Resources.ProStrings.HoursAbreviation</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div style="display: table-cell; padding-left: 5px; font-size:small;" class="panel-type-wrapper">
                    @{
                        List<SimpleListItem> overlapList = new List<SimpleListItem>();
                        overlapList.Add(new SimpleListItem("", ""));
                        overlapList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.FirstPanel, "First"));
                        overlapList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.AdjacentPanel, "Adjacent"));
                        overlapList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.NonAdjacentPanel, "NonAdjacent"));
                    }
                    @Html.DropDownList("Popup_DropDownListOverlap", new SelectList(overlapList, "Value", "Text"))
                </div>

            </div>
        </div>
        <div style="display:table;">
            <div style="display:table-row;">
                <div style="display: table-cell;padding-right: 4px;	padding-left: 4px;font-size:small;">
                    <label id="LabelAllowance">@Proestimator.Resources.ProStrings.ToneStageNote @Proestimator.Resources.ProStrings.HoursAbreviation</label>
                </div>
                <div style="display: table-cell;padding-right: 4px;	padding-left: 4px;font-size:small;">
                    <label id="LabelClearcoatTime">@Proestimator.Resources.ProStrings.ClearcoatTime @Proestimator.Resources.ProStrings.HoursAbreviation</label>
                </div>
                <div style="display: table-cell;padding-right: 4px;	padding-left: 4px;font-size:small;">
                    <label id="LabelBlendTime">@Proestimator.Resources.ProStrings.BlendTime @Proestimator.Resources.ProStrings.HoursAbreviation</label>
                </div>
                <div style="display: table-cell;padding-right: 4px;	padding-left: 4px;font-size:small;">
                    <label id="LabelEdgingTime">@Proestimator.Resources.ProStrings.EdgingTime @Proestimator.Resources.ProStrings.HoursAbreviation</label>
                </div>
                <div style="display: table-cell;padding-right: 4px;	padding-left: 4px;font-size:small;">
                    <label id="LabelUndersideTime">@Proestimator.Resources.ProStrings.UndersideTime @Proestimator.Resources.ProStrings.HoursAbreviation</label>
                </div>
            </div>
            <div style="display:table-row;">
                <div style="display:table-cell;">
                    <div style="display:table-row;">
                        <div style="display: table-cell;padding-left: 5px;font-size:small;">
                            @Html.TextBox("Popup_TextboxAllowanceTime", "0", new { style = "width: 78px;" })
                        </div>
                    </div>

                </div>
                <div style="display:table-cell;font-size: x-small;	color: navy;">
                    <div style="display:table-row;">
                        <div style="display: table-cell;padding-left: 5px;font-size:small;">
                            @Html.TextBox("Popup_TextboxClearcoatTime", "0", new { style = "width: 78px;" })
                        </div>
                    </div>

                </div>
                <div style="display:table-cell;font-size: x-small;	color: navy;">
                    <div style="display:table-row;">
                        <div style="display: table-cell;padding-left: 5px;font-size:small;">
                            @Html.TextBox("Popup_TextboxBlendTime", "0", new { style = "width: 78px;" })
                        </div>
                    </div>

                </div>
                <div style="display:table-cell;">
                    <div style="display:table-row;">
                        <div style="display: table-cell;padding-left: 5px;font-size:small;">
                            @Html.TextBox("Popup_TextboxEdgingTime", "0", new { style = "width: 78px;" })
                        </div>

                    </div>

                </div>
                <div style="display:table-cell;">
                    <div style="display:table-row;">
                        <div style="display: table-cell;padding-left: 5px;font-size:small;">
                            @Html.TextBox("Popup_TextboxUndersideTime", "0", new { style = "width: 78px;" })
                        </div>
                    </div>

                </div>
            </div>
            <div style="display:table-row;">
                <div style="display:table-cell;font-size:small;">
                    @Html.CheckBox("Popup_CheckBoxIncludeAllowance") @Proestimator.Resources.ProStrings.Include
                    <br />
                    @Html.CheckBox("Popup_CheckboxLockAllowance") @Proestimator.Resources.ProStrings.LockedCheckbox
                </div>
                <div style="display:table-cell;font-size:small;">
                    @Html.CheckBox("Popup_CheckBoxIncludeClearcoat") @Proestimator.Resources.ProStrings.Include
                    <br />
                    @Html.CheckBox("Popup_CheckBoxLockClearcoat") @Proestimator.Resources.ProStrings.LockedCheckbox
                </div>
                <div style="display:table-cell;font-size:small;">
                    @Html.CheckBox("Popup_CheckBoxIncludeBlend") @Proestimator.Resources.ProStrings.Include
                    <br />
                    @Html.CheckBox("Popup_CheckboxLockBlend") @Proestimator.Resources.ProStrings.LockedCheckbox
                </div>
                <div style="display:table-cell;font-size:small;">
                    @Html.CheckBox("Popup_CheckBoxIncludeEdging") @Proestimator.Resources.ProStrings.Include
                    <br />
                    @Html.CheckBox("Popup_CheckboxLockEdging") @Proestimator.Resources.ProStrings.LockedCheckbox
                </div>
                <div style="display:table-cell;font-size:small;">
                    @Html.CheckBox("Popup_CheckBoxIncludeUnderside") @Proestimator.Resources.ProStrings.Include
                    <br />
                    @Html.CheckBox("Popup_CheckboxLockUnderside") @Proestimator.Resources.ProStrings.LockedCheckbox
                </div>
            </div>
        </div>
        <div style="display:table-row;">
            <div style="display:table-cell;column-span:all;font-size:small;">
                <label id="LabelLockingNote">@Proestimator.Resources.ProStrings.Graphical_LockMessage</label>
            </div>
        </div>
    </div>

    @* Details for when clicking "Edit" on the Parts & Labor popup next to an item that is already in the estimate. *@
    <div id="LaborOptionsPopup" class="popup-panel">
        <font size="+1">
            <label id="LabelLaborOptions">Labor Options:</label>
        </font><br>
        <div style="display:table-cell;">
            <div style="display:table-row;">
                <div style="display: table-cell;padding-left: 5px;background:#8C96A5;font-size:x-small;">
                    <label id="LabelLaborType">@Proestimator.Resources.ProStrings.LaborType</label>
                </div>
                <div style="display: table-cell;padding-left: 5px;background:#8C96A5;font-size:x-small;">
                    <label id="LabelLaborTime">@Proestimator.Resources.ProStrings.LaborTime @Proestimator.Resources.ProStrings.HoursAbreviation</label>
                </div>
                <div style="display: table-cell;padding-left: 5px;background:#8C96A5;font-size:x-small;">
                    <label id="LabelOtherCharge">@Proestimator.Resources.ProStrings.OtherCharges ($)</label>
                </div>
                <div style="display: table-cell;padding-left: 5px;background:#8C96A5;font-size:x-small;">
                    <label id="LabelOtherType">@Proestimator.Resources.ProStrings.OtherType</label>
                </div>
                <div style="display: table-cell;padding-left: 5px;background:#8C96A5;font-size:x-small;">
                    <label id="LabelBettermentPercetage">@Proestimator.Resources.ProStrings.BettermentPercent</label>
                </div>
            </div>
            <div style="display:table-row;">
                <div style="display: table-cell;padding-left: 5px;font-size:medium;">
                    @{

                        List<SimpleListItem> laborList = new List<ProEstimatorData.Models.SubModel.SimpleListItem>();
                        laborList.Add(new SimpleListItem("", "-1"));
                        laborList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Body, "1"));
                        laborList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Frame, "2"));
                        laborList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Structure, "3"));
                        laborList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Mechanical, "4"));
                        laborList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Electrical, "24"));
                        laborList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Glass, "25"));
                        laborList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Detail, "5"));
                        laborList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Cleanup, "6"));
                        laborList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Other, "8"));
                    }
                    @Html.DropDownList("Popup_DropDownListLaborType", new SelectList(laborList, "Value", "Text"))
                </div>
                <div style="display: table-cell;padding-left: 5px;font-size:medium;">
                    @Html.TextBox("Popup_TextBoxLaborTime", "", new { style = " width:88px;" })@*Hrs.*@
                </div>
                <div style="display: table-cell;padding-left: 5px;font-size:medium;">
                    @*$*@  @Html.TextBox("Popup_TextBoxOtherCharge", "", new { style = "" })
                </div>
                <div style="display: table-cell;padding-left: 5px;font-size:medium;">
                    @{

                        List<SimpleListItem> otherList = new List<ProEstimatorData.Models.SubModel.SimpleListItem>();
                        otherList.Add(new SimpleListItem("", ""));
                        otherList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Nontaxed, "13"));
                        otherList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Taxed, "14"));
                        otherList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Sublet, "15"));
                        otherList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Towing, "30"));
                        otherList.Add(new SimpleListItem(Proestimator.Resources.ProStrings.Storage, "31"));
                    }
                    @Html.DropDownList("Popup_DropDownListOther", new SelectList(otherList, "Value", "Text"))
                </div>
                <div style="display: table-cell;padding-left: 5px;font-size:medium;">
                    @Html.TextBox("Popup_TextboxBettermentPercentage", "", new { style = "width: 88px;" })  @*%*@
                </div>
            </div>
        </div>
    </div>

    @* The OK and Cancel button for editing the details on a Parts & Labor popup *@
    <div id="OkCancelPopup" class="popup-panel">
        <div class="popup-panel-buttons-container">
            <input onclick="javascript: OkEdit()" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.Button_OK">
            <input onclick="javascript: CancelEdit()" type="button" class="button do-not-disable" value="@Proestimator.Resources.ProStrings.Button_Cancel">
        </div>
    </div>

    <div id="dialog" title="Parts Now" style="display:none;">
        <p>Your Parts Now enrollment has been initiated. Please check your email for user access credentials.</p>
    </div>
    <div id="loading" title="Parts Now" style="display:none;">
        <p>Please wait...</p>
    </div>
</div>

@section scripts{
    <style type="text/css">
        .web_dialog_overlay {
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            height: 100%;
            width: 100%;
            clear: both;
            width: 100%;
            margin: 0;
            background: rgba(0, 0, 0, 0.9);
            padding: 0;
            /*background-color:black;*/
            /*opacity: 0.9;*/
            /*filter: alpha(opacity=15);*/
            -moz-opacity: 1;
            z-index: 101;
            display: none;
        }

        .web_dialog {
            display: none;
            position: fixed;
            width: 70%;
            top: 10%;
            left: 5%;
            /*margin-left: 90px;
            margin-top: 42px;*/
            /*background-color: #ffffff;*/
            /*border: 2px solid #336699;*/
            padding: 0px;
            z-index: 102;
            font-family: Verdana;
            font-size: 10pt;
            opacity: 1;
        }

        .web_dialog_title {
            text-align: center;
            border-bottom: solid 2px #336699;
            background-color: #336699;
            width: 100%;
            padding: 4px;
            color: White;
            height: 40px;
            font-size: 20px;
            font-weight: bold;
        }

            .web_dialog_title a {
                color: White;
                text-decoration: none;
            }

        .align_right {
            text-align: right;
        }

        #content-area {
            right: 0;
            bottom: 0;
            width: auto;
        }

        .detailsTable {
            float: left;
        }

            .detailsTable tr {
                height: 35px;
            }

        .radio-button {
            margin: 10px;
            float: left;
        }

        :checked + span {
            background-color: #1d69a6;
            color: white;
            border: 1px solid #1d69a6;
            border-bottom-color: white;
            padding: 6px;
            border-radius: 5px;
        }
    </style>

    <script type="text/javascript">
    var RightButton = false;
    var hiddenParts = true, hiddenSectionParts = true, hiddenOverlap = true, hiddenPaint = true, EnteredPrice;
    var hiddenRepair = true, hiddenNonOem = true, LaborHasFocus = false;
    var hiddenLaborOptions = true, LaborRates;
    var _nonOemSource = '', NonOemPrice, _nonOemSourceID, _nonOemSourceCID, _nonOemSourcePartNumber;
    var _rateProfile;
    var _currentPartIndex = -1;
    var _lastLineItemID = 0;

    var ClearcoatTime;

    var HeaderAction = "Replace";
    var HeaderPartSource = "OEM";

    var _cachedImageData;
    var _cachedImageDataLoaded = false;
    var _partsPopulated = false;

    var _partList = Array();

    var _supplement = @Model.Supplement;

    var _isAddingPart = false;
    var _partDescription = '';

    var _partsNowLoadingDialog;

    function BeforeRedirect() {
        if ($(".matrix-wrapper").is(":visible")) {
            SavePDR(false);
        }
        if ($(".pdr-mobile-details").is(":visible")) {
            $("#detailsPopupSave").click();
        }
    }

    function launchPartsNowPortal() {
        $.ajax({
            //url: '/api/getPartsNow',
            url: '/api/PartsNowApi/GetPartsNow?estimateID=' + estimateID,
            type: "POST",
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ 'id': 1 }),
            beforeSend: function () {
                _partsNowLoadingDialog.html("<p>Please Wait...</p>");
                _partsNowLoadingDialog.dialog('open');
            },
            success: function (result) {
                _partsNowLoadingDialog.dialog('close');
                console.log(result);
                if (result.Enrollment) {
                    $("#dialog").dialog({
                        close: function (event, ui) { window.open(result.Uri, "Parts Now"); }
                    });
                } else {
                    window.open(result.Uri, "Parts Now");
                }
            },
            error: function (error) {
                _partsNowLoadingDialog.dialog('close');
                console.log("error");
                console.log(error);
            }
        });
    }

    // Called when the section drop down changes.
    function LoadSectionData() {
        $("#mapContainer").empty();
        $("#MakeSelectionLabel").hide();

        showHideImageDropDown(false);

        // Set the loading image
        var imageContainer = $('#imgContainer');

        var groupNumber = '';
        @if (ViewBag.UseLegacyPartsSectionDropdown) {
            <text>
        groupNumber = $("#sectionSelect").val();
            </text>
        }
        else {
            <text>
        groupNumber = selectedNodeIdValue;
            </text>
        }
        if (groupNumber == -2)  // AC Refrigerant
        {
            imageContainer.empty();
        }
        else if (groupNumber == -3)
        {
            window.open("https://static.mymitchell.com/static/Webhelp/ppages/ceg/1033/index.htm", "Mitchell P Pages");
        }
        else
        {
            var image = '<img src="/Content/images/loader.gif" style="width:100%; height:100%; opacity:.3;"/>';
            imageContainer.html(image);
        }

        // Get images and part info for the selected section.
        // When both of these finish they call LoadCachedImage, which only executes after both have finished.  Otherwise the image can show but be
        // non functioning due to the PartInfoCache still being updated.
        _cachedImageDataLoaded = false;
        _partsPopulated = false;
        _currentImageIndex = 0;

        CacheImageData();
        RefreshPartInfoCache();
    }

     function GetSectionsListTreeControl()
     {
            var sectionsListTreeControl = null;

            @if (!@ViewBag.UseLegacyPartsSectionDropdown)
            {
                if(ViewBag.IsMobileDevice)
                {
                    <text>
         var sectionsListTreeControl = $("#sectionslistdropdowntree").data("kendoDropDownTree");

                    </text>
                }
                else
                {
                    <text>
         var sectionsListTreeControl = $("#sectionslisttreeview").data("kendoTreeView");
                    </text>
                }
            }

         return sectionsListTreeControl;
     }

    function showHideImageDropDown(show) {
        var displayCss = show ? "block" : "none";
        $("#imgDropdownMainContainer").css('display', displayCss);

        //if (show === true)
        //{
        //    $("#mapContainer").css("margin-top", "20px");
        //}
        //else{
        //    $("#mapContainer").css("margin-top", "0px");
        //}
    }

    // Cache the image data and hotspots for the selected group
    var totalImageHotSpots = 0;
    function CacheImageData() {
        var groupNumber = '';
        @if (ViewBag.UseLegacyPartsSectionDropdown) {
            <text>
                var groupNumber = $("#sectionSelect").val();
            </text>
        }
        else {
            <text>
                var groupNumber = selectedNodeIdValue;
            </text>
        }

        var vehicleID = $('#VID').val();

        if (groupNumber != -2)  // -2 is AC Refrigerant
        {
            $.getJSON("@Url.Action("GetImagesAndHotspots", "Estimate")", { UserID: @ViewBag.UserID, VehicleID: vehicleID, GroupNumber: groupNumber }, function (data) {
                _cachedImageData = data;
                $("#vehicleimg").show();

                var drop = $('#imgDropdown');
                drop.empty();
                totalImageHotSpots = 0;
                $(data).each(function (index, ImageHotSpot) {
                    drop.append('<li class="table-button" style="cursor: pointer;margin-right:5px;" onclick="DisplayImage('+ (parseInt(index) + parseInt(1)) + ')">' + (parseInt(index) + parseInt(1)) + '</li>');
                    totalImageHotSpots = totalImageHotSpots  + 1;
                });
                if (data.length > 1) {
                    showHideImageDropDown(true);
                }

                _cachedImageDataLoaded = true;
                LoadCachedImage(0);
            });
        }
    }

    // Using Ajax, get all data for all parts for the selected group and cache them
     function RefreshPartInfoCache() {
         var GroupNumber = '';
        @if (ViewBag.UseLegacyPartsSectionDropdown) {
            <text>
                GroupNumber = $("#sectionSelect").val();
            </text>
        }
        else {
            <text>
                GroupNumber = selectedNodeIdValue;
            </text>
        }

        _partsPopulated = false;

        // Get Part Info for Hotspots for the selected Section SectionKey/Group Number
        $.getJSON("@Url.Action("GetPartInfo", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID, sectionKey: GroupNumber, allYears: $("#checkShowAllYears").is(":checked") }, function (data)
        {
            if( Object.prototype.toString.call(data) == "[object String]" && data.startsWith("NOTE:"))
            {
                $("#imgContainer").empty();
                $('#imgContainer').html("<p style='font-weight: bold; padding: 5px;'>" + data.replace("NOTE:", "") + "</p>");
            }
            else
            {
                ShowProgressMessage(data.ErrorMessage, 3000);
                _partList = new Array(data.Parts.length);

                $.each(data.Parts, function (i, part) {
                    var partInfo = {
                        ActionPart: part.Action || "",
                        ActionTime: part.LaborTime || -1,
                        RepairID: part.RepairID || -1,
                        PartID: part.ExName || "",
                        PartNumber: part.PartNumber || "",
                        Description: part.Description || "",
                        Comment: part.comment || "",
                        Price: part.Price || 0,
                        EnteredPrice: part.Price || "",
                        Qty: 1,
                        QtyOrd: part.QtyOrdered || 0,
                        ID: part.ID || -1,
                        LaborRRTime: part.RRTime || 0,
                        LaborOHTime: part.OHTime || 0,
                        LaborAddTime: part.AddTime || 0,
                        LaborAITime: part.AITime || 0,
                        LaborCATime: part.Action || "",
                        LaborAlignTime: part.CATime || part.AlignTime || 0,
                        LaborRITime: part.RITime || 0,
                        LaborRefinishTime: part.PaintTime || 0,
                        LaborNames: part.LaborName || "",
                        LaborNameID: part.LaborNameID || -1,
                        PaintNames: part.PaintName || "",
                        Side: part.VehiclePosition || "",
                        AdjInfo: -1,
                        BarCode: part.Barcode || "",
                        LaborPaintType: part.LaborPaintType || 0,
                        LaborPaintTime: part.LaborPaintTime || 0,
                        LaborLaborType: part.LaborMainType || 0,
                        Notes: part.Notes || "",
                        LaborTimeBlend: part.LaborTimeBlend || 0
                    }

                    if (partInfo.Side.length > 0) {
                        partInfo.Side = partInfo.Side.substring(0, 1);
                    }

                    _partList[i] = partInfo;

                });

                _partsPopulated = true;
                LoadCachedImage(_currentImageIndex);

                // If the parts and labor window is open, refresh it
                if ($("#PartsAndLaborContainer").is(":visible"))
                {
                    showPartsAndLabor();
                }
            }
        });
    }

    var _currentImageIndex = -1;

    // Images are saved to _cachedImageData in CacheImageData().  Load the image with the passed index and set up all of the click areas.
    function LoadCachedImage(index) {
        if (_cachedImageDataLoaded == false || _partsPopulated == false) {
            return;
        }

        _currentImageIndex = index;

        if (_cachedImageData[index].image.GraphicFileName != null && _cachedImageData[index].image.GraphicFileName != "No Image")
        {
            var image = '<img src="data:image/gif;base64,' + _cachedImageData[index].Base64Img + '" usemap="#imageMap" align="left" border="1px" width="100%" ondragstart="return false;"/>';
            $('#imgContainer').html(image);

            var image = '<img id="printImg" src="data:image/gif;base64,' + _cachedImageData[index].Base64Img + '" usemap="#imageMap" align="left" border="1px" width="100%" ondragstart="return false;"/>';
            $('#printImgContainer').html(image);

            RefreshImageLabels();
            $("#printImageContainer").show();


            @*@if (!ViewBag.IsMobileDevice)
            {
                <text>
                    if ($('#imgDropdownMainContainer').css('display') == 'none') {
                        $("#mitchellPages").css("margin-top", "0px");
                    }
                    else {
                        $("#mitchellPages").css("margin-top", "-25px");
                    }
                </text>
            }
            else
            {
                <text>
                    if ($('#imgDropdownMainContainer').css('display') == 'none') {
                        $("#printImageContainer").css("margin-top", "0px");
                    }
                    else {
                        $("#printImageContainer").css("margin-top", "-25px");
                    }
                </text>
            }*@
        }
        else
        {
            $("#printImageContainer").hide();
            var image = "";

            if (selectedNodeIdValue == "-1") {
                $("#MakeSelectionLabel").show();
                $("#imgContainer").empty();
            }
            else
            {
                image = '<img src="@Url.Content("~/Content/images/SorryNoImageAvailable.gif")" id="vehicleimg" usemap="#imageMap"/>';
                $('#imgContainer').html(image);
            }

            $("#mitchellPages").css("margin-top", "10px");
        }

        if(index ==0)
        {
            $( "#imgDropdown li" ).first().css( "font-weight", "bold" );
        }
    }

    function RefreshImageLabels()
    {
        if (_cachedImageData)
        {
            var mapContainer = $("#mapContainer");
            mapContainer.empty();

            var imageWidth = _cachedImageData[_currentImageIndex].ImageWidth;
            var imageHeight = _cachedImageData[_currentImageIndex].ImageHeight;

            $(_cachedImageData[_currentImageIndex].hotspot).each(function (i, spot) {
                var leftPercent = ((spot.X_Coordinate / imageWidth) * 100);
                var topPercent = ((spot.Y_Coordinate / imageHeight) * 100);
                var widthPercent = ((spot.X_Extent - spot.X_Coordinate) / imageWidth) * 100;
                var heightPercent = ((spot.Y_Extent - spot.Y_Coordinate) / imageHeight) * 100;

                var newDiv = "<div style='left: " + leftPercent + "%; top: " + topPercent + "%; width: " + widthPercent + "%; height: " + heightPercent + "%;' onmouseout='ClearPartInfoDisplay()' onmouseover='PartLabelMouseOver(" + spot.Callout_Number + ")' onclick='HandlePartLabelClicked(\"N" + spot.Callout_Number + "\", false)' oncontextmenu='HandlePartLabelClicked(\"N" + spot.Callout_Number + "\", true)' ></div>";
                mapContainer.append(newDiv);
            });
        }
    }

    // Load the passed part ID into the details form for editing.
    function EditLineItem(partID)
    {
        hideModal();
        $.getJSON('@Url.Action("EditME", "RateProfile")', { userID: @ViewBag.UserID, estimateID: @Model.EstimateID, lineID: partID, meMode: '@Model.ManualEntry.Details.MEMode' }, function (data) {
            loadDetails(data.detail, false);
        });
    }

    // Fires when an item on a multi-select popup is hovered
    function PartsTableHover(barcode)
    {
        var partIndex = GetPartIndexFromBarcode(barcode);

        if (partIndex > -1)
        {
            DisplayPartInfo(partIndex);
        }
    }

    function GetPartIndexFromBarcode(barcode)
    {
        barcode = barcode.replace(/^0+/, '');
        for (var i = 0; i < _partList.length; i++)
        {
            if (_partList[i].BarCode.replace(/^0+/, '') == barcode) {
                return i;
            }
        }

        return -1;
    }

    // Fires when an iatem on a multi-select popup is moused out
    function PartsTableMouseOut()
    {
        ClearPartInfoDisplay();
    }

    // A part can have multiple choices to select from.  This gets the part by the passed barcode then adds the part
    function MultiPartAddClick(barcode)
    {
        var partIndex = GetPartIndexFromBarcode(barcode);

        hide("MultiplePartsPopup");

        if (partIndex > -1) {
            AddPartByIndexAndHeaderSelections(partIndex, false);
        }
    }

    function LogShowPartsAndLabor()
    {
        $.getJSON('@Url.Action("CSBLogShowPartsAndLabor", "Estimate")', { userID: @ViewBag.UserID }, function (data) {
        });
    }

    function LogAddFromPartsAndLabor()
    {
        $.getJSON('@Url.Action("CSBLogAddFromPartsAndLabor", "Estimate")', { userID: @ViewBag.UserID }, function (data) {
        });
    }

    // Based on the header action, some things might need to happen before adding the part by index.
    function AddPartByIndexAndHeaderSelections(partIndex, graphics)
    {
        if (ShowDifferentSectionMessage(partIndex))
        {
            return;
        }

        if ((HeaderAction == 'Replace' || (HeaderAction == 'RI' && graphics == true)) && _partList[partIndex].ActionPart == "") {
            var _return = false;

            @if (@ViewBag.UseLegacyPartsSectionDropdown)
            {
                <text>
                    selectedNodeIdValue = $("#sectionSelect").val();
                </text>
            }

            $.ajax({
                url: '@Url.Action("GetAddedComponents", "Estimate")',
                type: "POST",
                async: false,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                @*data: JSON.stringify({ "estimateID":@Model.EstimateID, "allYears": $("#checkShowAllYears").is(":checked"), "sectionKey": $("#sectionSelect").val(), "index": partIndex }),*@
                data: JSON.stringify({ "estimateID":@Model.EstimateID, "allYears": $("#checkShowAllYears").is(":checked"), "sectionKey": selectedNodeIdValue, "index": partIndex }),
                success: function (result) {
                    if (result != "") {
                        if (HeaderAction == 'Replace') {
                            var text = result + "\nThe above component will be removed.\n\nDo you still want to continue?";
                            var response = confirm(text);
                            if (response == false) {
                                _return = true;
                            }
                        }
                        else {
                            var text = result + "\nYou will be removing the above component with this operation.\n\nCancel to keep the above component, then select R&I from the Parts & Labor window.";
                            var response = confirm(text);
                            if (response == true) {
                                _return = true;
                            }
                        }
                    }
                }
            });
            if (_return) {
                return;
            }
        }

        EnteredPrice = _partList[partIndex].Price;

        if (HeaderAction == 'Replace')
        {
            if (HeaderPartSource == "" || HeaderPartSource == "After")
            {
                SetupNonOem(partIndex);
            }
            else if (HeaderPartSource == "LKQ" || HeaderPartSource == "Reman")
            {
                GetEnteredPrice(partIndex);
                AddPartByIndex(partIndex);
            }
            else
            {
                AddPartByIndex(partIndex);
            }
        }
        else
        {
            AddPartByIndex(partIndex);
        }
    }

    function SetupNonOem(partIndex)
    {
        if (ShowDifferentSectionMessage(partIndex))
        {
            return;
        }

        if (_partList[partIndex].PartNumber == "ORDER FROM DEALER")
        {
            ShowUserMessage('@Proestimator.Resources.ProStrings.Graphical_NoVendorsFound', true, 4000);
        }
        else
        {
            _currentPartIndex = partIndex;

            $('#NonOemTable').html('<BR><span class="Title">...@Proestimator.Resources.ProStrings.Graphical_VendorInfoLoading...</span><BR>');
            ShowPopup('NonOemPopup');

            $.getJSON('@Url.Action("PopulatePartSource", "Estimate")', { userID: @ViewBag.UserID, partNumber: _partList[partIndex].PartNumber, currentPart: partIndex }, function (data) {
                callbackUpdateNonOem(data, partIndex);
            });
        }
    }

    function callbackUpdateNonOem(result, currentPart)
    {
        console.debug("callbackUpdateNonOem");

        var resultSplit = result.split(String.fromCharCode(9));
        if (resultSplit[0] != '')
        {
            $('#NonOemTable').html(resultSplit[0]);
        }
        else
        {
            $('#NonOemTable').html('<BR><BR>@Proestimator.Resources.ProStrings.Graphical_NoVendorsFound<BR><BR>');
        }

        RefreshPartInfoCache();
    }

    function toggleItemDetails(id)
    {
        $("div[id^='detail']").hide();
        $("#detail-" + id).show();
    }

    function SelectNonOem(SourcePartNumber, SelectedIndex, currentPart, Price, CID)
    {
        console.debug("SelectNonOem");
        _nonOemSourcePartNumber = SourcePartNumber;
        _nonOemSourceCID = CID;
        NonOemPrice = Price;
        hide('NonOemPopup');
        AddPartByIndex(currentPart);
    }

    function GetEnteredPrice(partIndex)
    {
        console.debug("GetEnteredPrice");
        var price;

        if (_partList[partIndex].ID > 0)
        {
            price = _partList[partIndex].EnteredPrice;
            if (price == undefined)
            {
                price = _partList[partIndex].Price;
            }
        }
        else
        {
            price = _partList[partIndex].Price;
        }

        price = prompt("@Proestimator.Resources.ProStrings.Graphical_EnterPrice", price);
        EnteredPrice = price;
        _partList[partIndex].EnteredPrice = price;
    }

    function ShowDifferentSectionMessage(partIndex)
    {
        if (_partList[partIndex].PartNumber == '' && (_partList[partIndex].Comment.indexOf('-see ') > 0 || _partList[partIndex].Comment.indexOf('-See ') > 0))
        {
            alert(_partList[partIndex].Comment);
            return true;
        }

        return false;
    }

    function addLabor(index)
    {
        if (ShowDifferentSectionMessage(index))
        {
            return;
        }

        if (_partList[index].ID != -1)
        {
            removeLabor(index);
        }
        else
        {
            PaintType = $("#HeaderPaintType").val();

            if (PaintType  == 1) {
                ClearcoatTime = 0;
            }

            var includeClearcoat = false;
            var tempNote = _partList[index].Notes;
            tempNote = tempNote.toLowerCase();

            if (PaintType > 1)
            {
                if (tempNote.indexOf('clear coat') > 0 || tempNote.indexOf('clearcoat') > 0 || _partList[index].PaintNames == 'Clearcoat')
                {
                    ClearcoatTime = _partList[index].LaborRefinishTime * (_rateProfile.MajorClearCoat / 100);
                    includeClearcoat = true;
                }
                else
                {
                    ClearcoatTime = 0;
                }
            }

            hide('Parts');

            // Calculate the labor allowance, needed for 2 tone and 3 stage
            var toneStageMult = 0;
            var allowance = 0;

            var panelType = $("#DropDownListOverlap").val();

            if (!panelType)
            {
                panelType = "";
            }

            if ($(".panel-type-wrapper").is(":visible") == false)
            {
                panelType = "";
            }

            // 2 tone
            if (PaintType == 29)
            {
                toneStageMult = paintGain_2ToneMajor;

                if (panelType == "NonAdjacent")
                {
                    toneStageMult = paintGain_2ToneNonAdjacent;
                }
            }
                // or 3 stage
            else if (PaintType == 18)
            {
                toneStageMult = paintGain_3StageMajor;

                if (panelType == "NonAdjacent")
                {
                    toneStageMult = paintGain_3StageNonAdjacent;
                }
            }

            if (PaintType == 18 || PaintType == 29)
            {
                includeClearcoat = false;
                ClearcoatTime = 0;
            }

            allowance = parseFloat((_partList[index].LaborRefinishTime * toneStageMult).toFixed(2));

            ShowProgressMessage("@Proestimator.Resources.ProStrings.Graphical_AddingPart " + _partList[index].Description + "...", 3000);

            console.debug('addLabor calling AddLabor');
            if (_isAddingPart === false) {
                @if (ViewBag.UseLegacyPartsSectionDropdown)
                {
                    <text>
                        selectedNodeIdValue = $("#sectionSelect").val();
                    </text>
                }
                console.debug("--------addLabor setting isAddingPart to True----------");
                _isAddingPart = true;

                $.getJSON('@Url.Action("AddLabor", "Estimate")', {
                     userID: @ViewBag.UserID
                   , estimateID: @Model.EstimateID
                   , allYears: $("#checkShowAllYears").is(":checked")
                   , meMode: '@Model.ManualEntry.List.MEMode'
                    /*, sectionKey: $("#sectionSelect").val()*/
                    , sectionKey: selectedNodeIdValue
                   , index: index
                   , qty: 0
                   , paintType: PaintType
                   , allowance: allowance
                   , blendTime: 0
                   , edgingTime: 0
                   , undersideTime: 0
                   , adjacentDeductionType: 0
                   , lockAllowance: false
                   , lockClearcoat: false
                   , lockBlend: false
                   , lockEdging: false
                   , lockUnderside: false
                   , lockAdjacentDeduction: false
                   , includeAllowance: false
                   , includeClearcoat: includeClearcoat
                   , includeBlend: false
                   , includeEdging: false
                   , includeUnderside: false
                   , mode: "AddLabor"
                   , includeRIFlag: false
                   , rrTime: 0
                   , repairID: _partList[index].RepairID
                   , price: 0
                   , vehiclePosition: _partList[index].Side
                   , defaultSide: GetRightLeft()
                   , partSource: ""
                   , vendorPartNumber: ""
                   , vendorID: 0
                   , clearcoatTime: ClearcoatTime
                }, function (data) {
                    _isAddingPart = false;

                    LoadEstimateLineItemList();

                    console.debug('addlabor success');
                    console.log(data);
                    if (data.Success == false) {
                        ShowProgressMessage(data.ErrorMessage, 8000);

                        console.debug("--------addLabor Error setting isAddingPart to False----------");
                    } else {
                        callbackUpdateLabor(data);
                    }
                });
            }
        }
    }

    function ShowProgressMessage(message, durration)
    {
        var randomString = MakeRandomString(8);
        var newP = "<p class='" + randomString + "'>" + message + "</p>"

        $(".adding-parts-message").append(newP);

        window.setTimeout(function () {
            $("." + randomString).remove();
        }, durration);
    }

    function callbackUpdateLabor(result)
    {
        console.log(result);

        if (result.Success == true) {
            ShowProgressMessage("@Proestimator.Resources.ProStrings.Graphical_PartAdded", 3000);

            console.debug("current part: " + result.CurrentPartIndex);

            Temp = $('#Add' + _partList[result.CurrentPartIndex].BarCode);
            TempR = $('#Remove' + _partList[result.CurrentPartIndex].BarCode);

            if (Temp != undefined && Temp != 'null')
            {
                if (result.NewID == -1)
                {
                    Temp.val('Add');
                    if (TempR != undefined && TempR != 'null')
                    {
                        TempR.prop('disabled', true);
                    }
                }
                else
                {
                    Temp.val('Remove');
                    if (TempR != undefined && TempR != 'null')
                    {
                        TempR.prop('disabled', false);
                    }
                }
            }

            LoadEstimateLineItemList();
            RefreshHeaderInfo(@Model.EstimateID);
            checkForOverlaps();
            RefreshPartInfoCache();
            BlankPaintLayer();

            //console.log()
        }

        else  {
            ShowProgressMessage(result.ErrorMessage, 10000);
        }
    }

    function clearAutoPaintSelection()
    {
        console.debug("Clearing Auto Paint Selection");
        $("#DropDownListAutoPaint option:first").attr('selected','selected');
    }

    function checkForOverlaps()
    {
        if (HeaderAction == "Replace" || HeaderAction == "RI")
        {
            ShowProgressMessage("@Proestimator.Resources.ProStrings.Graphical_OverlapSearching...", 3000);

            $.getJSON("@Url.Action("PopulateOverlapChanges", "Estimate")", {userID: @ViewBag.UserID, estimateID: @Model.EstimateID }, function (data) {
                callbackOverlaps(data);
                clearAutoPaintSelection();
            });
        }
        else
        {
            clearAutoPaintSelection();
            ShowAddOns();
        }
    }

    function callbackOverlaps(result)
    {
        if (result == 'AUTO_ACCEPT_ALL_OVERLAPS')
        {
            $.getJSON("@Url.Action("AcceptAllOverlaps", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID }, function (data) {
                callbackAcceptAllOverlaps(data);
                clearAutoPaintSelection();
            });
        }
        else if (result != '')
        {
            ShowProgressMessage("@Proestimator.Resources.ProStrings.Graphical_OverlapComplete", 3000);

            $("#OverlapTable").html(result);
            ShowPopup("OverlapPopup");
        }
        else
        {
            ShowProgressMessage("@Proestimator.Resources.ProStrings.Graphical_OverlapNone", 3000);
            console.debug('no overlap');

            ShowAddOns();
        }
    }

    var _overlapData;
    var _addOnsShown = false;
    var _addOnsData;

    // If there Add On details returned from adding a line they are shown imediately, while overlaps are searched for.  WHen overlaps are found, they are shown, replacing the add on popup.
    // Instead of calling the overlap popup directly, we cache the data and check to see if the add on popup is not shown.  This has to be called again when the add on popup is closed
    // to see if there are overlap data waiting to be shown.
    function ShowAddOns()
    {
        if (_addOnsShown === false)
        {
            $("#AddOnNoneSelected").hide();

            var grid = $("#add-ons-grid").data("kendoGrid");

            if (_addOnsData) {
                grid.dataSource.data(_addOnsData);
                _addOnsData = null;

                ShowPopup("AddOnPopup");

                _addOnsShown = true;
            }
            else {
                grid.dataSource.data([]);
            }
        }
    }

    function HideAddOnPopup()
    {
        if (_addOnsShown === true) {
            hide("AddOnPopup");
            _addOnsShown = false;
        }
    }

    function DisableOverlapPrompting()
    {
        $.getJSON("@Url.Action("DisableOverlapPrompting", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID }, function (data) {
            callbackDisableOverlapPrompting(data);
        });
    }

    function AcceptAllOverlaps()
    {
        hide("OverlapPopup");

        $.getJSON("@Url.Action("AcceptAllOverlaps", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID }, function (data) {
            callbackAcceptAllOverlaps(data);
            clearAutoPaintSelection();
        });
    }

    function RejectAllClicked()
    {
        hide("OverlapPopup");

        $.getJSON("@Url.Action("RejectAllOverlaps", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID }, function (data) {
            ShowAddOns();
        });
    }

    function AcceptCheckedOverlaps()
    {
        var AcceptList = '';
        for (var i = 1; i < 1000; i++) { //Build list of accepted overlaps
            if ($('#AcceptID' + i).length) {
                if ($('#Accept' + i).prop('checked')) {
                    AcceptList = AcceptList + $('#AcceptID' + i).val() + ',';
                }
            }
            else {
                i = 1000;
            }
        }

        hide("OverlapPopup");

        if (AcceptList != '') {
            $.getJSON("@Url.Action("AcceptCheckedOverlaps", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID, AcceptList: AcceptList }, function (data) {
                callbackAcceptCheckedOverlaps(data);
            });
        }
    }

    function callbackDisableOverlapPrompting(result) { }

    function callbackAcceptAllOverlaps(result)
    {
        if (result == '')
        {
            ShowProgressMessage('@Proestimator.Resources.ProStrings.Graphical_OverlapsAcceptedProgress', 3000);
        }
        else
        {
            ShowProgressMessage(result, 3000);
        }

        LoadEstimateLineItemList();
        RefreshHeaderInfo(@Model.EstimateID);
        ShowAddOns();
    }

    function callbackAcceptCheckedOverlaps(result)
    {
        if (result == '')
        {
            ShowProgressMessage('@Proestimator.Resources.ProStrings.Graphical_OverlapsCheckedAccepted', 3000);
        }
        else
        {
            ShowProgressMessage(result, 3000);
        }

        LoadEstimateLineItemList();
        RefreshHeaderInfo(@Model.EstimateID);

        ShowAddOns();
    }

    function removeLabor(index)
    {
        console.debug("***Remove Labor called***")
        var okToDelete;

        if (_partList[index].RepairID > 0)
        {
            okToDelete = confirm('@Proestimator.Resources.ProStrings.Graphical_Confirm_DeleteRI')
        }
        else
        {
            okToDelete = confirm('@Proestimator.Resources.ProStrings.Graphical_Confirm_Delete')
        }

        if (okToDelete)
        {
            console.debug('***removeLabor calling AddLabor***');
            $.getJSON("@Url.Action("AddLabor", "Estimate")", { LaborInfo: laborinfo, PartInfo: partInfo, Description: _partList[index].Description }, function (data) {
                callbackUpdateLabor(data);
            });
        }
    }

    function AddPartByIndex(partIndex)
    {

        if (_partList[partIndex].PartNumber == '')
        {
            //Adding a labor only item
            laborType = _partList[partIndex].LaborNameID;
            LaborName = _partList[partIndex].LaborNames;

            Section = 0;
            if (laborType < 0) {
                laborType = 1;
            }

            Me = $('#Add' + _partList[partIndex].BarCode);
            //addLabor(Section, _partList[partIndex].Description, 0, laborType, LaborName, _partList[partIndex].BarCode, partIndex, Me);
            addLabor(partIndex);
            return;
        }

        var NeedMoreInfo = false;
        if (_partList[partIndex].PartNumber == '')
        {
            alert(_partList[partIndex].Description);
            return;
        }

        var oldAction = _partList[partIndex].ActionPart;

        $('#Popup_DropDownListLaborType').val(_partList[partIndex].LaborNameID);
        if (_partList[partIndex].LaborPaintType > 0)
        {
            console.debug("Setting to _partList.LaborPaintType: " + _partList[partIndex].LaborPaintType);
            $('#Popup_DropDownListPaintType').val(_partList[partIndex].LaborPaintType);
        }
        else
        {
            console.debug("Setting to HeaderPaintType: " + $('#HeaderPaintType').val());
            $('#Popup_DropDownListPaintType').val($('#HeaderPaintType').val());
        }

        if (_partList[partIndex].LaborPaintTime > 0)
        {
            $('#Popup_TextBoxPaintTime').val(_partList.LaborPaintTime);
        }
        else
        {
            $('#Popup_TextBoxPaintTime').val(_partList[partIndex].LaborRefinishTime);
        }

        if (HeaderAction == 'RI' && _partList[partIndex].RepairID > 0)
        {
            HeaderAction = 'Repair';
        }

        if (HeaderAction == 'RI')
        {
            if (_partList[partIndex].ActionPart == 'RI')
            {
                NeedMoreInfo = true;
                $('#Popup_TextBoxLaborTime').val(_partList[partIndex].ActionTime);
            }
            else
            {
                if (_partList[partIndex].LaborRITime > 0)
                {
                    $('#Popup_TextBoxLaborTime').val(_partList[partIndex].LaborRITime);
                }
                else
                {
                    if (_partList[partIndex].LaborRRTime > 0)
                    {
                        $('#Popup_TextBoxLaborTime').val(_partList[partIndex].LaborRRTime);
                    }
                    else {
                        $('#Popup_TextBoxLaborTime').val(0);
                    }
                }
            }
        }
        else if (HeaderAction == 'Replace')
        {
            if (_partList[partIndex].ActionPart == 'Replace')
            {
                NeedMoreInfo = true;
                $('#Popup_TextBoxLaborTime').val(_partList[partIndex].ActionTime);
            }
            else
            {
                if (_partList[partIndex].LaborRRTime > 0)
                {
                    $('#Popup_TextBoxLaborTime').val(_partList[partIndex].LaborRRTime);
                }
                else {
                    $('#Popup_TextBoxLaborTime').val(0);
                }
            }
        }
        else if (HeaderAction == 'Blend')
        {
            if (_partList[partIndex].LaborTimeBlend > 0)
            {
                $('#Popup_TextBoxLaborTime').val(_partList[partIndex].LaborTimeBlend);
            }
            else
            {
                var blendAmount = _rateProfile.Blend;
                PaintType = $("#Popup_DropDownListPaintType").val();

                if (PaintType == 18 || PaintType == 29)
                {
                    blendAmount = _rateProfile.ThreeTwoBlend;
                }

                console.debug("Paint Type: " + PaintType + "  Blend Amount: " + blendAmount);
                var blendTime = Math.round(_partList[partIndex].LaborRefinishTime * (blendAmount / 100) * 10) / 10;
                $('#Popup_TextboxBlendTime').val(blendTime);
            }

            $('#Popup_CheckboxLockBlend').prop('checked', true);
            $('#Popup_TextBoxPaintTime').val(0);
        }

        $('#CheckBoxIncludeRI').prop('checked', false);

        if (oldAction == _partList[partIndex].ActionPart)
        {
            NeedMoreInfo = true;
        }
        if (HeaderAction == 'Refinish')
        {
            $('#Popup_TextBoxLaborTime').val(0);
        }
        if (HeaderAction == 'Blend')
        {
            $('#Popup_TextBoxLaborTime').val(0);
        }
        if ($('#Popup_DropDownListLaborType').val() < 0)
        {
            $('#Popup_DropDownListLaborType').val(1);
        }
        if (HeaderAction != 'RI' && _partList[partIndex].PaintNames != '' && _partList[partIndex].LaborRefinishTime == 0)
        {
            NeedMoreInfo = true;
        }
        if (!NeedMoreInfo)
        {
            console.debug("AddPartByIndex calls ProcessAddToRefinish");
            ProcessAddToRefinish();
            AddThePart(0, partIndex);
        }
        else
        {
            partNumber = _partList[partIndex].PartNumber;

            if ($('#Popup_TextBoxLaborTime').val() < 0)
            {
                $('#Popup_TextBoxLaborTime').val(0);
            }

            var paintTime = 0;
            if ($('#Popup_TextBoxPaintTime').val() > 0)
            {
                paintTime = $('#Popup_TextBoxPaintTime').val();
            }
            else if (_partList[partIndex].LaborRefinishTime > 0)
            {
                paintTime = _partList[partIndex].LaborRefinishTime
            }

            LoadEditLayers($('#Popup_TextBoxLaborTime').val(), partIndex, paintTime);
        }
    }

    function ProcessAddToRefinish()
    {
        // process the "add to refinish" drop down, auto select any selected labor types
        var AutoPaintselectedValue = $("#DropDownListAutoPaint").val();
        console.debug("AutoPaintselectedValue: " + AutoPaintselectedValue);
        if ($('#HeaderPaintType option:selected').index() > 2)
        {
            $('#Popup_CheckBoxIncludeAllowance').prop('checked', true);
        }

        if (AutoPaintselectedValue.indexOf('B') >= 0)
        {
            $('#Popup_CheckBoxIncludeBlend').prop('checked', true);
        }

        if (AutoPaintselectedValue.indexOf('E') >= 0)
        {
            $('#Popup_CheckBoxIncludeEdging').prop('checked', true);
        }

        var sectionSelectArray = ["Hood", "Front Door \ Sheet Metal", "Rear Door \ Sheet Metal", "Liftgate \ Sheet Metal", "Side Door \ Sheet Metal Hinged Doors", "Side Door \ Sheet Metal Sliding Door", "Back Door \ Sheet Metal", "LUGGAGE LID"];
        var selectedChildandParentNodeMergeText = '';
        var containsSelectionSelect = false;

        @if (ViewBag.UseLegacyPartsSectionDropdown) {
            <text>
                containsSelectionSelect = (sectionSelectArray.indexOf($("#sectionSelect option:selected").text()) > -1);
            </text>
        }
        else {

            <text>

                selectedChildandParentNodeMergeText = selectedNodeText;

                if (selectedNodeText != selectedNodeParentNodeText) {
                    selectedChildandParentNodeMergeText = selectedNodeParentNodeText + " \ " + selectedNodeText;
                }
                for (var i = 0; i < sectionSelectArray.length; i++) {
                    if (selectedChildandParentNodeMergeText.toLowerCase() === sectionSelectArray[i].toLowerCase()) {
                        containsSelectionSelect = true;
                    }
                }
                //containsSelectionSelect = (sectionSelectArray.findIndex(item => selectedChildandParentNodeMergeText.toLowerCase() === item.toLowerCase()) > -1);
            </text>
        }

        if ((AutoPaintselectedValue.indexOf('U') >= 0) || (($("#repairTypeSelect").val() == 'Replace' || HeaderAction == 'Replace') &&
            containsSelectionSelect)) {
            $('#Popup_CheckBoxIncludeUnderside').prop('checked', true);
        }

        if ($('#HeaderPaintType option:selected').index() != 0 && $('#HeaderPaintType option:selected').index() != 2)
        {
            $('#Popup_CheckBoxIncludeClearcoat').prop('checked', true);
        }
    }

    function LoadEditLayers(laborTime, partIndex, paintTime)
    {
        console.debug("LoadEditLayers.  Action: " + HeaderAction + " LaborTime: " + laborTime + " partIndex: " + partIndex + " PaintTime: " + paintTime);
        if (paintTime == 0)
        {
            BlankPaintLayer();
        }

        if (HeaderAction != 'Repair')
        {
            SetupLaborWindow(laborTime, partIndex);

            if (paintTime > 0)
            {
                SetupPaintLayer(partIndex);

                if (HeaderAction == _partList[partIndex].ActionPart)
                {
                    ShowPopup('OkCancelPopup');
                }
            }
            else
            {
                if (HeaderAction == _partList[partIndex].ActionPart)
                {
                    ShowPopup('OkCancelPopup');
                }
            }

            if (HeaderAction != _partList[partIndex].ActionPart)
            {
                if ((HeaderAction == 'Replace' || HeaderAction == 'Refinish') && paintTime > 0 && _rateProfile.ManualPaintOverlap == 1)
                {
                    ShowPopup('OkCancelPopup');
                }
                else
                {
                    console.debug("LoadEditLayers A calls ProcessAddToRefinish");
                    ProcessAddToRefinish();
                    OkEdit();
                }
            }
        }
        else
        {
            SetupRepair(partIndex);

            if (paintTime > 0)
            {
                SetupPaintLayer(partIndex);
                ShowPopup('OkCancelPopup');
            }
            else
            {
                ShowPopup('OkCancelPopup')
            }
        }

        console.debug("LoadEditLayers B calls ProcessAddToRefinish");
        ProcessAddToRefinish();

        var qty;
        var desc = _partList[partIndex].Description;
        var re = /\(\d+\)/;
        var re2 = /\d+/;
        var descNumb = re.exec(desc);
        if (_partList[partIndex].QtyOrd > 0)
        {
            qty = _partList[partIndex].QtyOrd;
        }
        else
        {
            qty = _partList[partIndex].Qty;
        }
        if (desc.indexOf('/Side') > 0 || desc.indexOf('/ Side') > 0 || (re.test(desc) && re2.exec(descNumb) < 30))
        {
            _partList[partIndex].QtyOrd = prompt('@Proestimator.Resources.ProStrings.Graphical_EnterQuantity "' + desc + '"', qty);
            if (qty != undefined) {
                _partList[partIndex].QtyOrd = qty;
            }
        }
    }

    function SetupRepair(currentPart)
    {
        console.debug("SetupRepair");
        _currentPartIndex = currentPart;
        var maxVal;
        maxVal = _partList[currentPart].Price / LaborRates[_partList[currentPart].LaborNameID];
        maxVal = Math.round(maxVal * 10) / 10;
        $('#CheckBoxIncludeRI').prop('disabled', false);
        $('#TextBoxLaborRI').prop('disabled', false);
        if (_partList[currentPart].ActionPart == 'Repair') {
            $('#TextBoxLaborRI').val(_partList[currentPart].LaborRRTime);
            $('#CheckBoxIncludeRI').prop('checked', false);
        }
        else if (_partList[currentPart].RepairID > 0) {
            $('#CheckBoxIncludeRI').prop('checked', true);
            $('#TextBoxLaborRI').val(_partList[currentPart].ActionTime);
        }
        else {
            $('#TextBoxLaborRI').val(_partList[currentPart].LaborRRTime);
        }
        $('#LabelRepairTime').html('@Proestimator.Resources.ProStrings.Graphical_RepairTime ' + '<b>(0 - ' + maxVal + ')</b>');
        $('#LabelCalcInfo').html(maxVal + ' = Price(' + _partList[currentPart].Price + ') / Labor Rate(' + LaborRates[_partList[currentPart].LaborNameID] + ')');
        ShowPopup('RepairPopup');
        SetValueCalc(0);
    }

    function SetupPaintLayer(currentPart) {
        console.debug("SetupPaintLayer.  Action: " + HeaderAction + "  ActionPart: " + _partList[currentPart].ActionPart + "  CurrentPart: " + currentPart);
        _currentPartIndex = currentPart;
        if (HeaderAction == _partList[currentPart].ActionPart || HeaderAction == 'Repair' || HeaderAction == 'Replace' || HeaderAction == 'Refinish') {
            if ($('#HeaderPaintType').val() != "1")
            {
                ShowPopup('PaintPopup');
            }
        }

        // Clear out values in case the form has already been shown
        BlankPaintLayer();

        if (_partList[currentPart].LaborPaintType > 0 && _partList[currentPart].LaborPaintType != undefined) {
            $('#Popup_DropDownListPaintType').val(_partList[currentPart].LaborPaintType);
        }
        else {
            $('#Popup_DropDownListPaintType').val($('#HeaderPaintType').val());
        }

        if (_partList[currentPart].LaborPaintTime > 0 && _partList[currentPart].LaborPaintTime != undefined) {
            $('#Popup_TextBoxPaintTime').val(_partList[currentPart].LaborPaintTime);
        }
        else {
            $('#Popup_TextBoxPaintTime').val(_partList[currentPart].LaborRefinishTime);
        }

        if (HeaderAction == 'Blend') {
            $('#Popup_TextBoxPaintTime').val(0);
            $('#Popup_TextboxAllowanceTime').val(0);
            $('#Popup_TextboxClearcoatTime').val(0);

            var blendAmount = _rateProfile.Blend;
            var paintType = $("#Popup_DropDownListPaintType").val();

            if (paintType == 18 || paintType == 29)
            {
                blendAmount = _rateProfile.ThreeTwoBlend;
            }

            var blendTime = Math.round(_partList[currentPart].LaborRefinishTime * (blendAmount / 100) * 10) / 10;
            $('#Popup_TextboxBlendTime').val(blendTime);

            $('#Popup_TextboxEdgingTime').val(0);
            $('#Popup_TextboxUndersideTime').val(0);
            $('#Popup_CheckboxLockAllowance').prop('checked', false);
            $('#Popup_CheckBoxLockClearcoat').prop('checked', false);
            $('#Popup_CheckboxLockBlend').prop('checked', ($('#Popup_TextboxBlendTime').val() > 0));
            $('#Popup_CheckboxLockEdging').prop('checked', false);
            $('#Popup_CheckboxLockUnderside').prop('checked', false);
            $('#Popup_CheckBoxIncludeAllowance').prop('checked', false);
            $('#Popup_CheckBoxIncludeClearcoat').prop('checked', false);
            $('#Popup_CheckBoxIncludeBlend').prop('checked', ($('#Popup_TextboxBlendTime').val() > 0));
            $('#Popup_CheckBoxIncludeEdging').prop('checked', false);
            $('#Popup_CheckBoxIncludeUnderside').prop('checked', false);
        }
        else {
            if (HeaderAction != _partList[currentPart].ActionPart)
            {
                calculatePaintValues();
            }
            else
            {
                if (Number(_partList[currentPart].AdjInfo) != NaN) {
                    if (_partList[currentPart].AdjInfo == 1 || _partList[currentPart].AdjInfo == 2) {
                        nAdjInfo = Number(_partList[currentPart].AdjInfo) + 1
                    }
                    else {
                        nAdjInfo = 0
                    }
                }
                else {
                    nAdjInfo = 0
                }
                $('#Popup_DropDownListOverlap option:eq(' + nAdjInfo + ')').prop('selected', true);

                calculatePaintValues();
            }
        }

        // If 2 tone / 3 stage is selected, always set the include box to true
        if (HeaderAction == 'Refinish' || HeaderAction == 'Replace' || HeaderAction == 'Repair') {
            if ($('#HeaderPaintType option:selected').index() > 2) {
                $('#Popup_CheckBoxIncludeAllowance').prop('checked', true);
            }
        }

        console.debug('TextboxAllowanceTime: ' + $('#Popup_TextboxAllowanceTime').val());
    }

    function SetValueCalc(TheValue)
    {
        var s1 = TheValue.toString(), re = /^\s*/, FieldValue = s1.replace(re, '');
        $('#TextBoxLaborSlider').val(FieldValue);
    }

    function OkEdit()
    {
        if (HeaderAction == 'Repair')
        {
            $('#Popup_TextBoxLaborTime').val($('#TextBoxLaborSlider').val());
        }
        laborTime = $('#Popup_TextBoxLaborTime').val();

        AddThePart(laborTime, _currentPartIndex);
        hide("");
        hideMobileDetails(true);
        _partDescription = '';
    }

    function CancelEdit() {
        hide("");
        hideMobileDetails(true);
        RestoreScrollPosition();
        _partDescription = '';
    }

    function AddThePart(laborTime, currentPart) {

        var oldAction = _partList[currentPart].ActionPart;

        var partSource = HeaderPartSource;

        if ($('#Popup_DropDownListLaborType option:selected').index() >= 0) {
            laborType = $('#Popup_DropDownListLaborType').val();
        } else {
            laborType = 1;
        }

        paintTime = $('#Popup_TextBoxPaintTime').val();

        //if ($('#DropDownListPaintType option:selected').index() >= 0) {
        //    paintType = $('#DropDownListPaintType').val();
        //}
        //else {
        //    paintType = 16;
        //}

        //PaintType = $("#HeaderPaintType").val();
        PaintType = $("#Popup_DropDownListPaintType").val();

        if (HeaderAction == 'Replace') {
            price = EnteredPrice;
        } else {
            price = 0;
            _nonOemSourcePartNumber = '';
            partSource = "";
        }

        if (HeaderAction == 'RI') {
            paintTime = 0;
        }

        if (oldAction != '') {
            mode = 'Update';
        } else {
            mode = 'Add';
        }

        // If the part source is being changed on an existing item tell the user and let them cancel.
        if (mode == "Update" && _partList[currentPart].ActionPart != HeaderAction)
        {
            var response = confirm("The " + _partList[currentPart].ActionPart + " operation will be deleted and replaced with a " + HeaderAction + " operation.  To add additional operations to this existing part, use the Parts & Labor window.");
            if (response == false) {
                CancelEdit();
                return;
            }
        }

        ShowProgressMessage("@Proestimator.Resources.ProStrings.Graphical_AddingPart" + "...", 3000);

        if (_rateProfile.AllowDeductions) {
            nAdjInfo = $('#Popup_DropDownListOverlap option:selected').index();
        }
        else {
            nAdjInfo = 0
        }
        if (nAdjInfo > 0) {
            nAdjInfo = nAdjInfo - 1;
        }

        if ($(".panel-type-wrapper").is(":visible") == false)
        {
            nAdjInfo = -1;
        }

        var qty;
        var com = _partList[currentPart].Comment;
        var re = /\(\d+\)/;
        var re2 = /\d+/;
        var descNumb = re.exec(com);

        if (_partList[currentPart].QtyOrd > 0) {
            qty = _partList[currentPart].QtyOrd;
        }
        else {
            qty = _partList[currentPart].Qty;
        }

        if (com)
        {
            if (com.indexOf('/Side') > 0 || com.indexOf('/ Side') > 0 || (re.test(com) && re2.exec(descNumb) < 30)) {
                //console.log('com.indexor(side)');
                qty = prompt('@Proestimator.Resources.ProStrings.Graphical_EnterQuantity "' + _partList[currentPart].Description + '"', qty);
            }
        }

        if (qty != undefined) {
            if (_nonOemSourcePartNumber != '' && _nonOemSourcePartNumber != undefined) {
                price = NonOemPrice;
            }

            if (qty > 0) {
                var nonOemSourcePartNumber = _nonOemSourcePartNumber;
                var nonOemSourceCID = _nonOemSourceCID;

                if (!nonOemSourcePartNumber) {
                    nonOemSourcePartNumber = ''
                }

                if (!nonOemSourceCID) {
                    nonOemSourceCID = -1;
                }

                var allowanceTime = getFloat($('#Popup_TextboxAllowanceTime').val());
                var blendTime = getFloat($('#Popup_TextboxBlendTime').val());
                var edgingTime = getFloat($('#Popup_TextboxEdgingTime').val());
                var undersideTime = getFloat($('#Popup_TextboxUndersideTime').val());
                var clearcoatTime = getFloat($('#Popup_TextboxClearcoatTime').val());

                var lockClearcoatChecked = $('#Popup_CheckBoxLockClearcoat').prop('checked');
                var includeClearcoatChecked = $('#Popup_CheckBoxIncludeClearcoat').prop('checked');

                if (PaintType == 18 || PaintType == 29)
                {
                    lockClearcoatChecked = false;
                    includeClearcoatChecked = false;
                    clearcoatTime = 0;
                }

                console.debug('AddThePart calling AddLabor: ' + HeaderAction);

                if (_isAddingPart === false)
                {
                    console.debug("--------AddThePart setting isAddingPart to True----------");
                    _isAddingPart = true;

                    @if (ViewBag.UseLegacyPartsSectionDropdown) {
                        <text>
                            selectedNodeIdValue = $("#sectionSelect").val();
                        </text>
                    }

                    $.getJSON('@Url.Action("AddLabor", "Estimate")', {
                          userID: @ViewBag.UserID
                        , estimateID: @Model.EstimateID
                        , allYears: $("#checkShowAllYears").is(":checked")
                        , meMode: '@Model.ManualEntry.List.MEMode'
                        /*, sectionKey: $("#sectionSelect").val()*/
                        , sectionKey: selectedNodeIdValue
                        , index: currentPart
                        , qty: qty
                        , laborTimeOverride: laborTime
                        , laborTypeOverride: laborType
                        , allowance: allowanceTime
                        , blendTime: blendTime
                        , edgingTime: edgingTime
                        , undersideTime: undersideTime
                        , paintTimeString: paintTime
                        , paintType: PaintType
                        , adjacentDeductionType: nAdjInfo
                        , lockAllowance: $('#Popup_CheckboxLockAllowance').prop('checked')
                        , lockClearcoat: lockClearcoatChecked
                        , lockBlend: $('#Popup_CheckboxLockBlend').prop('checked')
                        , lockEdging: $('#Popup_CheckboxLockEdging').prop('checked')
                        , lockUnderside: $('#Popup_CheckboxLockUnderside').prop('checked')
                        , lockAdjacentDeduction: false
                        , includeAllowance: $('#Popup_CheckBoxIncludeAllowance').prop('checked')
                        , includeClearcoat: includeClearcoatChecked
                        , includeBlend: $('#Popup_CheckBoxIncludeBlend').prop('checked')
                        , includeEdging: $('#Popup_CheckBoxIncludeEdging').prop('checked')
                        , includeUnderside: $('#Popup_CheckBoxIncludeUnderside').prop('checked')
                        , mode: mode
                        , includeRIFlag: $('#CheckBoxIncludeRI').prop('checked')
                        , rrTime: _partList[currentPart].LaborRRTime
                        , repairID: _partList[currentPart].RepairID
                        , price: price
                        , vehiclePosition: _partList[currentPart].Side
                        , defaultSide: GetRightLeft()
                        , partSource: partSource
                        , addAction: HeaderAction
                        , vendorPartNumber: nonOemSourcePartNumber
                        , vendorID: nonOemSourceCID
                        , clearcoatTime: clearcoatTime
                    }, function (data) {
                        _isAddingPart = false;
                        $('#CheckBoxIncludeRI').prop('checked', false);
                        console.log(data);
                        callbackUpdate(data, HeaderAction);
                    });
                }

            }
        }
        hideModal();
    }

    function callbackUpdate(result, action) {
        RefreshHeaderInfo(@Model.EstimateID);
        clearAutoPaintSelection();
        BlankPaintLayer();

        _lastLineItemID = result.NewID;

        if (result.Success == true) {
            ShowProgressMessage("@Proestimator.Resources.ProStrings.Graphical_PartAdded", 3000);

            console.debug("callbackUpdate CurrentPart: " + result.CurrentPartIndex);

            if (action == "Replace" && _partList[result.CurrentPartIndex].Price == 0)
            {
                alert("Part Price not available.  Please contact your supplier for current price.");
            }

            if (action == 'Repair' && result.RIAdded == true)
            {
                action = 'RI';
            }

            hideModal();
            _nonOemSourcePartNumber = '';

            Temp = $('#Add' + _partList[result.CurrentPartIndex].BarCode);
            TempR = $('#Remove' + _partList[result.CurrentPartIndex].BarCode);
            if (Temp != undefined && Temp != 'null') {
                if (result.NewID == -1) {
                    Temp.val('Add');
                    if (TempR != undefined && TempR != 'null') {
                        TempR.prop('disabled', true);
                    }
                }
                else {
                    Temp.val('   Edit   ');
                    if (TempR != undefined && TempR != 'null') {
                        TempR.prop('disabled', false);
                    }
                }
            }

            if (hiddenParts == false) {
                Temp = $('#AddMP' + _partList[result.CurrentPartIndex].BarCode);
                TempR = $('#RemoveMP' + _partList[result.CurrentPartIndex].BarCode);
                if (Temp != undefined && Temp != 'null') {
                    if (result.NewID == -1) {
                        Temp.val('Add');
                        if (TempR != undefined && TempR != 'null') {
                            TempR.prop('disabled', true);
                        }
                    }
                    else {
                        Temp.val('   Edit   ');
                        if (TempR != undefined && TempR != 'null') {
                            TempR.prop('disabled', false);
                        }
                    }
                }
            }

            if (result.AddOnResults.length > 0) {
                _addOnsData = result.AddOnResults;
            }

            checkForOverlaps();
            RefreshPartInfoCache();
            LoadEstimateLineItemList();
        }
        else
        {
            ShowProgressMessage(result.ErrorMessage, 10000);

            console.debug("--------AddThePart Error setting isAddingPart to False----------");
        }
    }

    function AddOnsGridDataChanged(arg) {

        // Wire up hilighting the row when hovering.
        $("#add-ons-grid tbody tr").hover(
            function () {
                // Get the hovered row and its LineItemPreview data
                var row = $(this).closest("tr");
                row.toggleClass("k-state-hover");
            }
        );

        var grid = $("#add-ons-grid").data("kendoGrid");
        var models = grid.dataSource.data();

        for (i = 0; i < models.length; i++) {
            var row = grid.table.find("[data-uid=" + models[i].uid + "]");

            if (models[i].AutoSelect === true) {
                row.addClass("row-selected");
            }
        }
    }

    function AddOnsGridSelectionChanged(arg) {

        // Remove the Hover state from all rows
        $(".k-state-hover").each(function (index) {
            $(this).removeClass("k-state-hover");
        });

        // Get the selected item and call the ClickedItem event
        var row = $("#add-ons-grid").find(".k-state-selected").first();
        var presetID = row.find("td").first().html();

        if (row.hasClass("row-selected")) {
            row.removeClass("row-selected");
        }
        else {
            row.addClass("row-selected");
        }

        if ($(".row-selected").length > 0) {
            $("#btnAcceptCheckedAddOns").prop("disabled", false);
            $("#btnAcceptCheckedAddOns").css("opacity", 1);
        }
        else {
            $("#btnAcceptCheckedAddOns").prop("disabled", true);
            $("#btnAcceptCheckedAddOns").css("opacity", 0.4);
        }
    }

    function AcceptAllAddOns()
    {
        AcceptAddOns(false);
    }

    function AcceptCheckedAddOns()
    {
        AcceptAddOns(true);
    }

    function AcceptAddOns(onlyChecked)
    {
        HideAddOnPopup();

        var addOnIDs = "";
        var seperator = "";

        $("#add-ons-grid").find("tr").each(function (i, o) {
            if (!onlyChecked || $(o).hasClass("row-selected")) {
                addOnIDs += seperator + $(o).find("td").first().html();;
                seperator = ",";
            }
        });

        if (addOnIDs != "") {
            $.getJSON("@Url.Action("AcceptAddOns", "Estimate")", { userID: @ViewBag.UserID, loginID: @Model.LoginID, estimateID: @Model.EstimateID, idList: addOnIDs, parentLineID: _lastLineItemID }, function (data) {
                LoadEstimateLineItemList();
                RefreshHeaderInfo(@Model.EstimateID);
            });
        }
        else {
            $("#AddOnNoneSelected").show();
        }

    }

    function RejectAllAddOns()
    {
        HideAddOnPopup();
    }

    function SetupLaborWindow(laborTime, currentPart) {
        _currentPartIndex = currentPart;
        if (_partList[currentPart].LaborLaborType > 0) {
            $('#Popup_DropDownListLaborType').val(_partList[currentPart].LaborLaborType);
        }
        else {
            $('#Popup_DropDownListLaborType').val(_partList[currentPart].LaborNameID);
        }
        $('#Popup_TextBoxLaborTime').val(laborTime);
        if (HeaderAction == _partList[currentPart].ActionPart) {
            ShowPopup('LaborOptionsPopup');
            ShowPopup('OkCancelPopup');
        }
    }

    function hide(id) {
        hideModal();
        $("#workDesk").show();

        RestoreScrollPosition();
    }

    function ShowPopup(id, savePosition) {
        if (id) {
            HideAddOnPopup();

            if (ScreenIsSmall())
            {
                $("#workDesk").hide();
            }

            var panelToShow = $('#' + id);

            if (panelToShow) {
                $('.modal-container').show();
                panelToShow.show();
            }
            else {
                console.debug("PanelToShow for id " + id + " not found.");
            }

            if (ScreenIsSmall() && (savePosition == 'undefined' || savePosition === true))
            {
                SaveScrollPosition();
            }
        }
    }

    // Clear all values on the Paint and Labor popup
    function BlankPaintLayer() {
        $('#Popup_TextBoxPaintTime').val(0);
        $('#Popup_TextboxAllowanceTime').val(0);
        $('#Popup_TextboxClearcoatTime').val(0);
        $('#Popup_TextboxBlendTime').val(0);
        $('#Popup_TextboxEdgingTime').val(0);
        $('#Popup_TextboxUndersideTime').val(0);
        $('#Popup_CheckboxLockAllowance').prop('checked', false);
        $('#Popup_CheckBoxLockClearcoat').prop('checked', false);
        $('#Popup_CheckboxLockBlend').prop('checked', false);
        $('#Popup_CheckboxLockEdging').prop('checked', false);
        $('#Popup_CheckboxLockUnderside').prop('checked', false);
        $('#Popup_CheckBoxIncludeAllowance').prop('checked', false);
        $('#Popup_CheckBoxIncludeClearcoat').prop('checked', false);
        $('#Popup_CheckBoxIncludeBlend').prop('checked', false);
        $('#Popup_CheckBoxIncludeEdging').prop('checked', false);
        $('#Popup_CheckBoxIncludeUnderside').prop('checked', false);
    }

    function hideModal() {
        //console.debug('hideModel');
        $('.modal-container').hide();

        $('#Parts').hide();
        $('#OverlapPopup').hide();
        $('#MultiplePartsPopup').hide();
        $('#NonOemPopup').hide();
        $('#RepairPopup').hide();
        $('#PaintPopup').hide();
        $('#LaborOptionsPopup').hide();
        $('#OkCancelPopup').hide();
        $('#PDRMatrixContainer').hide();
        $('#AddOnPopup').hide();
        $("#Popup_DropDownListOverlap").val("");
    }

    function ClearupPartList() {
        hide('MultiplePartsPopup');
    }

    function MultipartCancelClicked() {
        ClearupPartList();
        ClearPartInfoDisplay();
    }

    function PartsOKClicked() {
        $("#graphical-page-stuff").show();

        if (ScreenIsSmall())
        {
            $(".graphic-top-row").show();
            $(".graphical-footer").show();
        }

        $("#PartsAndLaborContainer").hide();
    }

    function MultipartOKClicked() {
        ClearupPartList();
        ClearPartInfoDisplay();
    }

    function ClearPartInfoDisplay() {
        $('#LabelPartNumber').html('&nbsp;');
        $('#LabelDescription').html('&nbsp;');
        $('#LabelPrice').html('&nbsp;');
        $('#LabelAction').html('&nbsp;');
        $('#LabelQtyOrd').html('&nbsp;');
        $('#LabelNotes').html('&nbsp;');
        $('#LabelTimeTitle').html('&nbsp;');
        $('#LabelLaborTypes').html('Labor');
        $('#LabelPaintType').html('&nbsp;');
        $('#LabelTimeText1').html('&nbsp;');
        $('#LabelTime1').html('&nbsp;');
        $('#LabelTimeText2').html('&nbsp;');
        $('#LabelTime2').html('&nbsp;');
    }

    // Called when a part label is hovered over
    function PartLabelMouseOver(partID) {
        RightButton = false;

        var currentPart = GetCurrentPartNumber("N" + partID);

        var popEnd = "";
        if (ScreenIsSmall()) {
            popEnd = "Pop";
        }

        if (currentPart >= 0) {
            DisplayPartInfo(currentPart);

            var partCount = GetPartCount(currentPart);

            if (partCount != 1) {
                var tempDescription = _partList[currentPart].Description, descSplit = tempDescription.split('('), newDesc = descSplit[0], descSplit2 = newDesc.split(' - '), newDesc2 = descSplit2[0];
                $("#LabelPartNumber" + popEnd).html('Multiple Part #s');
                $("#LabelDescription" + popEnd).html(newDesc2);
            }
        }
        else {
            $("#LabelPartNumber" + popEnd).html('@Proestimator.Resources.ProStrings.Graphical_UseManual');
        }
    }

    function tsep(n) {
        var ts = ',', ds = '.', ns = String(n), ps = ns, ss = '', i = ns.indexOf('.');
        if (i != -1) { ps = ns.substring(0, i); ss = ds + ns.substring(i + 1) }
        if (ss == '') { ss = ds + '00' } if (ss.length == 2) { ss = ss + '0' }
        return ps.replace(/(\d)(?=(\d{3})+([.]|$))/g, "$1" + ts) + ss
    }

    // Fill the part info table with data for the passed part index
    function DisplayPartInfo(partIndex) {
        var popEnd = "";
        if (ScreenIsSmall()) {
            popEnd = "Pop";
        }

        if (_partList[partIndex].Comment.indexOf('-see ') > 0 || _partList[partIndex].Comment.indexOf('-See ') > 0)
        {
            $("#LabelDescription" + popEnd).html(_partList[partIndex].Comment);
        }
        else
        {
            $("#LabelPartNumber" + popEnd).html(_partList[partIndex].PartNumber);
            $("#LabelDescription" + popEnd).html(_partList[partIndex].Description);
            _partDescription = _partList[partIndex].Description;

            if (_partList[partIndex].PartNumber == '') {
                return;
            }
            $('#LabelPrice' + popEnd).html(tsep(_partList[partIndex].Price));
            $('#LabelAction' + popEnd).html(_partList[partIndex].ActionPart);
            if (_partList[partIndex].RepairID > 0) {
                var priorText = $('#LabelAction' + popEnd).html();
                $('#LabelAction' + popEnd).html(priorText + ' w/Repair');
            }
            if (_partList[partIndex].QtyOrd > 0) {
                $('#LabelQtyOrd' + popEnd).html(_partList[partIndex].QtyOrd);
            }
            else {
                $('#LabelQtyOrd' + popEnd).html('');
            }
            $('#LabelNotes' + popEnd).html(_partList[partIndex].Notes);
            var TempLabor = '';
            if (_partList[partIndex].LaborNames != '') {
                $('#LabelLaborTypes' + popEnd).html(_partList[partIndex].LaborNames + ' Labor');
            }
            else {
                $('#LabelLaborTypes' + popEnd).html('Unknown\nLabor');
            }
            if (_partList[partIndex].PaintNames != '') {

                $('#LabelPaintType' + popEnd).html(_partList[partIndex].PaintNames);
                if (_rateProfile.AllowDeductions) {
                    var priorText = $('#LabelPaintType' + popEnd).html();
                    $('#LabelPaintType' + popEnd).html(priorText + '\n' + _partList[partIndex].AdjInfo);
                }
            }
            else {
                $('#LabelPaintType' + popEnd).html('');
            }

            $('#LabelTimeTitle' + popEnd).html('');
            $('#LabelTimeText1' + popEnd).html('PaintPopup');
            if (_partList[partIndex].LaborRefinishTime > 0) {
                $('#LabelTime1' + popEnd).html(_partList[partIndex].LaborRefinishTime + '\n');
            } else {
                $('#LabelTime1' + popEnd).html('N/A');
            }

            if (_partList[partIndex].LaborRRTime > 0) {
                $('#LabelTimeText2' + popEnd).html('R+R');
                if (_partList[partIndex].LaborRRTime != -1) {
                    $('#LabelTime2' + popEnd).html(_partList[partIndex].LaborRRTime + '\n');
                }
            }
            else if (_partList[partIndex].LaborRITime > 0) {
                $('#LabelTimeText2' + popEnd).html('RI');
                if (_partList[partIndex].LaborRITime != -1) {
                    $('#LabelTime2' + popEnd).html(_partList[partIndex].LaborRITime + '\n');
                }
            }
            else if (_partList[partIndex].LaborOHTime > 0) {
                $('#LabelTimeText2' + popEnd).html('O/H');
                if (_partList[partIndex].LaborOHTime != -1) {
                    $('#LabelTime2' + popEnd).html(_partList[partIndex].LaborOHTime + '\n');
                }
            }
            else if (_partList[partIndex].LaborAddTime > 0) {
                $('#LabelTimeText2' + popEnd).html('Add');
                if (_partList[partIndex].LaborAddTime != -1) {
                    $('#LabelTime2' + popEnd).html(_partList[partIndex].LaborAddTime + '\n');
                }
            }
            else if (_partList[partIndex].LaborAITime > 0) {
                $('#LabelTimeText2' + popEnd).html('Access/Inspect');
                if (_partList[partIndex].LaborAITime != -1) {
                    $('#LabelTime2' + popEnd).html(_partList[partIndex].LaborAITime + '\n');
                }
            }
            else if (_partList[partIndex].LaborCATime > 0) {
                // $('#LabelTimeText2' + popEnd).html('Check/Adjust');
                $('#LabelTimeText2' + popEnd).html('Align');
                if (_partList[partIndex].LaborCATime != -1) {
                    $('#LabelTime2' + popEnd).html(_partList[partIndex].LaborCATime + '\n');
                }
            }
            else if (_partList[partIndex].LaborAlignTime > 0) {
                $('#LabelTimeText2' + popEnd).html('Align');
                if (_partList[partIndex].LaborAlignTime != -1) {
                    $('#LabelTime2' + popEnd).html(_partList[partIndex].LaborAlignTime + '\n');
                }
            }
            else {
                $('#LabelTimeText2' + popEnd).html('');
                $('#LabelTime2' + popEnd).html('');
            }
        }
    }

    function GetPartCount(currentPart) {
        var tempPart;
        var partSplit2;
        var part = _partList[currentPart].PartID;
        var partSplit1 = part.split('.');
        var ref = partSplit1[0];
        var side = GetRightLeft();
        var count = 0;
        for (var i = 0; i < _partList.length; i++) {
            tempPart = _partList[i].PartID;
            partSplit1 = tempPart.split('.');
            if ((_partList[i].Side == '' && ref == partSplit1[0]) || _partList[i].Side.indexOf(side) > -1 && ref == partSplit1[0]) {
                count = count + 1
            }
        }

        //console.debug('GetPartCount returning: ' + count);

        return count;
    }

    function GetCurrentPartNumber(part) {
        var partSplit1 = part.split('.');
        var partSplit2;
        var part1;
        var part2;
        var checkSide = false;

        var currentPart = -1;

        if (_partList) {
            for (var i = 0; i < _partList.length; i++) {
                var partSplit2 = _partList[i].PartID.split('.');

                if (partSplit1.length == 1 && partSplit2.length == 1) {
                    part1 = part;
                    part2 = _partList[i].PartID;
                    checkSide = true;
                }
                else {
                    if (partSplit1.length > 1 && partSplit2.length > 1) {
                        part1 = part; part2 = _partList[i].PartID;
                        if (Side[i] != '') {
                            checkSide = true;
                        }
                        else {
                            checkSide = false;
                        }
                    }
                    else {
                        part1 = partSplit1[0]; part2 = partSplit2[0];
                        checkSide = true;
                    }
                }
                if (part1 == part2) {
                    if (!checkSide) {
                        currentPart = i;
                        i = _partList.length;
                    }
                    else {
                        //console.log(Side[i]);
                        if (_partList[i].Side.indexOf(GetRightLeft()) > -1 || _partList[i].Side == '') {
                            currentPart = i;
                            i = _partList.length;
                        }
                    }
                }
            }
        }

        return currentPart;
    }

    function GetRightLeft() {
        // If the right button was clicked always return Right
        if (RightButton == true)
        {
            return 'R';
        }

        var smallSelect = $("#sideSelect");

        if (ScreenIsSmall() || smallSelect.is(":visible"))
        {
            return smallSelect.val();
        }
        else
        {
            if ($("#rbLeftRight:checked").val() == 'L')
            {
                if (RightButton)
                {
                    return 'R'
                }
                else
                {
                    return 'L'
                }
            }
            else {
                if (RightButton)
                {
                    return 'L'
                }
                else
                {
                    return 'R'
                }
            }
        }

        return 'L';
    }

    var _selectedPart;

    // Called when a part label is clicked
    function HandlePartLabelClicked(partID, rightButton) {
        _selectedPart = partID;
        RightButton = rightButton;

        if (ScreenIsSmall())
        {
            showMobileDetails();
        }
        else
        {
            DoPartLabelClick(_selectedPart);
        }
    }

    function mobileAddPart() {
        DoPartLabelClick(_selectedPart);
        hideMobileDetails(false);
    }

    var _mobileScroll = 0;

    function SaveScrollPosition()
    {
        _mobileScroll = $(document).scrollTop();
        console.log("Saved scroll position: " + _mobileScroll);
    }

    function RestoreScrollPosition()
    {
        $(document).scrollTop(_mobileScroll);
        console.log("Restored scroll position: " + _mobileScroll);
    }

    function showMobileDetails() {
        SaveScrollPosition();

        $("#graphical-page-stuff").hide();
        $(".graphic-top-row").hide();
        $(".resizable-bottom").hide();
        $(".ui-resizable-handle").hide();
        $(".resizable-top").css("height", "100%");
        $("#PartInformation").show();
    }

    function hideMobileDetails(doRestore) {

        $("#graphical-page-stuff").show();
        $(".graphic-top-row").show();
        $(".resizable-bottom").show();
        $(".ui-resizable-handle").show();
        $(".resizable-top").css("height", (100 - bottomHeightPct) + '%');
        $("#PartInformation").hide();
        $(".resizable-bottom").css("height", bottomHeightPct + '%');

        if (doRestore === true) {
            RestoreScrollPosition();
        }
    }

    function DoPartLabelClick(part) {
        var currentPart = GetCurrentPartNumber(part);
        console.debug("currentPart: " + currentPart);

        if (currentPart >= 0) {
            var partCount = GetPartCount(currentPart);

            if (partCount > 1) {
                PopulateMultipartsTable(currentPart);
                ShowPopup('MultiplePartsPopup', false);
            }
            else {
                AddPartByIndexAndHeaderSelections(currentPart, true);
            }
        }
        else {
            alert('@Proestimator.Resources.ProStrings.Graphical_UseManual');
        }
    }

    function HideDialog() {
        $("#overlay").hide();
        $("#dialog").fadeOut(300);
        Clearlabel();
    }

    function showPartsAndLabor() {
        if (_partList) {

            populateAllPartInfo();

            $("#graphical-page-stuff").hide();

            if (ScreenIsSmall())
            {
                $(".graphic-top-row").hide();
                $(".graphical-footer").hide();
            }

            $("#PartsAndLaborContainer").show();

            LogShowPartsAndLabor();
        }
    }

    function PopulateMultipartsTable(currentPart) {
        var part = _partList[currentPart].PartID;
        var partSplit1 = part.split('.');
        var ref = partSplit1[0];
        var side = GetRightLeft();

        var printedBarCodes = [];

        var TDString;
        var table = '<TABLE Width="100%" Border="1"><TR Class=t"TableHeader"><TH>@Proestimator.Resources.ProStrings.Action</TH><TH>@Proestimator.Resources.ProStrings.PartNo</TH><TH>@Proestimator.Resources.ProStrings.Description</TH><TH>@Proestimator.Resources.ProStrings.Comment</TH><TH>@Proestimator.Resources.ProStrings.Price</TH><TH>@Proestimator.Resources.ProStrings.RR</TH><TH>@Proestimator.Resources.ProStrings.Refinish</TH><TH>@Proestimator.Resources.ProStrings.Remove</TH></TR>';
        for (var i = 0; i < _partList.length; i++)
        {
            var tempPart = _partList[i].PartID;

            partSplit1 = tempPart.split('.');

            if (printedBarCodes.indexOf(_partList[i].BarCode) == -1)
            {
                if ((_partList[i].Side == '' && ref == partSplit1[0]) || side == _partList[i].Side && ref == partSplit1[0])
                {
                    printedBarCodes.push(_partList[i].BarCode);

                    table = table + '<TR class="OverPart" onmouseover="PartsTableHover(\'' + _partList[i].BarCode + '\')" onmouseout="PartsTableMouseOut()">';
                    if (Math.round(i / 2) == i / 2)
                    {
                        TDString = '<TD Class="TableData">';
                    }
                    else
                    {
                        TDString = '<TD Class="TableDataAlt">';
                    }
                    if (_partList[i].ID > 0)
                    {
                        table = table + TDString + '<INPUT Type="Button" id="AddMP' + _partList[i].BarCode + '"  value="';
                        var pn = _partList[i].PartNumber;
                        console.log(pn.substring(0, 2));
                        if (pn.substring(0, 2) == '**')
                        {
                            table = table + 'Remove';
                        }
                        else
                        {
                            table = table + '   Edit   ';
                        }
                        table = table + '" onclick="javascript:MultiPartAddClick(\'' + _partList[i].BarCode + '\');">';
                    }

                    else
                    {
                        table = table + TDString + '<INPUT Type="Button" id="AddMP' + _partList[i].BarCode + '"  value="@Proestimator.Resources.ProStrings.AddButton" onclick="javascript:MultiPartAddClick(\'' + _partList[i].BarCode + '\');">';
                    }
                    table = table + '</TD>' + TDString + _partList[i].PartNumber + '</TD>' + TDString + _partList[i].Description + '</TD>' + TDString + _partList[i].Comment + '</TD>' + TDString + '$' + tsep(_partList[i].Price) + '</TD>' + TDString + _partList[i].LaborRRTime + ' hrs. ' + _partList[i].LaborNames + '</TD>' + TDString + _partList[i].LaborRefinishTime + ' hrs. ' + _partList[i].PaintNames + '</TD>';
                    table = table + TDString + '<INPUT Type="Button" id="RemoveMP' + _partList[i].BarCode + '"  value="@Proestimator.Resources.ProStrings.Remove" onclick="javascript:DeleteLineItem(\'' + _partList[i].BarCode + '\');"';
                    if (_partList[i].ID <= 0)
                    {
                        table = table + ' disabled';
                    }
                    table = table + '></TD></TR>';
                }
            }
        }
        table = table + '</TABLE>';

        $('#MultipartsTable').html(table);
    }

    function populateAllPartInfo() {
        PopulatePartsTableLarge();
        PopulatePartsTableSmall();
        _partsPopulated = true;
        console.debug("PartInfo populated");
    }

    function PopulatePartsTableSmall() {
        var t = "<div class='item-container'>";

        if (_partList) {

            var lastComment = "";

            for (var i = 0; i < _partList.length; i++) {

                if (_partList[i].Comment != lastComment)
                {
                    // Button IDs need to be unique, if there's no barcode, generate a random string
                    var partBarcode = _partList[i].BarCode;
                    if (partBarcode.length <= 0)
                    {
                        partBarcode = MakeRandomString(5);
                    }

                    lastComment = _partList[i].Comment;

                    t += "<div class='item-header' onclick='toggleItemDetails(" + i + ")'>" + _partList[i].PartNumber + " " + _partList[i].Comment + "</div>";
                    t += "<div class='item-detail' id='detail-" + i + "'>";
                    t += "<br />" + _partList[i].Description;
                    var price = tsep(_partList[i].Price);
                    if (price != "" && price != "0.00") {
                        price = "$" + price + " ";
                    } else {
                        price = "";
                    }

                    var laborTime = 0;
                    if (_partList[i].LaborOHTime > 0) { laborTime = _partList[i].LaborOHTime }
                    if (_partList[i].LaborAddTime > 0) { laborTime = _partList[i].LaborAddTime }
                    if (_partList[i].LaborAITime > 0) { laborTime = _partList[i].LaborAITime }
                    if (_partList[i].LaborCATime > 0) { laborTime = _partList[i].LaborCATime }
                    if (_partList[i].LaborAlignTime > 0) { laborTime = _partList[i].LaborAlignTime }
                    if (_partList[i].LaborRITime > 0) { laborTime = _partList[i].LaborRITime }
                    if (_partList[i].LaborRRTime > 0) { laborTime = _partList[i].LaborRRTime }

                    if (price > 0) {
                        t += "<br />" + price;
                    }

                    if (laborTime > 0) {
                        t += "<br />" + laborTime + " hrs. " + _partList[i].LaborNames;
                    }

                    if (_partList[i].LaborRefinishTime > 0) {
                        t += "<br />" + _partList[i].LaborRefinishTime + '&nbsp;' + _partList[i].PaintNames;
                    }

                    t += "<br />";

                    t += "<div class='pl-buttons'>";

                    if (_partList[i].ID > 0) {
                        t += "<INPUT Type='Button' id='AddMP" + partBarcode + "' value='";
                        var pn = _partList[i].PartNumber;
                        if (pn.substring(0, 2) == '**') {
                            t += "Remove";
                        } else {
                            t += "   Edit   ";
                        }
                        t += "' onclick='javascript:MultiPartAddClick('" + _partList[i].BarCode + "^^');LogAddFromPartsAndLabor();'>";
                    }
                    else {
                        t += "<INPUT Type='Button' id='AddMP" + _partList[i].BarCode + "' value='@Proestimator.Resources.ProStrings.AddButton' onclick='javascript:GetClickedRow(this);MultiPartAddClick(\"" + _partList[i].BarCode + "\");LogAddFromPartsAndLabor();'>";
                    }

                    var disabledText = "";
                    if (_partList[i].ID <= 0) {
                        disabledText = " disabled";
                    }
                    t += "&nbsp;&nbsp;<INPUT Type='Button' id='RemoveMP" + partBarcode + "' value='@Proestimator.Resources.ProStrings.Remove' onclick='javascript:DeleteLineItem(\''" + _partList[i].BarCode + "'\')'" + disabledText + ">";

                    t += "</div></div>";
                }
            }
        }

        t += "</div>";

        $('#PartsTableSmall').html(t);
    }

    function CreatePartsTable(partList) {
        //console.log('populate parts & labor');
        var TDString, T, tempPart, partSplit, re, TDString;
        T = '<TABLE Width="100%" Border="0" style="margin: 0px;"><TR Class="TableHeader"><TH>@Proestimator.Resources.ProStrings.Action</TH><TH>Ref</TH><TH>@Proestimator.Resources.ProStrings.PartNo</TH><TH>@Proestimator.Resources.ProStrings.Description</TH><TH>@Proestimator.Resources.ProStrings.Comment</TH><TH>@Proestimator.Resources.ProStrings.Price</TH><TH>@Proestimator.Resources.ProStrings.Labor</TH><TH>@Proestimator.Resources.ProStrings.Notes</TH><TH>@Proestimator.Resources.ProStrings.Remove</TH></TR>';
        re = /N/gi;

        var lastComment = "";

        if (partList) {
            for (var i = 0; i < partList.length; i++) {

                var laborTime = 0;
                var PriceStr = "";

                if (partList[i].Comment != lastComment)
                {
                    // Button IDs need to be unique, if there's no barcode, generate a random string
                    var partBarcode = partList[i].BarCode;
                    if (partBarcode.length <= 0)
                    {
                        partBarcode = MakeRandomString(5);
                    }

                    lastComment = partList[i].Comment;

                    tempPart = partList[i].PartID;
                    partSplit = tempPart.split('.');
                    T = T + '<TR class="OverPart" onmouseover="PartsTableHover(\'' + partList[i].BarCode + '\')" onmouseout="PartsTableMouseOut()">';
                    if (Math.round(i / 2) == i / 2) {
                        TDString = '<TD Class="TableData">';
                    }
                    else {
                        TDString = '<TD Class="TableDataAlt">';
                    }
                    PartId = partSplit[0];
                    PartId = PartId.replace(re, '');
                    if (partList[i].Price == 0) {
                        PriceStr = '';
                    }
                    else {
                        PriceStr = '$' + tsep(partList[i].Price);
                    }
                    if (partList[i].ID > 0) {
                        if (partList[i].PartNumber != '') {
                            T = T + TDString + '<INPUT Type="Button" id="Add' + partBarcode+ '"  value="   @Proestimator.Resources.ProStrings.Edit   " onclick="javascript:EditLineItem(\'' + partList[i].ID + '\');">';
                        }
                        else {
                            T = T + TDString + '<INPUT Type="Button" id="Add' + partBarcode + '"  value="@Proestimator.Resources.ProStrings.Remove" onclick="javascript:DeleteLineItem(\'' + partBarcode + '\');">';
                        }
                    }
                    else {
                        if (partList[i].PartNumber != '') {
                            T = T + TDString + '<INPUT Type="Button" id="Add' + partList[i].BarCode + '"  value="@Proestimator.Resources.ProStrings.AddButton" onclick="javascript:GetClickedRow(this);MultiPartAddClick(\'' + partList[i].BarCode + '\');LogAddFromPartsAndLabor();">';
                        }
                        else {
                            T = T + TDString + '<INPUT Type="Button" id="Add' + partList[i].BarCode + '"  value="@Proestimator.Resources.ProStrings.AddButton" onclick="javascript:addLabor(' + i + ');LogAddFromPartsAndLabor();">';
                        }
                    }
                    T = T + '</TD>' + TDString + PartId + '</TD>' + TDString + partList[i].PartNumber + '</TD>' + TDString + partList[i].Description + '</TD>' + TDString + partList[i].Comment + '</TD>' + TDString + PriceStr + '</TD>' + TDString;

                    //console.debug("RR: " + partList[i].LaborRRTime + " OH: " + partList[i].LaborOHTime + " Add: " + partList[i].LaborAddTime + " AI: " + partList[i].LaborAITime + " CA: " + partList[i].LaborCATime + " Align: " + partList[i].LaborAlignTime + " RI: " + partList[i].LaborRITime + " LaborNames: " + partList[i].LaborNames + " PaintNames: " + partList[i].PaintNames + " Refinish: " + partList[i].LaborRefinishTime);

                    if (partList[i].LaborOHTime > 0) { laborTime = partList[i].LaborOHTime }
                    if (partList[i].LaborAddTime > 0) { laborTime = partList[i].LaborAddTime }
                    if (partList[i].LaborAITime > 0) { laborTime = partList[i].LaborAITime }
                    if (partList[i].LaborCATime > 0) { laborTime = partList[i].LaborCATime }
                    if (partList[i].LaborAlignTime > 0) { laborTime = partList[i].LaborAlignTime }
                    if (partList[i].LaborRITime > 0) { laborTime = partList[i].LaborRITime }
                    if (partList[i].LaborRRTime > 0) { laborTime = partList[i].LaborRRTime }

                    if (laborTime > 0) { T = T + laborTime + '&nbsp;' + partList[i].LaborNames }
                    if (partList[i].LaborRefinishTime > 0) { if (laborTime > 0) { T = T + '<BR>' } T = T + partList[i].LaborRefinishTime + '&nbsp;' + partList[i].PaintNames }

                    T = T + '</TD>' + TDString + partList[i].Notes + '</TD>'; T = T + TDString + '<INPUT Type="Button" id="Remove' + partBarcode + '"  value="@Proestimator.Resources.ProStrings.Remove" onclick="javascript:DeleteLineItem(\'' + partList[i].BarCode + '\');"';
                    if (partList[i].ID <= 0) {
                        T = T + ' disabled';
                    } T = T + '></TD></TR>'
                }
            }
        }
        T = T + '</TABLE>';

        return T;
    }

    function PopulatePartsTableLarge() {
        if (_partList) {
            var tableHtml = CreatePartsTable(_partList);
            $('#PartsTableLarge').html(tableHtml);
        }
    }

    function MakeRandomString(length) {
        var result           = '';
        var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        for ( var i = 0; i < length; i++ ) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }

    function DeleteLineItem(barcode)
    {
        var partIndex = GetPartIndexFromBarcode(barcode);

        if (partIndex > -1) {
            var okToDelete;

            if (_partList[partIndex].RepairID > 0) {
                okToDelete = confirm('@Proestimator.Resources.ProStrings.Graphical_Confirm_DeleteRI');
            }
            else {
                okToDelete = confirm('@Proestimator.Resources.ProStrings.Graphical_Confirm_Delete');
            }

            if (okToDelete) {
                $.getJSON("@Url.Action("DeleteLineItem", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID, lineID: _partList[partIndex].ID, meMode: '@Model.ManualEntry.List.MEMode' }, function (data) {
                    callbackDelete(partIndex);
                });
            }
        }
    }

    function callbackDelete(partIndex) {
        RefreshHeaderInfo(@Model.EstimateID);

        _partList[partIndex].ID = -1;
        _partList[partIndex].ActionPart = '';
        _partList[partIndex].ActionTime = 0;
        _partList[partIndex].QtyOrd = 0;
        _partList[partIndex].RepairID = -1;

        if (hiddenParts == false) {
            Temp = $('#AddMP' + _partList[partIndex].BarCode);
            if (Temp.length) {
                Temp.val('Add');
                $('#RemoveMP' + _partList[partIndex].BarCode).prop("disabled", true);
            }
        }

        Temp = $('#Add' + _partList[partIndex].BarCode);
        if (Temp.length) {
            Temp.val('Add');
            $('#Remove' + _partList[partIndex].BarCode).prop('disabled', true);
        }

        hide('MultiplePartsPopup');
        LoadEstimateLineItemList();
    }

    function GetProfileInfo()
    {
        $.getJSON("@Url.Action("GetProfileInfo", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID }, function (data) {
            _rateProfile = data;
            console.debug("GetProfileInfo got data.");
        });

        $.getJSON("@Url.Action("GetProfileLaborRates2", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID }, function (data) {
            LaborRates = new Array(31);
            for (var i = 0; i <= 30; i++) {
                LaborRates[i] = 0;
            }
            $(data).each(function (i, rate) {
                LaborRates[rate.id] = rate.Rate;
            });
        });
    }

    function updateHeaderAction(value) {
        HeaderAction = value;
        $("input:radio[name=HeaderAction]").filter("[value=" + value + "]").prop("checked", true);
        $("#repairTypeSelect").val(value);

        //if (HeaderAction == "Replace" || HeaderAction == "Repair" || HeaderAction == "Refinish")
        //{
        //    $("#DropDownListAutoPaint").show();
        //}
        //else
        //{
        //    $("#DropDownListAutoPaint").hide();
        //}
    }

    var sectionsListTreeControl = '';

    var selectedNodeText = '';
    var selectedNodeIdValue = '';
    var counter = 0;

    var selectedNodeParentNodeText = '';

        $(document).ready(function () {

            sectionsListTreeControl = GetSectionsListTreeControl();
            $(".k-treeview").css("font-size", @Model.PartsSectionTreeFontSize + "px");
            //var slider = $("#treeViewFontSizeSlider").kendoSlider().data("kendoSlider")
            //slider.value(22);

            if (sectionsListTreeControl != null) {
                sectionsListTreeControl.bind("select", sectionsListTreeControl_select);

                @if(!ViewBag.IsMobileDevice)
                {
                   <text>
                sectionsListTreeControl.bind("expand", sectionsListTreeControl_desktop_expand);
                    </text>
                }

                $("#sectionslisttreeview").on("click", ".k-in", function (e) {
                    sectionsListTreeControl.toggle($(e.target).closest(".k-item"));
                });
            }

            $(".page-container").show();
            $("#printImageContainer").hide();

            _partsNowLoadingDialog = $("#loading");
            _partsNowLoadingDialog.dialog({
                hide: 'slide',
                show: 'slide',
                autoOpen: false
            });

            //document.oncontextmenu = function () { return false; };
            $(document).on("contextmenu", "#imgAreaContainer", function (e) {
                return false;
            });

            // When the user clicks anywhere outside of the modal, close it
            $(".modal-container").click(function () {
                //console.debug('window clicked');
                //hideModal();
            });

            $("#PartsAndLaborContainer").hide();
            $("#PartInformation").hide();


            GetProfileInfo();
            RefreshPartsAndLaborButton();
            RefreshArrowNote();

            $("#repairTypeSelect").change(function () {
                updateHeaderAction($("#repairTypeSelect").val());
            });

            $('input:radio[name=HeaderAction]').change(function () {
                updateHeaderAction(this.value);
            });

            $("#partTypeSelect").change(function () {
                HeaderPartSource = $("#partTypeSelect").val();
                console.debug("HeaderPartSource = " + HeaderPartSource);

                var selectedval = $("#partTypeSelect").val();
                $('input:radio[name=HeaderPartSource]').filter('[value=' + selectedval + ']').prop('checked', true);

                //set desktop radio button when mobile dropdown is selected. Everything in JS is looking at the desktop radio button - Josh
                //$("#HeaderPartSource").val($("#partTypeSelect").val());
            });

            $(".HeaderPartSource").change(function () {
                HeaderPartSource = $("#HeaderPartSource:checked").val();
                console.debug(".HeaderPartSource = " + HeaderPartSource);
            });

            @if (ViewBag.UseLegacyPartsSectionDropdown)
            {
                <text>
                    $('#sectionSelect').change(function () {
                        $("#printImageContainer").hide();
                        _partsPopulated = false;
                        LoadSectionData();
                        RefreshPartsAndLaborButton();
                    });
                </text>
            }

            function sectionsListTreeControl_desktop_expand(e) {

                @if (!@ViewBag.UseLegacyPartsSectionDropdown)
                {
                    <text>
                        // console.log(sectionsListTreeControl.element[0].childNodes[0].children[2].firstChild.innerText)

                        var sectionsListTreeControlLength = sectionsListTreeControl.element[0].childNodes[0].children.length;

                        var node = sectionsListTreeControl.findByText(e.node.innerText);

                        for (var i = 0; i < sectionsListTreeControlLength; i++) {

                            // This is the condition when user clicks on arrow sign to expand the tree item
                            if ($.trim(sectionsListTreeControl.element[0].childNodes[0].children[i].firstChild.innerText).toUpperCase() == $.trim(e.node.innerText).toUpperCase()) {
                                node = sectionsListTreeControl.element[0].childNodes[0].children[i].firstChild;
                            }
                            // This is the conditon when user perform searching on parts search
                            else if (sectionsListTreeControl.element[0].childNodes[0].children[i].firstChild.innerText.toUpperCase() == parentItem.toUpperCase()) {

                                if (sectionsListTreeControl.element[0].childNodes[0].children[i].childNodes.length > 1) {

                                    var childNodesLength = sectionsListTreeControl.element[0].childNodes[0].children[i].childNodes[1].childNodes.length;

                                    for (var childNodeIndex = 0; childNodeIndex < childNodesLength; childNodeIndex++) {
                                        if (sectionsListTreeControl.element[0].childNodes[0].children[i].childNodes[1].childNodes[childNodeIndex].innerText.toUpperCase() == childItem.toUpperCase()) {
                                            node = sectionsListTreeControl.element[0].childNodes[0].children[i].childNodes[1].childNodes[childNodeIndex];
                                        }
                                    }
                                }
                            }
                        }

                        //var node = sectionsListTreeControl.findByText(e.node.innerText);
                        //console.log(node);
                        sectionsListTreeControl.select(node);
                        //console.log(sectionsListTreeControl.select());
                        //console.log(sectionsListTreeControl.select().context);
                        // Scroll to the selected item.

                            if (sectionsListTreeControl.select()[0] != undefined) {
                                var itemScrollTop = sectionsListTreeControl.select()[0].offsetTop;
                                $('#sectionslisttreeview').animate({ scrollTop: itemScrollTop });
                            }

                            </text>
                }
            }

            function sectionsListTreeControl_select(e) {

                

                @if (!ViewBag.UseLegacyPartsSectionDropdown)
                {
                     <text>
                var dataItem = e.sender.dataItem(e.node);
                selectedNodeText = dataItem.Text;
                selectedNodeIdValue = -1;


                @if (ViewBag.IsMobileDevice)
                {
                    <text>

                        if ($.isNumeric(dataItem.id)) {
                            selectedNodeIdValue = dataItem.id;

                            selectedNodeParentNodeText = selectedNodeText;

                            if (e.node.parentElement.innerText.indexOf("Please select a parts section") == 0) {
                                if ($("#sectionslisttreeview_tv_active")[0] != undefined) {
                                    selectedNodeParentNodeText = $("#sectionslisttreeview_tv_active")[0].innerText.trim();
                                }
                            }
                            else {
                                selectedNodeParentNodeText = e.node.parentElement.parentNode.firstElementChild.innerText.trim();
                            }
                            
                            /*$('#sectionSelect').change(function () {*/
                            $("#printImageContainer").hide();
                            _partsPopulated = false;
                            LoadSectionData();
                            RefreshPartsAndLaborButton();
                            sectionsListTreeControl.close();
                        }
                        else {
                            var parentNode = $('#' + e.node.id)[0];

                            // parentNode.firstChild.firstElementChild
                            if (parentNode.firstChild.firstElementChild.className == 'k-icon k-i-collapse') {
                                parentNode.firstChild.firstElementChild.className = 'k-icon k-i-expand';
                            }
                            else if (parentNode.firstChild.firstElementChild.className == 'k-icon k-i-expand') {
                                parentNode.firstChild.firstElementChild.className = 'k-icon k-i-collapse';
                            }

                            //console.log(parentNode.firstChild.childNodes[1]);
                            parentNode.firstChild.childNodes[1].className = 'k-in';

                            // parentNode.childNodes[1]
                            if (parentNode.childNodes[1]['style']['display'] == 'none') {
                                //debugger;
                                parentNode.childNodes[1]['style']['display'] = 'block';
                                parentNode.childNodes[1]['style']['overflow'] = 'visible';
                                parentNode.childNodes[1]['style']['height'] = 'auto';
                                parentNode.setAttribute('aria-expanded', 'true');
                                parentNode.setAttribute('data-expanded', 'true');
                            }
                            else if (parentNode.childNodes[1]['style']['display'] == 'block') {
                                //debugger;
                                parentNode.childNodes[1]['style']['display'] = 'none';
                                parentNode.childNodes[1]['style']['overflow'] = 'visible';
                                parentNode.childNodes[1]['style']['height'] = 'auto';
                                parentNode.setAttribute('aria-expanded', 'false');
                                parentNode.setAttribute('data-expanded', 'false');
                            }

                            $("#printImageContainer").hide();
                            $("#MakeSelectionLabel").show();
                            $("#imgContainer").empty();
                            sectionsListTreeControl.open();
                        }
                    </text>
                }
                else
                {
                    <text>
                        if ($.isNumeric(dataItem.id)) {
                            selectedNodeIdValue = dataItem.id;

                            selectedNodeParentNodeText = selectedNodeText;

                            if (e.node.parentElement.innerText.indexOf("Select Section") > 0) {
                                if ($("#sectionslisttreeview_tv_active")[0] != undefined) {
                                    selectedNodeParentNodeText = $("#sectionslisttreeview_tv_active")[0].innerText.trim();
                                }
                            }
                            else {
                                selectedNodeParentNodeText = e.node.parentElement.parentNode.firstElementChild.innerText.trim();
                            }

                            /*$('#sectionSelect').change(function () {*/
                            $("#printImageContainer").hide();
                            _partsPopulated = false;
                            LoadSectionData();
                            RefreshPartsAndLaborButton();
                        }
                        ResizeTreeViewHeight();
                    </text>
                }
                 </text>
                }

            }

            // Wire up popup paint control changes
            $("#Popup_TextBoxPaintTime").change(function () {
                calculatePaintValues();
            });

            $("#Popup_DropDownListPaintType").change(function () {
                calculatePaintValues();
            });

            $("#Popup_DropDownListOverlap").change(function () {
                calculatePaintValues();
            });

            @if (!Model.EstimateIsLocked)
        {
            <text>
            $("#btnAddNewManual").click(function () {

                _closeAfterSaving = false;

                $("#graphical-page-stuff").hide();
                $("#graphic-top-row").hide();

                $("#MEDetails").show();
                clearFieldsOnly();

                HideTopRow();

                EnableDisableControlOnOperationType($("#ManualEntry_Details_OperationType").val());
            });
            </text>
        }

            @if (!Model.EstimateIsLocked)
            {
                <text>
                $("#btnPDR").click(function () {
                    ShowPDRPopup();
                });
                </text>
            }

            @if (Model.ShowCarryUpMessage)
            {
                <text>
                ShowUserMessage("&#60;h2&#62;Carry-up Service&#60;/h2&#62;  Specific vehicle not yet available.  The previous model year will be used since there have been no reported major changes.  Some minor differences in parts data are possible.  Please contact your local supplier to verify part numbers and prices.", true, 15000);
                </text>
            }

            var treeviewheight = '345';
            // Set up the draggable split bar
            var bottomElem = $(".resizable-bottom");
            var bottomElemOriginalHeight = bottomElem.height();
            var linePreviewListResized = false;
            $(".resizable-top").resizable({
                handles: 's',
                resize: function (event, ui) {
                    linePreviewListResized = false;
                    console.log('AddPartsGrahpically.cshtml');
                    var bottomHeight = bottomElemOriginalHeight - (ui.element.outerHeight() - ui.originalSize.height);

                    // Ensure the height of the line preview section is not less than 30px
                    var overLimitAmount = bottomHeight - 30;
                    if (overLimitAmount < 0) {
                        bottomHeight += overLimitAmount * -1;
                        ui.element.outerHeight(ui.element.outerHeight() + overLimitAmount);
                    }

                    bottomElem.height(bottomHeight);

                    // If the Manual Entry form is showing, we need to manually set the bottom position of the form-container div
                    $(".form-container").css("bottom", (bottomHeight) + "px");

                    bottomHeightPct = ($(".resizable-bottom").height() / ($(".resizable-bottom").height() + $(".resizable-top").height())) * 100;
            },
            stop: function(event, ui) {
                bottomElemOriginalHeight = bottomElem.height();
                linePreviewListResized = true;
            }
        });

        bottomHeightPct = ($(".resizable-bottom").height() / ($(".resizable-bottom").height() + $(".resizable-top").height())) * 100;
        var bottomHeight = $(".resizable-bottom").height();
        $(".form-container").css("bottom", bottomHeight + "px");

        @if (Model.PDRAutoOpen)
        {
            <text>
            // Auto Open PDR
            ShowPDRPopup();
            </text>
        }

        var uiTop = $('.resizable-top');
        var topHeaderHeight = $(window).height() - uiTop.height() - bottomElem.height();
        $(window).on("resize", function(){

            // If the line preview list was resized - and then the window was resized, adjust the top height to ensure the list is always on the screen
            if (linePreviewListResized) {
                uiTop.height($(window).height() - topHeaderHeight - bottomElem.height());
            }

            ResizeTreeViewHeight();
        });

        $(".ui-resizable-handle.ui-resizable-s").on("dblclick", function (e) {
            ResizeTreeViewHeight();
        });

        $(".ui-resizable-handle.ui-resizable-s").on("click", function (e) {
            ResizeTreeViewHeight();
        });

        $(window).keydown(function(e){
            if (e.key == "Enter" && $("#part-search-container").is(":visible"))
            {
                RefreshSectionsGrid();
            }
        });

        @if (!Model.EstimateIsLocked)
        {
            <text>
            $("#btnPartsSearch").click(function() {
                TogglePartsSearch();
            });
            </text>
        }

        $("#btnSearchClose").click(function() {
            HideSearch();
            ResizeTreeViewHeight();
        });

        $("#btnSearch").click(function () {
            RefreshSectionsGrid();
        });

        $(".btnSearchAdd").click(function () {
            if (_partsSearchBarcode) {
                MultiPartAddClick(_partsSearchBarcode);

                ClearPartSearch();
            }
        });

        $("#printPartsImg").click(function () {

            $.getJSON("@Url.Action("GetEstimateHeaderInfo", "Estimate")", { userID: @ViewBag.UserID, estimateID: estimateID }, function (data) {

                printWindow = window.open ("", "PrintPartWindow", "location=1,status=1,scrollbars=1,width=600,height=600");

                var printPartsHeader = "@Proestimator.Resources.ProStrings.CurrentEstimate @ViewBag.EstimateID";
                printPartsHeader = printPartsHeader + "&nbsp;|&nbsp; @Proestimator.Resources.ProStrings.EstimateNum " + data.EstimateNumber;
                printPartsHeader = printPartsHeader + "&nbsp;|&nbsp; " + data.StatusName;
                printPartsHeader = printPartsHeader + "&nbsp;|&nbsp; " + data.CustomerName;
                printPartsHeader = printPartsHeader + "&nbsp;|&nbsp; " + data.VehicleName;
                printPartsHeader = printPartsHeader + "&nbsp;|&nbsp; " + data.Vin;
                printPartsHeader = printPartsHeader + "&nbsp;|&nbsp; " + data.EstimateTotal;

                if (data.IsTotalLoss)
                {
                    printPartsHeader = printPartsHeader + "&nbsp;|&nbsp; <span style='padding-left: 5px; color: red; text-align: center;'>@Proestimator.Resources.ProStrings.TotalLoss</span>";
                }

                $("#printImg").attr("style","max-width: 60%; max-height: 60%;");

                @if (ViewBag.UseLegacyPartsSectionDropdown) {
                    <text>
                printWindow.document.write("<head><title>" + $("#sectionSelect option:selected").text() + "</title></head>");
                    </text>

                }
                else {
                    <text>
                printWindow.document.write("<head><title>" + selectedNodeText + "</title></head>");
                    </text>
                }

                printWindow.document.write(printPartsHeader);

                @if (ViewBag.UseLegacyPartsSectionDropdown) {
                    <text>
                printWindow.document.write("<p><b>Parts Section : </b> " + $("#sectionSelect option:selected").text() + "</p>");
                    </text>

                }
                else {
                    <text>
                printWindow.document.write("<p><b>Parts Section : </b> " + selectedNodeText + "</p>");
                    </text>
                }
                printWindow.document.write("<div style='width:100%;'>");
                printWindow.document.write($("#printImgContainer").html());
                printWindow.document.write("</div>");
                printWindow.document.close();
                printWindow.print();
                //printWindow.close();
            });
        });

        $("#checkShowAllYears").change(function() {

            @if (ViewBag.UseLegacyPartsSectionDropdown) {
                <text>
                    var ignoreYears = $("#checkShowAllYears").is(":checked");

                    $.getJSON("@Url.Action("GetSectionsDropDown", "Estimate")", { userID: @ViewBag.UserID, estimateID: @Model.EstimateID, ignoreYearFilter: ignoreYears }, function (data) {
                        var sectionList = $("#sectionSelect");
                        sectionList.empty();

                        $(data).each(function (i, item) {
                            sectionList.append("<option value='" + item.Value + "'>" + item.Text + "</option>")
                        });

                        _partsPopulated = false;
                        LoadSectionData();
                        RefreshPartsAndLaborButton();

                        RefreshArrowNote();
                    });
                </text>
            }
            else {
                <text>
                    var grid = GetSectionsListTreeControl();

                    if (grid) {
                        grid.dataSource.read();
                    }

                    _partsPopulated = false;
                    LoadSectionData();
                    RefreshPartsAndLaborButton();

                    RefreshArrowNote();
                </text>
            }

        });

        // The Parts Search button in the main menu should open up the parts search on this page
        @if (!Model.EstimateIsLocked)
        {
            <text>
            $("#mainMenuPartsSearch").attr("onclick", "TogglePartsSearch()");
            </text>
        }

            ResizeTreeViewHeight();
        });

     function sectionsListTreeControl_DataBound(e) {
         sectionsListTreeControl = GetSectionsListTreeControl();
         sectionsListTreeControl.text("Please select a parts section");

         // Check if DropDownTree fully bound
         var dropdowntree = e.sender;
         var dataSource = dropdowntree.dataSource;
         var nodetoregister = e.node;

         if (!nodetoregister) {
             var children = dataSource.data();

             children.forEach(function (item, index) {
                 if (item.hasChildren) {
                     counter++;
                 }
             });
         } else {
             var children = dropdowntree.treeview.dataItem(nodetoregister).children.data();

             children.forEach(function (item, index) {
                 if (item.hasChildren) {
                     counter++;
                 }
             });

             counter--;
         }

         if (counter === 0) {
             console.log("dropdowntree fully bound.");

             sectionsListTreeControl_mobile_expand(sectionsListTreeControl);
         }
     }

    function sectionsListTreeControl_mobile_expand(sectionsListTreeControl) {

        var sectionsListTreeControlLength = sectionsListTreeControl.tree[0].childNodes[0].childNodes.length;

        for (var i = 0; i < sectionsListTreeControlLength; i++) {

            if (sectionsListTreeControl.tree[0].childNodes[0].childNodes[i].firstChild.firstChild.className == 'k-icon k-i-expand') {

                $(sectionsListTreeControl.tree[0].childNodes[0].childNodes[i].firstChild.firstChild).on('click', function (event) {

                    //sectionsListTreeControl._selectItemByText(event.target.nextSibling.childNodes[0].nodeValue);

                    console.log('event.target.nextSibling.childNodes[0].nodeValue : ' + event.target.nextSibling.childNodes[0].nodeValue);

                    var itemScrollTop = event.target.offsetTop;

                    $('div.k-treeview').animate({
                        scrollTop: itemScrollTop - 10
                    }, 'slow');

                })
            }
        }
    }

    function RefreshArrowNote() {
        var ignoreYears = $("#checkShowAllYears").is(":checked");

        @if (@ViewBag.UseLegacyPartsSectionDropdown) {
            <text>
            if (ignoreYears)
            {
                $("#deselectArrowNote").text('@(Proestimator.Resources.ProStrings.DeselectAllYears)');
            }
            else
            {
                $("#deselectArrowNote").text("Select to show all years");
            }
            </text>
        }
        else {
            <text>
            if (ignoreYears)
            {
                $("#checkShowAllYears").text('@(Proestimator.Resources.ProStrings.DeselectAllYears)');
            }
            else
            {
                $("#checkShowAllYears").text('@(Proestimator.Resources.ProStrings.SelectToShowAllYears)');
            }
            </text>
        }
    }

    var _lastWindowWidth = 0, _lastWindowHeight = 0;

    function DisplayImage(linkClickPos)
    {
        var selectedIndex = linkClickPos - 1;

        var drop = $('#imgDropdown');
        drop.empty();

        for (index = 0; index < totalImageHotSpots; index++) {
            if(selectedIndex != index)
                drop.append('<li class="table-button" style="cursor: pointer;margin-right:5px;" onclick="DisplayImage('+ (parseInt(index) + parseInt(1)) + ')">' + (parseInt(index) + parseInt(1)) + '</li>');
            else
                drop.append('<li class="table-button" style="cursor: pointer;margin-right:5px; background:#5b9133;font-weight: bold;" onclick="DisplayImage('+ (parseInt(index) + parseInt(1)) + ')">' + (parseInt(index) + parseInt(1)) + '</li>');
        }

        LoadCachedImage(selectedIndex);
    }

    function ShowPDRPopup()
    {
        RefreshPDRAutoExpanded();

        $("#PDRMatrixContainer").fadeIn(300, function () {
            $("#graphical-page-stuff").hide();
            $("#graphic-top-row").hide();
        });

        HideTopRow();
    }

    function HidePDR()
    {
        $("#PDRMatrixContainer").fadeOut(300, function () {
            $(".graphical-container").css("top", "70px");
            $("#graphical-page-stuff").fadeIn(300);
            $(".graphic-top-row").fadeIn(300);

            $(".resizable-bottom").css("height", bottomHeightPct + '%');
            $(".resizable-top").css("height", (100 - bottomHeightPct) + '%');
        });

        ScrollToDetail();
    }

    function ScreenIsSmall() {
        var sizeDetectorVisible = $(".size-detector").is(":visible");
        return !sizeDetectorVisible;
    }

     function RefreshPartsAndLaborButton() {

        @if (@ViewBag.UseLegacyPartsSectionDropdown) {
        <text>
            if ($("#sectionSelect").val() > 0) {
                $(".partsLaborButton").show();
            }
            else {
                $(".partsLaborButton").hide();
         }
         </text>
        }
        else {
        <text>
            if (selectedNodeIdValue > 0) {
                $(".partsLaborButton").show();
            }
            else {
                $(".partsLaborButton").hide();
            }
        </text>
        }
    }

    var _estimateIsLocked = @Model.EstimateIsLocked.ToString().ToLower();

    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    // Parts Search
    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    var _partsSearchSectionKey = 0;
    var _partsSearchDescription = "";
    var _partsSearchBarcode = "";
    var _partsSearchShown = false;

    function ShowSearch()
    {
        $("#part-search-container").show();
        $("#sectionSearchContainer").hide();

        $("#imageContainer").hide();
        $("#btnRowContainer").hide();

        $("#SearchText").focus();

        // For mobile hides stuff behind the modal form
        $(".graphical-header").addClass("page-container-hide");
        $("#sectionSearchContainer").addClass("page-container-hide");
        $("#imageContainer").addClass("page-container-hide");
        $("#btnRowContainer").addClass("page-container-hide");
        $("#MEDetails").addClass("page-container-hide");
        $("#PartsAndLaborContainer").addClass("page-container-hide");
        $("#PartInformation").addClass("page-container-hide");

        ClearPartSearch();

        _partsSearchShown = true;
    }

    function HideSearch()
    {
        $("#part-search-container").hide();
        $("#sectionSearchContainer").show();

        $("#imageContainer").show();
        $("#btnRowContainer").show();

        // For mobile shows stuff behind the modal form
        $(".graphical-header").removeClass("page-container-hide");
        $("#sectionSearchContainer").removeClass("page-container-hide");
        $("#imageContainer").removeClass("page-container-hide");
        $("#btnRowContainer").removeClass("page-container-hide");
        $("#MEDetails").removeClass("page-container-hide");
        $("#PartsAndLaborContainer").removeClass("page-container-hide");
        $("#PartInformation").removeClass("page-container-hide");

        _partsSearchShown = false;
        $(".search-button-add-wrapper").hide();
        _partsSearchBarcode = "";
    }

    function TogglePartsSearch() {
        if (_partsSearchShown === true) {
            HideSearch();
        }
        else {
            ShowSearch();
        }
    }

    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    // The sections grid.
    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    function RefreshSectionsGrid() {
        _partsSearchSectionKey = 0;
        _partsSearchDescription = "";
        _partsSearchBarcode = "";

        var grid = $("#sections-grid").data("kendoGrid");

        if (grid) {
            grid.dataSource.read();
        }

        $("#SectionsGridContainer").show();
        $("#PartsGridContainer").hide();
        $("#DetailsGridContainer").hide();
        $(".search-button-add-wrapper").hide();
    }

    function GetSectionSearchParameters() {
        var result =
        {
             userID: @ViewBag.UserID
           , estimateID: @Model.EstimateID
           , year: 0
           , make: 0
           , model: 0
           , searchText: $("#SearchText").val()
           , searchPartNumber: $("#SearchPartNumber").val()
        };

        return result;
     }

     function GetTreeSectionSearchParameters() {

        var ignoreYears = $("#checkShowAllYears").is(":checked");
        var sectionsListTreeControl = GetSectionsListTreeControl();

        var result =
        {
             userID: @ViewBag.UserID
           , estimateID: @Model.EstimateID
           , ignoreYearFilter: ignoreYears
           , sectionsListTreeControlTypeId: sectionsListTreeControl.element[0].id
        };

        return result;
    }

    function SectionsGridDataChanged(arg) {

        // Wire up hilighting the row when hovering.
        $("#sections-grid tbody tr").hover(
            function () {
                // Get the hovered row and its LineItemPreview data
                var row = $(this).closest("tr");
                var partID = row.find("td").first().html();

                row.toggleClass("k-state-hover");
            }
        );

        // If there's one row, select it
        if ($("#sections-grid").data("kendoGrid").dataSource.total() == 1)
        {
            $("#sections-grid").data("kendoGrid").select($("#sections-grid").find("tbody").find("tr").first());
        }
    }

        var parentItem = '';
        var childItem = '';
    function SectionsGridLineSelectionChanged(arg) {

        // Remove the Hover state from all rows
        $(".k-state-hover").each(function (index) {
            $(this).removeClass("k-state-hover");
        });

        // Get the selected item and call the ClickedItem event
        var row = $("#sections-grid").find(".k-state-selected").first();
        _partsSearchSectionKey = row.find("td").first().html();

        $("#PartsGridContainer").hide();
        $("#DetailsGridContainer").hide();

        RefreshPartsGrid();

        @if (ViewBag.UseLegacyPartsSectionDropdown) {
            <text>
                $("#sectionSelect").val(_partsSearchSectionKey);
            </text>
        }
        else {
            <text>
            if (sectionsListTreeControl.element != null) {

                var getitem = sectionsListTreeControl.dataSource.get(_partsSearchSectionKey);
                var selectitem = null;
                if (sectionsListTreeControl.element[0].id == "sectionslisttreeview") {
                    if (getitem != undefined) {
                        sectionsListTreeControl.findByUid(getitem.uid);
                        selectitem = sectionsListTreeControl.findByUid(getitem.uid);
                        if (selectitem != undefined) {
                            sectionsListTreeControl.select(selectitem);
                            if (sectionsListTreeControl.parent(selectitem)[0] != undefined) {
                                var searchedSelectedVal = row.find("td")[1].innerText;
                                var searchedSelectedValArr = searchedSelectedVal.split("\\");
                                parentItem = $.trim(searchedSelectedValArr[0]);
                                childItem = $.trim(searchedSelectedValArr[1]);
                                sectionsListTreeControl.expand(sectionsListTreeControl.findByText(sectionsListTreeControl.parent(selectitem)[0].firstChild.innerText));
                                parentItem = '';
                                childItem = '';
                            }
                        }

                    }
                }

                if (sectionsListTreeControl.element[0].id == "sectionslistdropdowntree") {

                    sectionsListTreeControl.text(getitem.Text);

                    if (getitem.parentNode() != undefined) {
                        var parentNode = sectionsListTreeControl.treeview.findByUid(getitem.parentNode().uid)[0];

                        if (parentNode != undefined) {
                            // parentNode.firstChild.firstElementChild
                            if (parentNode.firstChild.firstElementChild.className == 'k-icon k-i-collapse') {
                                parentNode.firstChild.firstElementChild.className = 'k-icon k-i-expand';
                            }
                            else if (parentNode.firstChild.firstElementChild.className == 'k-icon k-i-expand') {
                                parentNode.firstChild.firstElementChild.className = 'k-icon k-i-collapse';
                            }

                            //console.log(parentNode.firstChild.childNodes[1]);
                            parentNode.firstChild.childNodes[1].className = 'k-in';

                            // parentNode.childNodes[1]
                            if (parentNode.childNodes[1]['style']['display'] == 'none') {
                                //debugger;
                                parentNode.childNodes[1]['style']['display'] = 'block';
                                parentNode.childNodes[1]['style']['overflow'] = 'visible';
                                parentNode.childNodes[1]['style']['height'] = 'auto';
                                parentNode.setAttribute('aria-expanded', 'true');
                                parentNode.setAttribute('data-expanded', 'true');
                            }
                            else if (parentNode.childNodes[1]['style']['display'] == 'block') {
                                //debugger;
                                parentNode.childNodes[1]['style']['display'] = 'none';
                                parentNode.childNodes[1]['style']['overflow'] = 'visible';
                                parentNode.childNodes[1]['style']['height'] = 'auto';
                                parentNode.setAttribute('aria-expanded', 'false');
                                parentNode.setAttribute('data-expanded', 'false');
                            }
                        }
                    }
                }

                selectedNodeIdValue = _partsSearchSectionKey;

        }
            </text>
        }

        _partsPopulated = false;
        LoadSectionData();
        RefreshPartsAndLaborButton();
    }

        function ResizeTreeViewHeight() {


            @if (!ViewBag.UseLegacyPartsSectionDropdown)
            {
                if (!ViewBag.IsMobileDevice)
                {

                    <text>

            console.log('$("#imgAreaContainer").offset().top : ' + $("#imgAreaContainer").offset().top);
            console.log('$("#sectionslisttreeview").css("height") : ' + $("#sectionslisttreeview").css("height"));
            console.log('$("#sectionslisttreeview").offset().top : ' + $("#sectionslisttreeview").offset().top);

                if (parseInt($("#imgAreaContainer").offset().top) <= (parseInt($("#sectionslisttreeview").css("height").replace("px", "")) + parseInt($("#sectionslisttreeview").offset().top))) {


                            var resizableHandleTop = $(".ui-resizable-handle").offset().top;
                            var sectionslisttreeviewTop = $("#sectionslisttreeview").offset().top;

                            var calculateHeightToReduce = 0;
                            if ($('#btnPartsSearch').css('display') != 'none') {
                                calculateHeightToReduce = calculateHeightToReduce + 30 + 10;
                            }

                            @if (Model.EstimateIsImported)
                            {
                                <text>
                                    calculateHeightToReduce = calculateHeightToReduce + parseInt($("#estimateIsImported").css("height").replace("px", "")); // this is for line note
                                </text>
                            }

                            @if (Model.HasPartsNowContract)
                            {
                                <text>
                                    calculateHeightToReduce = calculateHeightToReduce + 30; // btnPartsNow
                                </text>
                            }

                            var sectionslisttreeviewHeight = resizableHandleTop - sectionslisttreeviewTop - 30 - calculateHeightToReduce;
                            $('#sectionslisttreeview').css("height", sectionslisttreeviewHeight + "px");
                        }

                   </text>
                }
            }
        }

    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    // The Parts grid.
    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    function RefreshPartsGrid() {

        var grid = $("#parts-grid").data("kendoGrid");

        if (grid) {
            grid.dataSource.read();
        }

        $("#PartsGridContainer").show();
        $(".search-button-add-wrapper").hide();
    }

    function GetPartSearchParameters() {
        var result =
        {
             userID: @ViewBag.UserID
           , estimateID: @Model.EstimateID
           , year: 0
           , make: 0
           , model: 0
           , searchText: $("#SearchText").val()
           , searchPartNumber: $("#SearchPartNumber").val()
           , sectionKey: _partsSearchSectionKey
        };

        return result;
    }

    function PartsGridDataChanged(arg) {

        // Wire up hilighting the row when hovering.
        $("#parts-grid tbody tr").hover(
            function () {
                // Get the hovered row and its LineItemPreview data
                var row = $(this).closest("tr");
                var partID = row.find("td").first().html();

                row.toggleClass("k-state-hover");
            }
        );

        // If there's one row, select it
        if ($("#parts-grid").data("kendoGrid").dataSource.total() == 1)
        {
            $("#parts-grid").data("kendoGrid").select($("#parts-grid").find("tbody").find("tr").first());
        }
    }

    function PartsGridLineSelectionChanged(arg) {

        // Remove the Hover state from all rows
        $("#parts-grid").find(".k-state-hover").each(function (index) {
            $(this).removeClass("k-state-hover");
        });

        // Get the selected item and call the ClickedItem event
        var row = $("#parts-grid").find(".k-state-selected").first();
        _partsSearchDescription = row.find("td").first().html();

        RefreshDetailsGrid();
    }

    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    // The Details grid.
    // -------------------------------------------------------------------------------------------------------------------------------------------------------
    function RefreshDetailsGrid() {

        var grid = $("#details-grid").data("kendoGrid");

        if (grid) {
            grid.dataSource.read();
        }

        $("#DetailsGridContainer").show();
        $(".search-button-add-wrapper").hide();
        _partsSearchBarcode = "";
    }

    function GetDetailsSearchParameters() {
        var result =
        {
             userID: @ViewBag.UserID
           , estimateID: @Model.EstimateID
           , year: 0
           , make: 0
           , model: 0
           , searchText: $("#SearchText").val()
           , searchPartNumber: $("#SearchPartNumber").val()
           , sectionKey: _partsSearchSectionKey
           , partDescription: _partsSearchDescription
        };

        return result;
    }

    function DetailsGridDataChanged(arg) {

        // Wire up hilighting the row when hovering.
        $("#details-grid tbody tr").hover(
            function () {
                // Get the hovered row and its LineItemPreview data
                var row = $(this).closest("tr");
                var partID = row.find("td").first().html();

                row.toggleClass("k-state-hover");
            }
        );

        // If there's one row, select it
        if ($("#details-grid").data("kendoGrid").dataSource.total() == 1)
        {
            $("#details-grid").data("kendoGrid").select($("#details-grid").find("tbody").find("tr").first());
        }
    }

    function DetailsGridLineSelectionChanged(arg) {

        // Remove the Hover state from all rows
        $("#parts-grid").find(".k-state-hover").each(function (index) {
            $(this).removeClass("k-state-hover");
        });

        // Get the selected item and call the ClickedItem event
        var row = $("#details-grid").find(".k-state-selected").first();
        _partsSearchBarcode = row.find("td").first().html();

        if (_partsSearchBarcode)
        {
            $(".search-button-add-wrapper").show();
        }
    }

    function ClearPartSearch() {
        $("#SearchText").val("");
        $("#SearchPartNumber").val("");

        $("#SectionsGridContainer").hide();
        $("#PartsGridContainer").hide();
        $("#DetailsGridContainer").hide();

        $("#SearchText").select();
        //RefreshSectionsGrid();
        }

    </script>
}
