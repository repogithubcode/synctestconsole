@model Proestimator.ViewModel.ImagesVM

@using System.Linq;
@using Kendo.Mvc.UI;
@using Proestimator.ViewModel;

@{
    ViewBag.Title = Proestimator.Resources.ProStrings.PageTitle_Images;

    string imageTemplate = "<div id='ThumbWrapper#ImageID#' class='thumb-wrapper'><div id='thumbinput#ImageID#' class='thumbinput'><input type='checkbox' id='Include#ImageID#' class='thumb-include' data-imageid='#ImageID#' #Selected# /></div><div id='thumbimage#ImageID#' class='thumbimage'><img id='Thumbnail#ImageID#' src=\"#ImagePath#\" onclick=\"LoadImageDetailsAfterConfirm(#ImageID#);\"/></div></div>";
}

<div id="imageTemplate" style="display: none;">
    @Html.Raw(imageTemplate)
</div>



<script type="text/javascript" src="~/Scripts/tui-code-snippet.min.js"></script>
<script type="text/javascript" src="~/Scripts/tui-color-picker.min.js"></script>
<script type="text/javascript" src="~/Scripts/tui-image-editor.js"></script>
<script type="text/javascript">



    var _imageID = 0;
    var _isRotating = false;
    var _currentPageIndex = 1;
    var _isModelPopup = false;
    var popupWidth = 0;
    var popupHeight = 0;
    var path = "";
    var _imageEditor;

    function LoadImageDetails(imageID)
    {
        _isModelPopup = '@Model.IsModelPopup';

        if(_isModelPopup == 'True')
        {
            applyLoadingPopup();
        }

        $("#DetailsContainer").fadeOut(300, function () {
        $.getJSON("@Url.Action("GetImageDetails", "Estimate")", { userID: @ViewBag.UserID, imageID: imageID, loginID: @ViewBag.LoginID, estimateID: $("#EstimateID").val(), selectedPageIndex: _currentPageIndex }, function (data) {
            if (data.ImageID > 0) {
                $("#DetailsContainer").fadeIn(300);

                var imgPath = data.ImagePath + "?r=" + Math.random();
                if (imgPath.includes("_edit.")) {
                    $('#btn-clear').show();
                }
                else {
                    $('#btn-clear').hide();
                }

                @if (Model.HasImagesContract)
                {
                    <text>
                        popupWidth = data.ImageExtra.Width;
                        popupHeight = data.ImageExtra.Height;

                        //$(".tui-image-editor-canvas-container").width(popupWidth);
                        //$(".tui-image-editor-canvas-container").height(popupHeight);
                        var imageEditorWidth = $(".tui-image-editor").width();

                        var heightPercent = (popupHeight / popupWidth) * 100;

                        var newHeight = imageEditorWidth * (popupHeight / popupWidth);

                        console.log("Set dimensions " + popupWidth + ", " + popupHeight + "  HeightPercent: " + heightPercent + "  NewHeight: " + newHeight);


                        _imageEditor.loadImageFromURL(imgPath, imgPath).then(function () {
                            _imageEditor.clearUndoStack();

                            //$(".tui-image-editor-canvas-container").height(newHeight);
                        });
                    </text>
                }
                else
                {
                    <text>
                        $("#imgImage").attr("src", imgPath);
                    </text>
                }

                path = data.ImagePath.replace("_thumb", "") + "?r=" + Math.random();

                if (_imageID > 0) {
                    $("#Thumbnail" + _imageID).removeClass("ImageSelected");
                }
                $("#Thumbnail" + imageID).addClass("ImageSelected");
                _imageID = imageID;

                $("#ImageTag").val(data.ImageTag);
                $("#ImageTagCustom").val(data.ImageTagCustom);

                $("#lblFileSummary").text(data.ImageExtra.Width + " x " + data.ImageExtra.Height + " pixels     " + data.ImageExtra.DiskSize);



                if (data.FileExtension === "pdf")
                {
                    $("#RotatePDFImageRow").show();
                    $("#RotateImageRow").hide();

                    $("#SelectPageContainer").empty();
                    var ddlTotalPageCount = "<select id='ddlTotalPageCount' name='ddlTotalPageCount' onchange='onChangeSelectPage()'>";
                    for (pageIndex = 1; pageIndex <= data.PDFPageCount; pageIndex++) {

                        if(pageIndex == _currentPageIndex)
                        {
                            ddlTotalPageCount = ddlTotalPageCount + "<option selected value='" + pageIndex + "'>" + pageIndex + "</option>";
                        }
                        else
                        {
                            ddlTotalPageCount = ddlTotalPageCount + "<option value='" + pageIndex + "'>" + pageIndex + "</option>";
                        }
                    }
                    ddlTotalPageCount = ddlTotalPageCount + "</select>";
                    $("#SelectPageContainer").append(ddlTotalPageCount);

                    $("#PageDDLContainer").show();
                    _currentPageIndex = 1;
                }
                else {

                    $("#RotatePDFImageRow").hide();
                    $("#RotateImageRow").show();

                    $("#PageDDLContainer").hide();
                }

                if ($("#SupplementVersion").context.childNodes.length > 1)
                {
                    $("#SupplementVersionDiv").show();
                    $("#SupplementVersion").val(data.SupplementVersion);
                }
                else{
                    $("#SupplementVersionDiv").hide();
                }
            } else {
                showMessage(imageID, data.ErrorMessage);
            }

            if(_isModelPopup == 'True')
            {
                removeLoadingPopup();
            }

            RefreshDetailsContainerHeight();
        });
        });
    }

    function imageEvents() {

        @if (Model.HasImagesContract)
        {
            <text>

        var activeObjectId;
        var activeObjectType = "undefined";
        var displayingSubMenu = $();
        var x = new Array(4);
        var y = new Array(4);

        $('.menu-item').filter('.activatable').on('click', function () {
            $('.menu-item').filter('.activatable').removeClass('active');
            if ($(this).attr('id') != 'btn-rotation-left' && $(this).attr('id') != 'btn-rotation-right') {
                $(this).addClass('active');
            }
            removeState();
        });

        $('#btn-undo').on('click', function () {
            displayingSubMenu.hide();

            if (!$(this).hasClass('disabled')) {
                _imageEditor.discardSelection();
                _imageEditor.undo();
            }
        });

        $('#btn-redo').on('click', function () {
            displayingSubMenu.hide();

            if (!$(this).hasClass('disabled')) {
                _imageEditor.discardSelection();
                _imageEditor.redo();
            }
        });

        $('.close').on('click', function () {
            _imageEditor.stopDrawingMode();
            displayingSubMenu.hide();
            $('.menu-item').filter('.activatable').removeClass('active');
            RefreshDetailsContainerHeight();
        });

        $('#btn-crop').on('click', function () {
            _imageEditor.startDrawingMode('CROPPER');
            displayingSubMenu.hide();
            displayingSubMenu = $('#crop-sub-menu').show();
            RefreshDetailsContainerHeight();
        });

        $('#btn-apply-crop').on('click', function () {
            _imageEditor.crop(_imageEditor.getCropzoneRect()).then(function () {
                _imageEditor.stopDrawingMode();
            });
            displayingSubMenu.hide();
            $('.menu-item').filter('.activatable').removeClass('active');
        });

        $('#btn-add-icon').on('click', function () {
            displayingSubMenu.hide();
            displayingSubMenu = $('#icon-sub-menu').show();
            activateIconMode();
        });

        $('.icon-text').on('click', function (event) {
            var element = event.target || event.srcElement;
            var iconType = $(element).attr('data-icon-type');

            var canvasSize = _imageEditor.getCanvasSize();
            var newX = canvasSize.width / 2;
            var newY = canvasSize.height / 2;
            var strokeWidth = 5;
            var initSize = 100;

            if (iconType == 'circle') {
                _imageEditor
                    .addShape(iconType, {
                        stroke: $('.tui-colorpicker-palette-hex').val(),
                        fill: 'transparent',
                        left: newX,
                        top: newY,
                        strokeWidth: strokeWidth,
                        rx: initSize,
                        ry: initSize
                    });
            }
            else if (iconType == 'rect') {
                _imageEditor
                    .addShape(iconType, {
                        stroke: $('.tui-colorpicker-palette-hex').val(),
                        fill: 'transparent',
                        left: newX,
                        top: newY,
                        strokeWidth: strokeWidth,
                        width: initSize,
                        height: initSize
                    });
            }
            else {
                _imageEditor
                    .addIcon(iconType, {
                        stroke: $('.tui-colorpicker-palette-hex').val(),
                        fill: $('.tui-colorpicker-palette-hex').val(),
                        left: newX,
                        top: newY,
                    });
            }
        });

        $('#btn-text').on('click', function () {
            displayingSubMenu.hide();
            displayingSubMenu = $('#text-sub-menu').show();
            activateTextMode();
        });

        $('#icon-size-range').on('change', function () {
            _imageEditor.changeShape(activeObjectId, {
                strokeWidth: parseInt(this.value / 10, 10),
            });
        });

        $('#btn-clear').on('click', function () {
            confirmOriginal();
        });

        $('#btn-rotation-left').on('click', function () {
            _imageEditor.stopDrawingMode();
            displayingSubMenu.hide();
            _imageEditor.rotate(-90);
        });

        $('#btn-rotation-right').on('click', function () {
            _imageEditor.stopDrawingMode();
            displayingSubMenu.hide();
            _imageEditor.rotate(90);
        });

        //for text size bar
        $(document).on('input', '#input-font-size-range', function () {
            if (activeObjectType === 'i-text') {
                _imageEditor.changeTextStyle(activeObjectId, {
                    fontSize: parseInt(this.value, 10),
                });
            }
        });

        //bold,italic,...
        $('.btn-text-style').on('click', function (e) {
            var styleType = $(this).attr('data-style-type');
            var styleObj;

            e.stopPropagation();

            switch (styleType) {
                case 'b':
                    styleObj = { fontWeight: 'bold' };
                    break;
                case 'i':
                    styleObj = { fontStyle: 'italic' };
                    break;
                case 'u':
                    styleObj = { underline: true };
                    break;
                case 'l':
                    styleObj = { textAlign: 'left' };
                    break;
                case 'c':
                    styleObj = { textAlign: 'center' };
                    break;
                case 'r':
                    styleObj = { textAlign: 'right' };
                    break;
                default:
                    styleObj = {};
            }

            _imageEditor.changeTextStyle(activeObjectId, styleObj);
        });

        var textColorpicker = tui.colorPicker.create({
            container: $('#tui-text-color-picker')[0],
            color: '#000000',
            preset: ['#000000', '#808080', '#FF0000', '#00FF00', '#FFFF00', '#0000FF', '#8F00FF', '#FFFFFF'],
        });
        textColorpicker.on('selectColor', function (event) {
            if (activeObjectType === 'i-text') {
                _imageEditor.changeTextStyle(activeObjectId, {
                    fill: event.color,
                });
            }
        });

        var iconColorpicker = tui.colorPicker.create({
            container: $('#tui-icon-color-picker')[0],
            color: '#000000',
            preset: ['#000000', '#808080', '#FF0000', '#00FF00', '#FFFF00', '#0000FF', '#8F00FF', '#FFFFFF'],
            detailTxt: 'Detail',
        });

        iconColorpicker.on('selectColor', function (event) {
            if (activeObjectType !== 'i-text' && activeObjectType !== 'undefined') {
                if (_imageEditor.getObjectProperties(activeObjectId, 'fill').fill == 'transparent') {
                    _imageEditor.changeShape(activeObjectId, {
                        stroke: event.color
                    });
                }
                else {
                    _imageEditor.changeShape(activeObjectId, {
                        stroke: event.color,
                        fill: event.color
                    });
                }
            }
        });

        var widthMultiplier = 0.7;

        @if (ViewBag.IsMobileDevice)
        {
            <text>
            widthMultiplier = 1;
            </text>
        }

        _imageEditor = new tui.ImageEditor('.tui-image-editor', {
            cssMaxWidth: $('#DetailsContainer').width() * widthMultiplier,
            selectionStyle: {
                cornerSize: 50,
                rotatingPointOffset: 100,
            },
        });

        _imageEditor.on('addText', function (pos) {
            _imageEditor
                .addText('Any Text', {
                    position: pos.originPosition,
                });
        });
        _imageEditor.registerIcons({
            circle: 'M 30.50,16.00 C 30.50, 24.01 24.01, 30.50 16.00, 30.50 7.99, 30.50 1.50, 24.01 1.50, 16.00 1.50, 7.99 7.99, 1.50 16.00, 1.50 24.01, 1.50 30.50, 7.99 30.50, 16.00 Z',
            square: 'M 28.50, 2.50 C 29.05, 2.50 29.50, 2.95 29.50, 3.50 29.50, 3.50 29.50, 28.50 29.50, 28.50 29.50, 29.05 29.05, 29.50 28.50, 29.50 28.50, 29.50 3.50, 29.50 3.50, 29.50 2.95, 29.50 2.50, 29.05 2.50, 28.50 2.50, 28.50 2.50, 3.50 2.50, 3.50 2.50, 2.95 2.95, 2.50 3.50, 2.50 3.50, 2.50 28.50, 2.50 28.50, 2.50 Z',
        });

        _imageEditor.on('undoStackChanged', function (length) {
            if (length) {
                $('#btn-undo').removeClass('disabled');
            } else {
                $('#btn-undo').addClass('disabled');
            }
        });

        _imageEditor.on('redoStackChanged', function (length) {
            if (length) {
                $('#btn-redo').removeClass('disabled');
            } else {
                $('#btn-redo').addClass('disabled');
            }
        });

        _imageEditor.on('objectActivated', function (obj) {
            activeObjectId = obj.id;
            activeObjectType = obj.type;
            if (obj.type === 'icon' || obj.type === 'circle' || obj.type === 'rect') {
                displayingSubMenu.hide();
                displayingSubMenu = $('#icon-sub-menu').show();
                $('.menu-item').filter('.activatable').removeClass('active');
                $('#btn-add-icon').addClass('active');
                if (obj.type === 'icon') {
                    $('#icon-size-range').val(obj.strokeWidth * 10);
                }
                else {
                    $('#icon-size-range').val(obj.width);
                }
                iconColorpicker.setColor(obj.stroke);
                activateIconMode();
            } else if (obj.type === 'i-text') {
                displayingSubMenu.hide();
                displayingSubMenu = $('#text-sub-menu').show();
                $('.menu-item').filter('.activatable').removeClass('active');
                $('#btn-text').addClass('active');
                $('#input-font-size-range').val(obj.fontSize);
                textColorpicker.setColor(obj.fill);
                activateTextMode();
            }
        });
            </text>
        }
    }

    function activateIconMode() {
        _imageEditor.stopDrawingMode();
        RefreshDetailsContainerHeight();
    }

    function activateTextMode() {
        if (_imageEditor.getDrawingMode() !== 'TEXT') {
            _imageEditor.stopDrawingMode();
            _imageEditor.startDrawingMode('TEXT');
        }
        RefreshDetailsContainerHeight();
    }

    function removeState() {
        _imageEditor.changeCursor('default');
        _imageEditor.off('mousedown', 'ficon');
        RefreshDetailsContainerHeight();
    }

    function confirmOriginal() {
        GetUserConfirmation("@Proestimator.Resources.ProStrings.OriginalImageAlertMessage", confirmOriginalResponse);
    }

    function confirmOriginalResponse(yes) {
        if (yes === true) {
            $.getJSON("@Url.Action("RemoveEditImage", "Estimate")", { loginID: @ViewBag.LoginID, imageID: _imageID, userID: @ViewBag.UserID, estimateID: $("#EstimateID").val() }, function (data) {
                if (data.Success) {

                    var imageName = _imageEditor.getImageName();
                    var origianlPath = imageName.substr(0, imageName.lastIndexOf("?")).replace("_edit", "") + "?r=" + Math.random();

                    @if (Model.HasImagesContract)
                    {
                        <text>
                        _imageEditor.loadImageFromURL(origianlPath, origianlPath).then(function () {
                            _imageEditor.clearUndoStack();
                        });
                        $('#btn-clear').hide();
                        </text>
                    }
                    else
                    {
                        <text>
                        $("#imgImage").attr("src", originalPath);
                        </text>
                    }

                    var src = $("#Thumbnail" + _imageID).attr('src').split('r=')[0];
                    var i = src.lastIndexOf("/");
                    var fname = src.substr(i + 1, src.length - i - 1).replace("_thumbedit", "_thumb");
                    $("#Thumbnail" + _imageID).removeAttr("src").attr('src', src.substr(0, i + 1) + fname + "?r=" + Math.random());

                    $("#lblFileSummary").text(data.ImageInfo.Width + " x " + data.ImageInfo.Height + " pixels     " + data.ImageInfo.DiskSize);
                }
                else {
                    showMessage(data.ErrorMessage);
                }
            });
        }
    }

    @if (Model.HasImagesContract)
    {
        <text>
            window.onbeforeunload = function () {
                //return confirm("You're about to leave possibly without saving, are you sure?");
                //return "You're about to leave possibly without saving, are you sure?";
                //return confirm("");
                if (!$('#btn-undo').hasClass('disabled')) {
                    return "";
                    //GetUserConfirmation("@Proestimator.Resources.ProStrings.LoadImageAlertMessage", confirmNavResponse);
                    //return Ans;
                    /*var Ans = confirm("Are you sure you want change page!");
                    if (Ans === true) {
                        return true;
                    }
                    else {
                        return false;//null
                    }*/
                }
            }
        </text>
    }

    /*function confirmNavResponse(conf) {
        if (conf === true) {
            Ans = true;
        }
        else {
            Ans = false;
        }
    }*/

    var cImageId;
    function LoadImageDetailsAfterConfirm(pImageId) {

        @if (Model.HasImagesContract)
        {
            <text>
            cImageId = pImageId;
            if ($('#btn-undo').hasClass('disabled')) {
                LoadImageDetails(cImageId);
            }
            else {
                GetUserConfirmation("@Proestimator.Resources.ProStrings.LoadImageAlertMessage", confirmLoadResponse);
            }
            </text>
        }
        else
        {
            <text>
            LoadImageDetails(pImageId);
            </text>
        }
    }

    function confirmLoadResponse(confirm) {
        if (confirm === true) {
            LoadImageDetails(cImageId);
        }
    }

    function onChangeSelectPage(selectPageDropDownControl) {

        var selectedPageIndex = $("#ddlTotalPageCount").val();
        _currentPageIndex = selectedPageIndex;

        LoadImageDetails(_imageID);
    }

    function deleteImage() {
        GetUserConfirmation("@Proestimator.Resources.ProStrings.DeleteImageAlertMessage", DeleteImageResponse);
    }

    function DeleteImageResponse(yes)
    {
        if (yes === true)
        {
            $.getJSON("@Url.Action("DeleteImage", "Estimate")", { imageID: _imageID, userID: @ViewBag.UserID, estimateID: $("#EstimateID").val() }, function (data) {
                if (data.Success) {

                    $("#ThumbWrapper" + _imageID).remove();
                    if(_isModelPopup == 'True')
                    {
                        applyLoadingPopup();

                        if($('#ThumbnailContainer').find('input:checkbox').length > 0) {
                            $('#ThumbnailContainer').find('input:checkbox:first').each(function(){
                                var imageID = $(this).attr("data-imageid");
                                LoadImageDetails(imageID);
                            });
                        }
                        else
                        {
                            $("#DetailsContainer").hide();
                            $('#ThumbnailContainer').html("<b>@Proestimator.Resources.ProStrings.NoImageFound</b>");
                        }

                        removeLoadingPopup();
                    }
                    else
                    {
                        $("#DetailsContainer").hide();
                        _imageID = 0;
                    }
                } else {
                    showMessage(data.ErrorMessage);
                }
            });
        }
    }

    var _isEditing = false;

    function editImage() {
        if (_isEditing === false) {
            $("#ImageDetailsSection").hide();
            $("#ImageEditingControls").show();

            $("#btnEdit").val("Done Editing");

            _isEditing = true;
        }
        else {
            $("#ImageDetailsSection").show();
            $("#ImageEditingControls").hide();

            $("#btnEdit").val("Edit");

            _isEditing = false;
        }

        RefreshDetailsContainerHeight();
    }

    var _saveCount = 0;

    function saveImage(copy) {
        _saveCount = 1;

        // Save the image tags
        var tagID = $("#ImageTag").val();
        var tag = $("#ImageTagCustom").val();
        var supplementVersion = 0;

        if ($("#SupplementVersion").length > 0)
        {
            supplementVersion = $("#SupplementVersion").val();
        }

        $.getJSON("@Url.Action("SaveImage", "Estimate")", { userID: @ViewBag.UserID, loginID: @ViewBag.LoginID, estimateID: $("#EstimateID").val(), imageID: _imageID, tagID: tagID, tag: tag, supplementVersion: supplementVersion, copy: copy }, function (data) {
            if (data.Success) {
                _saveCount--;

                @if (Model.HasImagesContract)
                {
                    <text>
                    if (copy) {
                        _saveCount++;
                        if (!!(window.File && window.FileList && window.FileReader)) {
                            SaveEditedImage(_imageEditor.toDataURL(), _imageEditor.getImageName(), copy, data);
                        }
                    }
                    </text>
                }

                ShowSaveSuccess();
            } else {
                showMessage(result.ErrorMessage);
            }
        });

        @if (Model.HasImagesContract)
        {
            <text>
            // Save the image editing
            if (!_imageEditor.isEmptyUndoStack() && !copy) {
                _saveCount++;
                if (!!(window.File && window.FileList && window.FileReader)) {
                    SaveEditedImage(_imageEditor.toDataURL(), _imageEditor.getImageName(), copy, null);
                }
            }
            </text>
        }
    }

    function ShowSaveSuccess() {
        console.log("Show save success " + _saveCount);
        if (_saveCount == 0) {
            showMessage("@Proestimator.Resources.ProStrings.ImageDataSaved");
        }
    }

    function SaveEditedImage(file, imgName, bCopy, newImage) {
        var data = new FormData();
        data.append("Image", file.split(';base64,')[1]);
        data.append("LoginID", @ViewBag.LoginID);
        data.append("EstimateID", $("#EstimateID").val());
        data.append("FilePath", imgName.substr(0, imgName.lastIndexOf("?")));
        data.append("IsCopy", bCopy);
        if (bCopy) {
            data.append("ImageID", newImage.ImageID);
        }
        else {
            data.append("ImageID", _imageID);
        }
        $.ajax({
            url: "/Estimate/UploadEditImage",
            type: "POST",
            processData: false,
            contentType: false,
            data: data,
            success: function (response) {
                console.log("Edited image saved.");
                if (response.Success == true) {
                    _saveCount--;
                    ShowSaveSuccess();

                    $('#btn-clear').show();
                    _imageEditor.clearUndoStack();
                    refreshImage(bCopy, newImage);
                    $("#lblFileSummary").text(data.ImageInfo.Width + " x " + data.ImageInfo.Height + " pixels     " + data.ImageInfo.DiskSize);
                }
                else {
                    showMessage(response.ErrorMessage);
                }
            },
            error: function (er) {
                alert(er);
            }
        });
    }

    function showMessage(message) {
        $("#error-message").text(message);

        window.setTimeout(function () {
            $("#error-message").text("");
        }, 3000);
    }

    function refreshUploadMessage() {
        _uploads--;
        if (_uploads == 0) {
            $("#uploadMessage").text("");
        }
    }

    function refreshImage(isCopy, newImg) {
        if (_imageID > 0) {
            if (isCopy) {
                var newHtml = $("#imageTemplate").html()
                    .replaceAll("#ImagePath#", newImg.NewImagePath)
                    .replaceAll("#ImageID#", newImg.ImageID)
                    .replaceAll('#selected#=""', newImg.Include ? "checked" : "");
                $("#ThumbnailContainer").append(newHtml);

                LoadImageDetails(newImg.ImageID);
            }
            else {
                var src = $("#Thumbnail" + _imageID).attr('src').split('r=')[0];
                var i = src.lastIndexOf("/");
                var fname = src.substr(i + 1, src.length - i - 1).replace("_thumbedit", "").replace("_thumb", "").replace(".", "_thumbedit.");
                $("#Thumbnail" + _imageID).removeAttr("src").attr('src', src.substr(0, i + 1) + fname + "?r=" + Math.random());
            }
        }
    }

    var _uploads = 0;

    $(document).ready(function () {

        if (isAdvancedUpload()) {
            $(".box").addClass('has-advanced-upload');
            $(".box").on("dragover", function (e) {
                e.preventDefault();
                e.stopPropagation();
                $(".box").addClass('is-dragover');
            });
            $(".box").on("dragenter", function (e) {
                e.preventDefault();
                e.stopPropagation();
                $(".box").addClass('is-dragover');
            });
            $(".box").on("dragleave", function (e) {
                e.preventDefault();
                e.stopPropagation();
                $(".box").removeClass('is-dragover');
            });
            $(".box").on("dragend", function (e) {
                e.preventDefault();
                e.stopPropagation();
                $(".box").removeClass('is-dragover');
            });
            $(".box").on("drop", function (e) {
                e.preventDefault();
                e.stopPropagation();
                $(".box").removeClass('is-dragover');
                if (e.originalEvent.dataTransfer.items.length > 0 && e.originalEvent.dataTransfer.items[0].kind == "file") {
                    Upload(e.originalEvent.dataTransfer.files, true);
                }
                else {
                    alert("@Proestimator.Resources.ProStrings.AlertUploadFromCloud");
                }
            });
        }

        $("#uploadImage").change(function () {
            if (isAdvancedUpload()) {
                Upload($("#uploadImage").get(0).files, false);
            }
            else {
                $('.box').addClass('is-uploading');
                var iframeName = 'uploadiframe' + new Date().getTime(),
                    iframe = document.createElement('iframe');

                $iframe = $('<iframe name="' + iframeName + '" style="display: none;"></iframe>');

                iframe.setAttribute('name', iframeName);
                iframe.setAttribute('id', 'postframe');
                iframe.style.display = 'none';
                iframe.onclick = function () {
                    move();
                };

                document.body.appendChild(iframe);

                $("#uploadform").attr('target', iframeName);
                $("#uploadform").attr("action", "/Estimate/UploadImage");
                $("#uploadform").attr("method", "post");
                $("#uploadform").attr("enctype", "multipart/form-data");
                $("#uploadform").attr("encoding", "multipart/form-data");
                $("#uploadform").attr("file", $('#uploadImage').val());
                $("#uploadform").submit();
                $("#postframe").click();

                $("#postframe").load(function () {
                    var i, j, response;
                    i = iframe.contentDocument.body.innerHTML.indexOf(">{");
                    j = iframe.contentDocument.body.innerHTML.indexOf("}<");
                    if (i > -1 && j > -1) {
                        response = JSON.parse(iframe.contentDocument.body.innerHTML.substring(i + 1, j + 1));
                    }
                    else {
                        response = JSON.parse(iframe.contentDocument.body.innerHTML);
                    }
                    $("#uploadform").removeAttr('target');
                    if (response.Success == true) {
                        var newFullHtml = '';

                        response.UploadImageResultArray.forEach(function (eachUploadImageResult) {
                            var newHtml = $("#imageTemplate").html()
                                .replaceAll("#ImagePath#", eachUploadImageResult.NewImagePath)
                                .replaceAll("#ImageID#", eachUploadImageResult.ImageID)
                                .replaceAll("#Selected#", eachUploadImageResult.Include === true ? "checked" : "")
                                .replaceAll("#ImageTagID#", "0");

                            newFullHtml = newFullHtml + newHtml;
                        })

                        $("#ThumbnailContainer").append(newFullHtml);

                        refreshUploadMessage();

                        LoadImageDetails(response.UploadImageResultArray[0].ImageID);

                        $("#ThumbnailContainer").animate({ scrollTop: $("#ThumbnailContainer")[0].scrollHeight }, "slow");
                    }
                    else {
                        refreshUploadMessage();
                        alert(response.ErrorMessage);
                        $("#uploadImage").val('');
                    }
                    iframe.parentNode.removeChild(iframe);
                    showOriginal();
                });
                $("#postframe").error(function (er) {
                    alert(er);
                });
            }
        });

        $(".thumb-include").on("change", function () {
            //(int estimateID, int imageID, bool included)
            $.getJSON('@Url.Action("SetImageIncluded", "Estimate")', { userID: @ViewBag.UserID, estimateID: @Model.EstimateID, imageID: $(this).attr("data-imageid"), included: $(this).is(":checked") }, function (data) {

            });
        });

        $(".thumbinput").tooltip({
            tooltipClass: "mytooltip",
            position: { my: "left center", at: "right center" }
        });

        $("#ImagePreview").tooltip({
            tooltipClass: "mytooltip",
            position: { my: "left center", at: "right center" }
        });

        /*$(".menu-item").tooltip({
            tooltipClass: "mytooltip",
            //position: { my: "left center", at: "top center" }
        });*/
        //$("#btn-undo").tooltip({
        //    tooltipClass: "mytooltip",
        //});
        //$("#btn-redo").tooltip({
        //    tooltipClass: "mytooltip",
        //});
        //$("#btn-crop").tooltip({
        //    tooltipClass: "mytooltip",
        //});
        //$("#btn-rotation-left").tooltip({
        //    tooltipClass: "mytooltip",
        //});
        //$("#btn-rotation-right").tooltip({
        //    tooltipClass: "mytooltip",
        //});
        //$("#btn-add-icon").tooltip({
        //    tooltipClass: "mytooltip",
        //});
        //$("#btn-text").tooltip({
        //    tooltipClass: "mytooltip",
        //});
        //$("#btn-clear").tooltip({
        //    tooltipClass: "mytooltip",
        //});

        $('.popupCloseButton').click(function () {
            $('.hover_bkgr').hide();
        });

        imageEvents();

        @*@if (!ViewBag.IsMobileDevice)
        {
            <text>
                $("#ThumbnailContainer").sortable({
                    update: function (event, ui) {
                        var data = [];
                            $('#ThumbnailContainer').find('input:checkbox').each(function (i, val) {
                            data[i] = $(val).attr("data-imageid");
                        });
                            $.ajax({
                            url: "/Estimate/ReOrderImages",
                                type: "POST",
                                processData: true,
                                data: { data: data, estimateID: $("#EstimateID").val() },
                                success: function (response) {
                            }
                        });
                    }
                });
            </text>
        }*@

        RefreshDetailsContainerHeight();

        if (_isImpersonated) {
            $("#ThumbnailContainer").css("top", "215px");
            $("#DetailsContainer").css("top", "215px");
        }

    });

    function RefreshDetailsContainerHeight() {
        @if (ViewBag.IsMobileDevice)
        {
            <text>
                var controlTop = $("#ImageTagContainer").position().top;
                var detailsTop = $("#DetailsContainer").position().top;
                var newHeight = controlTop - detailsTop;
                $("#DetailsContainer").css("height", newHeight);
            </text>
        }
    }

    function isAdvancedUpload () {
        var div = document.createElement('div');
        return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
    }

    function showOriginal() {
        clearInterval(id);
        $("#myBar").width("100%");
        setTimeout(function () {
            $(".box").removeClass('is-uploading');
        }, 500);
    }

    function Upload(files, isDrop) {
        $(".box").addClass('is-uploading');

            var data = new FormData();
            if (files.length > 0) {
                for (var i = 0; i < files.length; ++i) {
                    data.append('Images' + (i + 1), files[i]);
                    /*if (isDrop) {
                        data.append(files[i].name, files[i]);
                    }
                    else {
                        data.append('Images' + (i + 1), files[i]);
                    }*/
                }
            }

            data.append("LoginID", @ViewBag.LoginID);
            data.append("EstimateID", $("#EstimateID").val());
            data.append("ActiveLoginID", @ViewBag.ActiveLoginID);

            _uploads++;
        $.ajax({
                url: "/Estimate/UploadImage",
                type: "POST",
                processData: false,
                contentType: false,
                data: data,
            success: function (response) {
                    if (response.Success == true)
                    {
                        var newFullHtml = '';

                        response.UploadImageResultArray.forEach(function(eachUploadImageResult) {
                            var newHtml = $("#imageTemplate").html()
                            .replaceAll("#ImagePath#", eachUploadImageResult.NewImagePath)
                            .replaceAll("#ImageID#", eachUploadImageResult.ImageID)
                            .replaceAll("#Selected#", eachUploadImageResult.Include === true ? "checked" : "")
                            .replaceAll("#ImageTagID#", "0");

                            newFullHtml = newFullHtml + newHtml;
                        })

                        $("#ThumbnailContainer").append(newFullHtml);

                        refreshUploadMessage();

                        LoadImageDetails(response.UploadImageResultArray[0].ImageID);

                        @if (ViewBag.IsMobileDevice)
                        {
                            <text>$("#ThumbnailContainer").animate({ scrollLeft: $("#ThumbnailContainer")[0].scrollWidth }, "slow");</text>
                        }
                        else
                        {
                            <text>$("#ThumbnailContainer").animate({ scrollTop: $("#ThumbnailContainer")[0].scrollHeight }, "slow");</text>
                        }
                    }
                    else {
                        refreshUploadMessage();
                        alert(response.ErrorMessage);
                        $("#uploadImage").val('');
                    }
                    showOriginal();
                },
                beforeSend: function () {
                    move();
                },
                error: function (er) {
                    alert(er.responseText);
                    console.log(er);
                }
            });
    }

    var id;
    function move() {
        var myBar = document.getElementById("myBar");
        var increment = 4;//1,2,4,5,10,20,40,50,100
        var width = increment;
        id = setInterval(frame, 100);
        function frame() {
            if (width > 100) {
                clearInterval(id);
            } else {
                myBar.style.width = width + '%';
                /*width++;
                if (width == 101) width = 1;*/
                width = width + increment;
                if (width == 100 + increment) width = increment;
            }
        }
    }

    function RotateImageLeft() {
        DoRotate(_imageID, true);
    }

    function RotateImageRight() {
        DoRotate(_imageID, false);
    }

    function DoRotate(imageID, left)
    {
        if (_isRotating === false)
        {
            _isRotating = true;

            $(".rotate-button").css("opacity", 0.5);

            $.getJSON('@Url.Action("RotateImage", "Estimate")', { userID: @ViewBag.UserID, loginID: @ViewBag.LoginID, estimateID: @Model.EstimateID, imageID: imageID, left: left }, function (data) {
                _isRotating = false;
                $(".rotate-button").css("opacity", 1.0);

                if (data === "good")
                {
                    var imageNewUrl = $("#ImagePreview").attr("src") + "?r=" + Math.random();
                    $("#ImagePreview").removeAttr("src").attr("src", imageNewUrl);

                    var thumbNewUrl = $("#Thumbnail" + imageID).attr("src") + "?r=" + Math.random();
                    $("#Thumbnail" + imageID).removeAttr("src").attr("src", thumbNewUrl);
                }
                else
                {
                    ShowUserMessage(data, true, 5000);
                }
            });
        }
        else{
            console.log("already rotating");
        }
    }

    // Rotate PDF Image

    function RotatePDFImageLeft() {
        DoRotatePDFImage(_imageID, true);
    }

    function RotatePDFImageRight() {
        DoRotatePDFImage(_imageID, false);
    }

    function DoRotatePDFImage(imageID, left)
    {
        if (_isRotating === false)
        {
            _isRotating = true;

            $(".rotate-button").css("opacity", 0.5);

            var pageIndex = $("#ddlTotalPageCount").val();

            $.getJSON('@Url.Action("RotatePDFImage", "Estimate")', { loginID: @Model.LoginID, estimateID: @Model.EstimateID, imageID: imageID, left: left, selectedPageIndex: pageIndex }, function (data) {
                _isRotating = false;
                $(".rotate-button").css("opacity", 1.0);

                if (data === "good")
                {
                    var imageNewUrl = $("#ImagePreview").attr("src") + "?r=" + Math.random();
                    $("#ImagePreview").removeAttr("src").attr("src", imageNewUrl);

                    var thumbNewUrl = $("#Thumbnail" + imageID).attr("src") + "?r=" + Math.random();
                    $("#Thumbnail" + imageID).removeAttr("src").attr("src", thumbNewUrl);
                }
                else
                {
                    ShowUserMessage(data, true, 5000);
                }
            });
        }
        else{
            console.log("already rotating");
        }
    }

</script>

<link type="text/css" href="~/Content/css/tui-color-picker.css" rel="stylesheet" />

<style>

    #container2 {
        background: white;
    }

    .menu {
        padding: 0;
        margin-bottom: 5px;
        text-align: center;
        color: #544b61;
        font-weight: 400;
        list-style-type: none;
        user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        -webkit-user-select: none;
    }

    .menu-item {
        padding: 10px;
        display: inline-block;
        cursor: pointer;
        vertical-align: middle;
    }

        .menu-item a {
            text-decoration: none;
        }

        .menu-item.no-pointer {
            cursor: default;
        }

        .menu-item.active,
        .menu-item:hover {
            background-color: #f3f3f3;
        }

        .menu-item.disabled {
            cursor: default;
            color: #bfbebe;
            opacity: 0.3;
        }

    .sub-menu-container {
        font-size: 14px;
        margin: 0px;
        display: none;
    }

    .tui-image-editor {
        height: 100%;
    }

    .tui-image-editor-canvas-container {
        margin: 0 auto;
    }

    .tui-colorpicker-container {
        margin: 5px auto 0;
    }

    .tui-colorpicker-palette-toggle-slider {
        display: none;
    }

    .lower-canvas {
        border: 1px dashed black;
/*        height: auto !important;
        max-height: 100% !important;
        width: auto !important;
        max-width: 100% !important;*/
    }

    .btn-text-style {
        padding: 5px;
        margin: 3px 1px;
        border: 1px dashed #bfbebe;
        outline: 0;
        background-color: #eee;
        cursor: pointer;
    }

    .icon-text {
        font-size: 20px;
    }

    .rotate-container {
        width: 100px;
    }

    .rotate-button {
        cursor: pointer;
        float: left;
        margin-top: 0px;
        margin-bottom: 0px;
    }

    .image-container img {
        image-orientation: from-image !important;
    }

    #ThumbnailContainer {
        height: 100%;
        width: auto;
        overflow-x: auto;
        overflow-y: hidden;
        white-space: nowrap;
        margin-right: 4px;
    }

    .thumb-wrapper {
        display: inline-block;
        margin-right: 2px;
        margin-top: 0px;
    }

    .thumbinput {
        text-align: center;
        height: 8px;
        display: none;
    }

    .thumbimage {
        text-align: center;
        height: 90px;
        width: 50px;
    }

    #ThumbnailContainer img {
        cursor: pointer;
        border: 1px solid black;
        height: 80px;
        padding: 2px;
    }

    #ThumbnailContainer img.ImageSelected {
        border-radius: 4px;
        padding: 0px;
        height: 80px;
        border-style: dashed;
        border-width: 2px;
    }

    #ThumbnailContainer.stick {
        position: fixed;
        z-index: 10001;
    }

    .mytooltip {
        padding: 5px;
        background: #c6ffd4;
        position: absolute;
        z-index: 1;
        max-width: 300px;
        -webkit-box-shadow: 0 0 5px #aaa;
        box-shadow: 0 0 5px #aaa;
        font-size: 14px;
        border-radius: 5px;
        margin-right: -10px;
    }

    #DetailsContainer {
        padding: 10px;
        display: none;
        height: 1000px;
    }

    #DetailsContainer .button {
        width: 49%;
    }

    #DetailsContainer select {
        width: 100%;
    }

    #DetailsContainer p {
        padding: 6px;
        margin: 0px;
        font-size: 0.8em;
    }

    #DetailsContainer span {
        font-size: 12px;
    }

    #ImageTag {
        margin-bottom: 10px;
    }

    #ImageTagContainer {
        padding: 10px;
        position: absolute;
        left: 0;
        right: 0;
        bottom: 0;
        height: auto;
        background-color: lightgray;
    }

    .rotate-space-wrapper {
        width: 50%;
        float: right;
    }

    .details-container {
        clear: both;
        width: 100%;
        height: 30px;
    }

    .details-left {
        float: left;
        width: 30%;
        text-align: right;
    }

    .details-right {
        float: left;
        width: 70%;
    }

    .disable-control {
        color: grey;
        opacity: 0.5;
    }

    .disable-button {
        opacity: 0.5;
    }

    #loading-container-popup {
        position: absolute;
        left: 0;
        top: 0;
        background: rgba(255,255,255,.5);
        display: none;
        margin-left: auto;
        margin-right: auto;
    }

    .impage-page-content {
        position: fixed;
        height: 100%;
    }

    #workDesk {
        padding-right: 0px !important;
    }

    #ImageEditContainer {
        width: 100%;
        height: 100%;
    }

    #smLogo {
        display: none;
    }

    .buttons-container {
        text-align: center;
    }

    #smSupportNumber {
        display: none;
    }

    .button {
        max-width: 150px;
    }

    .half-or-whole {
        width: 50%;
        padding-right: 10px;
        float: left;
    }

    #ImageEditingControls {
        display: none;
        border: 1px solid black;
        margin-top: 0px;
        background-color: lightgray;
        overflow: overlay;
    }

    #smEstimatePanel {
        display: none;
    }

    #ThumbnailLine {
        height: 80px;
    }

    .ThumbnailLineLeft {
        width: 58px;
        height: 80px;
        float: left;
    }

    .MobileCameraWrapper {
        outline: 2px dashed black;
        height: 76px;
        margin: 2px;
        padding-left: 5px;
        padding-top: 23px;
        margin-left: 4px;
        margin-right: 4px;
    }

    img {
        margin: 0px !important;
        max-height: 90%;
    }

    .tablet-size {
        display: block;
    }

    .desktop-size {
        display: none;
    }

    @@media screen and (min-width: 900px) {

        .tablet-size {
            display: none;
        }

        .desktop-size {
            display: block;
        }

        .half-or-whole {
            width: 100%;
        }

        #smSupportNumber {
            display: block;
        }

        img {
            margin: 0px !important;
            max-height: 90%;
        }

        #container2 {
            padding-left: 20px;
            padding-right: 20px;
        }

        #ImageEditingControls {
            display: block;
        }

        #smLogo {
            display: block;
        }

        .impage-page-content {
            position: fixed;
            left: 114px;
            top: 185px;
            right: 0px;
            bottom: 0px;
        }

        #estimateFormHeader2 {
            position: fixed;
            width: 100%;
            height: 75px;
            margin-left: -40px;
            border-bottom: 1px solid black;
            background-color: white;
            padding-top: 3px
        }

        #formHeader-back2 {
            width: 300px;
            height: 100%;
            padding-top: 40px;
            position: absolute;
            left: 0;
            text-align: left;
            padding-left: 15px;
        }

        #formHeader-center2 {
            height: 100%;
            text-align: center;
            left: 600px;
            margin-left: 300px;
            margin-right: 300px;
        }

            #formHeader-center2 h1 {
                padding: 0px;
                margin: 0px;
                display: block;
                height: 15%;
                font-size: 1.25em;
            }

        #formHeader-next2 {
            padding-top: 43px;
            height: 100%;
            position: absolute;
            right: 113px;
            top: 0;
            width: 300px;
            text-align: right;
            padding-right: 15px;
        }

        #container2 {
            margin-top: 70px;
        }

        #ThumbnailContainer {
            width: 200px;
            overflow-y: auto;
            position: fixed;
            top: 185px;
            height: calc(100% - 185px);
            padding-right: 5px;
        }

        .thumb-wrapper {
            display: block;
            margin-right: 0px;
            margin-top: 0px;
            clear: both;
            padding: 5px;
        }

        .thumbinput {
            width: 30px; /*46px;*/
            height: auto;
            float: left;
            text-align: right;
            display: block;
            padding-top: 30px;
        }

        .thumbimage {
            width: calc(100% - 30px);
            height: auto;
            float: right;
            text-align: left;
        }

        #ThumbnailContainer img {
            height: auto;
            
        }

        #ThumbnailContainer img.ImageSelected {
            height: auto;
            padding: 2px;
        }

        #DetailsContainer {
            display: none;
            position: fixed;
            top: 185px;
            bottom: 0px;
            left: 350px;
            right: 0px;
            height: 100%;
            padding: 10px;
            height: calc(100% - 190px);
        }

        #DetailsContainer span {
            font-size: 18px;
        }

        #ImageEditContainer {
            width: 70%;
            height: 100%;
            float: left;
        }

        #ImageTagContainer {
            width: 30%;
            float: right;
            padding: 0px;
            padding-right: 20px;
            position: relative;
            height: 300px;
            background-color: transparent;
        }

        .buttons-container {
            text-align: left;
            margin-left: 10px;
        }
    }

    .box_withoutheader {
        background-color: #e8eeef;
        width: 100%;
        height: 100%;
        text-align: center;
    }

    .box {
        font-size: 1.25rem;
        position: relative;
        padding-left: 10px;
        padding-right: 10px;
        padding-bottom: 3px;
        padding-top: 3px;
        width: 70%;
        height: 100%;
    }

    .box__input {
        padding-top: 5px;
        width: 100%;
    }

    .box__dragndrop,
    .box__icon {
        display: none;
    }

    .box.has-advanced-upload {
        background-color: white;
        outline: 2px dashed black;
        outline-offset: -10px;
    }

    .box.has-advanced-upload .box__dragndrop {
        display: inline;
    }

    .box.is-dragover {
        background-color: grey;
        outline-offset: -20px;
        outline-color: #c8dadf;
    }

    .box.has-advanced-upload .box__icon {
        width: 100%;
        height: 20px;
        fill: #92b0b3;
        display: block;
        margin-bottom: 5px;
    }

    .box. is-uploading .box__input {
        visibility: hidden;
    }

    .js .box__file {
        width: 0.1px;
        height: 0.1px;
        opacity: 0;
        overflow: hidden;
        position: absolute;
        z-index: -1;
    }

    .js .box__file + label {
        max-width: 80%;
        text-overflow: ellipsis;
        white-space: nowrap;
        cursor: pointer;
        display: inline-block;
        overflow: hidden;
    }

    .js .box__file + label:hover strong,
    .box__file:focus + label strong,
    .box__file.has-focus + label strong {
        color: #39bfd3;
    }

    .js .box__file:focus + label,
    .js .box__file.has-focus + label {
        outline: 1px dotted #000;
        outline: -webkit-focus-ring-color auto 5px;
    }

    .js .box__file + label * {
        /* pointer-events: none; */ /* in case of FastClick lib use */
    }

    .no-js .box__file + label {
        display: none;
    }

    #myProgress {
        display: none;
    }

    #myBar {
        width: 0%;
        height: 30px;
        background-color: #04AA6D;
        text-align: center;
        line-height: 30px;
        color: white;
    }

    .box.is-uploading #myProgress {
        display: block;
        width: 600px;
        height: 30px;
        background-color: #ddd;
        position: absolute;
        top: 50%;
        left: 50%;
        margin: -15px 0 0 -300px;
    }

    .mobile-edit-popup {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 10000;
        background-color: red;
    }

    .popupCloseButton {
        background-color: #fff;
        border: 3px solid #999;
        border-radius: 50px;
        cursor: pointer;
        display: inline-block;
        font-family: arial;
        font-weight: bold;
        position: absolute;
        top: -20px;
        left: -20px;
        font-size: 25px;
        line-height: 30px;
        width: 30px;
        height: 30px;
        text-align: center;
    }

    .popupCloseButton:hover {
        background-color: #ccc;
    }

    .tui-image-editor-header-logo {
        display: none;
    }

    .tui-colorpicker-palette-preview {
        display: none;
    }

    #tui-icon-color-picker {
        text-align: center;
    }

    .mobile-form {
        padding-left: 0px !important;
        padding-right: 0px !important;
    }

</style>

<div id="workDesk" class="page-container">

    <div id="estimateFormHeader" style="padding-top: 0px;">

        <div id="formHeader-center">
            <!--<h1>@Proestimator.Resources.ProStrings.Estimate_Navigation_Images</h1>-->

            @if (!Model.EstimateIsLocked)
            {
                <div class="desktop-size">
                    @using (Html.BeginForm("ImageUpload", "Estimate", FormMethod.Post, new { @class = "box", enctype = "multipart/form-data", id = "uploadform" }))
                    {
                        @Html.HiddenFor(o => o.LoginID)
                        @Html.HiddenFor(o => o.EstimateID)

                        <input type="hidden" id="redirectData" name="redirectDataField" />

                        <div class="box_withoutheader">
                            <div class="box__input">
                                <div class="sm_hide md_display">
                                    <svg class="box__icon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43"><path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z" /></svg>
                                    <input class="box__file" type="file" name="files[]" id="uploadImage" data-multiple-caption="{count} files selected" multiple />

                                    <label for="uploadImage"><strong>Choose file(s)</strong><span class="box__dragndrop"> or drag it here</span>.</label>
                                </div>
                            </div>
                        </div>
                        <div id="myProgress">Uploading in Progress.....<div id="myBar"></div></div>
                    }
                </div>
            }
            @if (Model.EstimateIsLocked)
            {
                <p class="error-message">@Proestimator.Resources.ProStrings.Estimate_Message_LockedNoEdit</p>
            }
        </div>
     
    </div>

    <div id="ThumbnailLine">
        <div class="tablet-size">
            @using (Html.BeginForm("ImageUpload", "Estimate", FormMethod.Post, new { @class = "mobile-form", enctype = "multipart/form-data", id = "uploadform" }))
            {
                @Html.HiddenFor(o => o.LoginID)
                @Html.HiddenFor(o => o.EstimateID)

                <input type="hidden" id="redirectData" name="redirectDataField" />

                <div class="ThumbnailLineLeft">
                    <input class="box__file" type="file" name="files[]" id="uploadImage" data-multiple-caption="{count} files selected" multiple />
                    <div class="MobileCameraWrapper">
                        <label for="uploadImage">
                            <img src="~/Images/camera.png" style="width: 40px;" />
                        </label>
                    </div>
                </div>
                <div id="myProgress">Uploading in Progress.....<div id="myBar"></div></div>
            }
        </div>

        <div id="ThumbnailContainer">
            @foreach (ImageVM image in Model.Images)
            {
                @Html.Raw(imageTemplate
                    .Replace("#ImagePath#", image.ImagePath + "?r=" + new Random(DateTime.Now.Millisecond).Next(10000, 99999).ToString())
                    .Replace("#ImageID#", image.ImageID.ToString())
                    .Replace("#Selected#", image.Include ? "checked" : "")
                );
            }
        </div>
    </div>
    <div id="DetailsContainer">

        <div id="ImageEditContainer">
            @if (Model.HasImagesContract)
            {
                <div class="tui-image-editor"></div>
            }
            else
            {
                <img id="imgImage" />

                if (ViewBag.IsMobileDevice)
                {
                    <p id="lblFileSummary"></p>
                }
            }
        </div>
        <div id="ImageTagContainer">

            <div class="buttons-container">
                @if (Model.HasImagesContract)
                {
                    <input id="btnSave" type="button" value="@Proestimator.Resources.ProStrings.SaveAsCopy" class="button do-not-disable" onclick="saveImage(true);" />
                }

                <input id="btnSave" type="button" value="@Proestimator.Resources.ProStrings.Save" class="button do-not-disable" onclick="saveImage(false);" />

                @if (Model.HasImagesContract && ViewBag.IsMobileDevice)
                {
                    <input id="btnEdit" type="button" value="@Proestimator.Resources.ProStrings.Edit" class="button do-not-disable" onclick="editImage();" />
                }

                <input id="btnDelete" type="button" value="@Proestimator.Resources.ProStrings.DeleteButton" class="button do-not-disable" onclick="deleteImage();" />

                <p id="error-message" style="color: red; height: 30px; padding: 8px; text-align: center;">@Model.ErrorMessage</p>
            </div>

            <div id="ImageDetailsSection">

                <div class="details-container" id="PageDDLContainer">
                    <div class="details-left">
                        <p>@Proestimator.Resources.ProStrings.SelectPage</p>
                    </div>
                    <div class="details-right" id="SelectPageContainer">

                    </div>
                </div>

                @if (!ViewBag.IsMobileDevice)
                {
                    <div class="details-container">
                        <div class="details-left">
                            <p>&nbsp;</p>
                        </div>
                        <div class="details-right">
                            <p id="lblFileSummary"></p>
                        </div>
                    </div>
                }

                <div class="details-container">
                    <div class="details-left">
                        <p>@Proestimator.Resources.ProStrings.ImageTag</p>
                    </div>
                    <div class="details-right">
                        @Html.DropDownList("ImageTag", Model.ImageTags)
                    </div>
                </div>

                <div class="details-container">
                    <div class="details-left">
                        <p>@Proestimator.Resources.ProStrings.CustomNote</p>
                    </div>
                    <div class="details-right">
                        <input type="text" style="float: right;" id="ImageTagCustom" />
                    </div>
                </div>

                @if (Model.SupplementVersions.Count > 1)
                {
                    <div class="details-container" id="SupplementVersionDiv">
                        <div class="details-left">
                            <p>@Proestimator.Resources.ProStrings.SupplementVersion</p>
                        </div>
                        <div class="details-right">
                            @Html.DropDownList("SupplementVersion", Model.SupplementVersions)
                        </div>
                    </div>
                }
            </div>

            @if (Model.HasImagesContract)
            {
                <div id="ImageEditingControls">
                    <ul class="menu">
                        <li class="menu-item disabled" id="btn-undo"><img src="~/Images/undo.png" width="20" height="20" /></li>
                        <li class="menu-item disabled" id="btn-redo"><img src="~/Images/undo.png" width="20" height="20" style="transform: scaleX(-1);" /></li>
                        <li class="menu-item activatable" id="btn-crop"><img src="~/Images/crop.png" width="20" height="20" /></li>
                        <li class="menu-item activatable" id="btn-rotation-left"><img src="~/Images/rotate-left.png" width="20" height="20" /></li>
                        <li class="menu-item activatable" id="btn-rotation-right"><img src="~/Images/rotate-right.png" width="20" height="20" /></li>
                        <li class="menu-item activatable" id="btn-add-icon"><img src="~/Images/shapes.png" width="20" height="20" /></li>
                        <li class="menu-item activatable" id="btn-text"><img src="~/Images/text.png" width="20" height="20" /></li>
                        <li class="menu-item" id="btn-clear">Original</li>
                    </ul>

                    <div class="sub-menu-container" id="crop-sub-menu">
                        <ul class="menu">
                            <li class="menu-item" id="btn-apply-crop">Apply</li>
                            <li class="menu-item close" id="btn-cancel-crop">Cancel</li>
                        </ul>
                    </div>

                    <div class="sub-menu-container" id="icon-sub-menu">
                        <ul class="menu">
                            <li class="menu-item icon-text" data-icon-type="arrow">➡</li>
                            <li class="menu-item icon-text" data-icon-type="cancel">✖</li>
                            <li class="menu-item icon-text" data-icon-type="circle">O</li>
                            <li class="menu-item icon-text" data-icon-type="rect">⬜</li>
                            <li class="menu-item close">Close</li>
                        </ul>

                        <label class="no-pointer" style="text-align: center; float: left; width: 50%;">
                            <input id="icon-size-range" type="range" min="100" max="500" value="100" />
                        </label>

                        <div id="tui-icon-color-picker" style="float: left; width: 50%;"></div>
                    </div>

                    <div class="sub-menu-container" id="text-sub-menu">
                        <div style="width: 50%; float: left;">
                            <ul class="menu">
                                <li class="menu-item btn-text-style" data-style-type="b">Bold</li>
                                <li class="menu-item btn-text-style" data-style-type="i">Italic</li>
                                <li class="menu-item btn-text-style" data-style-type="u">Underline</li>
                            </ul>

                            <ul class="menu">
                                <li class="menu-item">
                                    <label class="no-pointer">
                                        <input id="input-font-size-range" type="range" min="10" max="200" value="10" />
                                    </label>
                                </li>
                            </ul>
                        </div>
                        <div style="width: 50%; float: left;">
                            <ul class="menu">
                                <li class="menu-item close">Close</li>
                            </ul>

                            <div id="tui-text-color-picker"></div>
                        </div>
                    </div>


                    @if (Model.EditorIsTrial)
                    {
                        <div class="error-message">
                            <p>Note: the Image Editor feature is available for evaluation in a trial period. However it is not part of the base contract and requires the purchase of an add on to use once your trial has expired.</p>
                        </div>
                    }

                </div>
            }

        </div>

    </div>

</div>