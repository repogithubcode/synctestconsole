@model Proestimator.ViewModel.InsuranceVM

@{
    ViewBag.Title = Proestimator.Resources.ProStrings.PageTitle_Insurance;
}

<script src="@Url.Content("~/Scripts/jquery.mask.js")" type="text/javascript"></script>
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.0/themes/base/jquery-ui.css">

<style>
    .input-group-addon {
        min-width: 150px;
        text-align: left;
    }

    .padd-top {
        padding-top: 30px;
        padding-bottom: 30px;
    }

    .splitter {
        width: 100%;
        height: 515px;
        display: flex;
        overflow: auto;
    }

    #listDocuments {
        width: 52%;
        height: 100%;
        min-width: 10px;
        float: left;
    }

    #manageDocuments {
        width: 75%;
        height: 100%;
        min-width: 10px;
        overflow: hidden;
    }

    input[type="file"] {
        height: 40px;
    }

        input[type="file"]::-webkit-file-upload-button {
            height: 40px;
        }

    .DocumentsRoot {
        background-color: black;
        color: white;
        box-shadow: inset 0 0 3px 4px black;
    }

    /* Remove default bullets */
    ul, #myUL {
        list-style-type: none;
    }

    /* Remove margins and padding from the parent ul */
    #myUL {
        margin: 0;
        padding: 0;
    }

    /* Style the caret/arrow */
    .caret {
        cursor: default;
        width: 200px;
        user-select: element; /* Prevent text selection */
        border-top: none;
        font-weight: bold;
    }

    .displayDocument {
        user-select: none; /* Prevent text selection */
        padding-bottom: 5px;
    }

    /* Create the caret/arrow with a unicode, and style it */
    .caret::before {
        /*content: "\25B6";*/
        font-weight: bold;
        color: black;
        /*display: inline-block;*/
        margin-right: 6px;
    }

    /* Rotate the caret/arrow icon when clicked on (using JavaScript) */
    /*.caret-down::before {
        transform: rotate(90deg);
    }*/

    /* Hide the nested list */
    .nested {
        display: none;
        padding-top: 15px;
    }

    .caretDown {
        /*display: inline-block;*/
        cursor: pointer;
        width: 200px;
        margin-left: 0px;
        vertical-align: middle;
        border-top: none;
    }

    .insurance {
        text-align: left !important;
        width: 75%;
    }

    .popup-panel-container {
        display: none;
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        background-color: transparent;
        z-index: 100000;
        overflow-y: scroll;
    }

    .popup-panel {
        display: block !important;
    }

    .hack-fix {
        padding-top: 90px;
    }

    @@media (max-width: 1400px) {
        .print-insured {
            text-align-last: right;
        }
    }

    @@media (max-width: 700px) {
        .print-insured {
            text-align-last: left;
        }

        .hack-fix {
            padding-top: 10px;
        }
    }

    .datagrid {
        cursor: default;
    }
</style>

<script>

    function TurnOnUseExistingInsuranceCompany()
    {
        $("#UseLinkedInsuranceCompany").prop("checked", true);
        RefreshCompanySelectors();
    }

    function TurnOffUseExistingInsuranceCompany()
    {
        $("#UseLinkedInsuranceCompany").prop("checked", false);
        RefreshCompanySelectors();
    }

    function RefreshCompanySelectors() {
        if ($("#UseLinkedInsuranceCompany").is(":checked")) {
            $(".existingInsuranceCompany").css("opacity", 1);
            $(".manualInsuranceCompany").css("opacity", 0.3);
        }
        else {
            $(".existingInsuranceCompany").css("opacity", 0.3);
            $(".manualInsuranceCompany").css("opacity", 1);
        }

        if ($("#UseLinkedInsuranceCompany").is(":checked") && $("#InsuranceCompanyID").val() > 0) {
            $(".saved-adjusters-controls").show();
            $(".saved-claimreps-controls").show();
        }
        else {
            $(".saved-adjusters-controls").hide();
            $(".saved-claimreps-controls").hide();
        }

        RefreshAdjusterInputs();
        RefreshClaimRepInputs();
    }

    function TurnOnUseExistingAdjuster()
    {
        $("#UseSavedAdjuster").prop("checked", true);
        RefreshAdjusterInputs();
    }

    function TurnOffUseExistingAdjuster()
    {
        $("#SavedAdjusterID").val(0);
        $("#UseSavedAdjuster").prop("checked", false);
        RefreshAdjusterInputs();
    }

    function RefreshAdjusterInputs() {
        if (!$("#SavedAdjusterID").is(":visible")) {
            $("#UseSavedAdjuster").prop("checked", false);
        }

        if ($("#UseSavedAdjuster").is(":checked")) {
            $(".adjuster-inputs").css("opacity", 0.3);
            $("#SavedAdjusterID").css("opacity", 1);
        }
        else {
            $(".adjuster-inputs").css("opacity", 1);
            $("#SavedAdjusterID").css("opacity", 0.3);
        }
    }

    function TurnOnUseExistingClaimRep()
    {
        $("#UseSavedClaimRep").prop("checked", true);
        RefreshClaimRepInputs();
    }

    function TurnOffUseExistingClaimRep()
    {
        $("#SavedClaimRepID").val(0);
        $("#UseSavedClaimRep").prop("checked", false);
        RefreshClaimRepInputs();
    }

    function ShowAdjusters() {
        $("#tabButtonAdjusters").addClass("active");
        $("#tabButtonClaimReps").removeClass("active");

        $("#EditAdjustersContainer").show();
        $("#EditClaimRepsContainer").hide();
    }

    function ShowClaimReps() {
        $("#tabButtonAdjusters").removeClass("active");
        $("#tabButtonClaimReps").addClass("active");

        $("#EditAdjustersContainer").hide();
        $("#EditClaimRepsContainer").show();
    }

    function RefreshClaimRepInputs() {
        if (!$("#SavedClaimRepID").is(":visible")) {
            $("#UseSavedClaimRep").prop("checked", false);
        }

        if ($("#UseSavedClaimRep").is(":checked")) {
            $(".claimrep-inputs").css("opacity", 0.3);
            $("#SavedClaimRepID").css("opacity", 1);
        }
        else {
            $(".claimrep-inputs").css("opacity", 1);
            $("#SavedClaimRepID").css("opacity", 0.3);
        }
    }

    function LoadEmployeesForCompany(companyID)
    {
        var text = "@Proestimator.Resources.ProStrings.SelectSavedCategoryItem";
        var claimRepText = text.replace("{0}","Claim Rep");
        var adjusterText = text.replace("{0}","Adjuster");

        $.getJSON('@Url.Action("GetInsuranceCompanyData", "Insurance")', { userID: @ViewBag.UserID, insuranceCompanyID: companyID }, function (data) {
            if (data) {
                if (FillEmployeeDropDown($("#SavedAdjusterID"), data.Adjusters, adjusterText, $("#AdjusterVM_FirstName").val() + " " + $("#AdjusterVM_LastName").val()))
                {
                    TurnOnUseExistingAdjuster();
                }
                else{
                    TurnOffUseExistingAdjuster();
                }

                if (FillEmployeeDropDown($("#SavedClaimRepID"), data.ClaimReps, claimRepText, $("#ClaimRepVM_FirstName").val() + " " + $("#ClaimRepVM_LastName").val()))
                {
                    TurnOnUseExistingClaimRep();
                }
                else
                {
                    TurnOffUseExistingClaimRep();
                }
            }
        });
    }

    function FillEmployeeDropDown(dropDown, data, defaultVal, formValue)
    {
        var anySelected = false;

        dropDown.empty();
        dropDown.append("<option value='0'>" + defaultVal + "</option>");

        if (data.length > 0)
        {
            for(i = 0; i < data.length; i++)
            {
                var fullName = data[i].FirstName + " " + data[i].LastName;
                var isSelected = fullName == formValue;
                if (isSelected === true)
                {
                    anySelected = true;
                }
                dropDown.append("<option value='" + data[i].ID + "'" + (isSelected ? " selected='selected'" : "") + ">" + fullName + "</option>");
            }
        }

        return anySelected;
    }

    $(document).ready(function ($) {
        $(".datepicker").datepicker();

        $("#claimantCheckbox").change(function () {
            if ($(this).is(":checked")) {
                $("#claimantInfo").slideUp();
            } else {
                $("#claimantInfo").slideDown();
            }
        });

        $("#insuredCheckbox").change(function () {
            if ($(this).is(":checked")) {
                $("#insuredInfo").slideUp();
            } else {
                $("#insuredInfo").slideDown();
            }
        });

        // Set up insurance company inputs
        RefreshCompanySelectors();

        $("#InsuranceCompanyID").mousedown(function () {
            TurnOnUseExistingInsuranceCompany();
        });

        $("#InsuranceCompanyID").change(function () {

            if (($("#InsuranceCompanyID").val() == 0) || ($("#InsuranceCompanyID").val() == null))
            {
                TurnOffUseExistingInsuranceCompany();

                $("#AdjusterVM_FirstName").val("");
                $("#AdjusterVM_LastName").val("");
                $("#AdjusterVM_Phone1").val("");
                $("#AdjusterVM_Extension1").val("");
                $("#AdjusterVM_Fax").val("");
                $("#AdjusterVM_Email").val("");

                $("#ClaimRepVM_FirstName").val("");
                $("#ClaimRepVM_LastName").val("");
                $("#ClaimRepVM_Phone1").val("");
                $("#ClaimRepVM_Extension1").val("");
                $("#ClaimRepVM_Fax").val("");
                $("#ClaimRepVM_Email").val("");
            }
            else
            {
                TurnOnUseExistingInsuranceCompany();
                LoadEmployeesForCompany($("#InsuranceCompanyID").val());
            }
        });

        $("#InsuranceCompanyName").click(function () {
            TurnOffUseExistingInsuranceCompany();
        });

        $("#SaveInsuranceInfo").click(function () {
            TurnOffUseExistingInsuranceCompany();
        });

        // Set up the Adjuster drop down and interaction
        $("#SavedAdjusterID").change(function () {
            if ($(this).val() == 0)
            {
                TurnOffUseExistingAdjuster();

                $("#AdjusterVM_FirstName").val("");
                $("#AdjusterVM_LastName").val("");
                $("#AdjusterVM_Phone1").val("");
                $("#AdjusterVM_Extension1").val("");
                $("#AdjusterVM_Fax").val("");
                $("#AdjusterVM_Email").val("");
            }
            else {
                $.getJSON('@Url.Action("GetInsuranceEmployee", "Insurance")', { userID: @ViewBag.UserID, id: $(this).val() }, function (data) {
                    if (data) {
                        $("#AdjusterVM_FirstName").val(data.FirstName);
                        $("#AdjusterVM_LastName").val(data.LastName);
                        $("#AdjusterVM_Phone1").val(data.Phone);
                        $("#AdjusterVM_Extension1").val(data.Extension);
                        $("#AdjusterVM_Fax").val(data.Fax);
                        $("#AdjusterVM_Email").val(data.Email);

                        TurnOnUseExistingAdjuster();
                    }
                });
            }
        });

        $("#SavedAdjusterID").mousedown(function () {
            if ($("#SavedAdjusterID").length > 1)
            {
                TurnOnUseExistingAdjuster();
            }
        });

        $("#SavedAdjusterID").mousedown(function () {
            if ($("#SavedAdjusterID").length > 1)
            {
                TurnOnUseExistingAdjuster();
            }
        });

        $(".adjuster-inputs").click(function () {
            TurnOffUseExistingAdjuster();
        });

        // Set up the ClaimRep drop down and interaction
        $("#SavedClaimRepID").change(function () {
            if ($(this).val() == 0)
            {
                TurnOffUseExistingClaimRep();

                $("#ClaimRepVM_FirstName").val("");
                $("#ClaimRepVM_LastName").val("");
                $("#ClaimRepVM_Phone1").val("");
                $("#ClaimRepVM_Extension1").val("");
                $("#ClaimRepVM_Fax").val("");
                $("#ClaimRepVM_Email").val("");
            }
            else {
                $.getJSON('@Url.Action("GetInsuranceEmployee", "Insurance")', { userID: @ViewBag.UserID, id: $(this).val() }, function (data) {
                    if (data) {
                        $("#ClaimRepVM_FirstName").val(data.FirstName);
                        $("#ClaimRepVM_LastName").val(data.LastName);
                        $("#ClaimRepVM_Phone1").val(data.Phone);
                        $("#ClaimRepVM_Extension1").val(data.Extension);
                        $("#ClaimRepVM_Fax").val(data.Fax);
                        $("#ClaimRepVM_Email").val(data.Email);

                        TurnOnUseExistingClaimRep();
                    }
                });
            }
        });

        $("#SavedClaimRepID").mousedown(function () {
            if ($("#SavedClaimRepID").length > 1)
            {
                TurnOnUseExistingClaimRep();
            }
        });

        $(".claimrep-inputs").click(function () {
            TurnOffUseExistingClaimRep();
        });

        if ('@(Model.ClaimantSameAsOwner)' == 'True') {
            $("#claimantInfo").hide();
        }

        if ('@(Model.InsuredSameAsOwner)' == 'True') {
            $("#insuredInfo").hide();
        }

        $("#btnManageInsurance").click(function () {
            _IsActionPerformed = false;
            ShowAdjusters();
            RefreshInsuranceGrid();

            $(".popup-panel-container").show();
        });

        function ScreenIsSmall() {
            var sizeDetectorVisible = $(".size-detector").is(":visible");
            return !sizeDetectorVisible;
        }

        function FillInsuranceCompanyDropDown(dropDown)
        {
            $.getJSON('@Url.Action("GetInsuranceCompaniesWithEmptyCompany", "Insurance")', { loginID: @Model.LoginID }, function (data) {

                if (data) {
                    if (data.length > 0)
                    {
                        dropDown.append("<option value='" + data[0].InsuranceCompanyID + "'" + " selected='selected'>" + data[0].InsuranceCompanyName + "</option>");

                        for(i = 1; i < data.length; i++)
                        {
                            dropDown.append("<option value='" + data[i].InsuranceCompanyID + "'>" + data[i].InsuranceCompanyName + "</option>");
                        }
                    }
                }
            });
        }

        $("#chkShowDeletedInsuranceCompany").change(function() {
            if($("#chkShowDeletedInsuranceCompany").is(":checked")==true)
            {
                $("#insurance-grid thead [data-index=2] .k-link").html("Restore")
            }
            else
            {
                $("#insurance-grid thead [data-index=2] .k-link").html("Delete")
            }

            RefreshInsuranceGrid();
        });

        $("#chkShowDeletedAdjusters").change(function() {
            if($("#chkShowDeletedAdjusters").is(":checked")==true)
            {
                $("#adjuster-grid thead [data-index=2] .k-link").html("Restore")
            }
            else
            {
                $("#adjuster-grid thead [data-index=2] .k-link").html("Delete")
            }

            RefreshAdjusterGrid();
        });

        $("#chkShowDeletedClaimReps").change(function() {
            if($("#chkShowDeletedClaimReps").is(":checked")==true)
            {
                $("#claimrep-grid thead [data-index=2] .k-link").html("Restore")
            }
            else
            {
                $("#claimrep-grid thead [data-index=2] .k-link").html("Delete")
            }

            RefreshClaimRepGrid();
        });

        $('#btnAddAdjuster').click(function () {
            _EmployeeID = 0;
            SetAdjusterEmployeeFields(true);
        });

        $('#btnAddClaimRep').click(function () {
            _EmployeeID = 0;
            SetClaimRepEmployeeFields(true);
        });

        $("#btnAddInsurance").click(function () {
            _InsuranceCompanyID = 0;
            $("#txtInsuranceCompanyName").val('');
        });

        $("#btnSaveInsuranceCompany").click(function () {

            if($.trim($("#txtInsuranceCompanyName").val())=="")
            {
                alert("Please enter Insurance details.");
                return;
            }

            SaveInsuranceCompany(function (result) {
                if (result.Success === true) {
                    _InsuranceCompanyID = 0;
                    $("#txtInsuranceCompanyName").val('');
                    ShowUserMessage("Insurance Company Saved successfully.", false, 3000)
                    RefreshInsuranceGrid();
                    _IsActionPerformed = true;
                }
                else {
                    ShowUserMessage(result.ErrorMessage, true, 5000)
                }
            });
        });

        $("#btnCancelEdit").click(function () {
            $(".popup-panel-container").hide();
            $("#submitButton").click();
        });

        $("#btnSaveEmployee").click(function () {

            if(_EmployeeType == "")
            {
                alert("Please select/enter Adjuster OR Claim Rep deatails.");
                return;
            }

            SaveEmployee(function (result) {
                if (result.Success === true) {
                    _EmployeeID = 0;
                    ShowUserMessage("Employee Saved successfully.", false, 3000)
                    RefreshInsuranceGrid();
                    _EmployeeType = "";
                    _IsActionPerformed = true;
                }
                else {
                    ShowUserMessage(result.ErrorMessage, true, 5000)
                }
            });
        });

    });

    var _InsuranceCompanyID = 0;
    var _EmployeeID = 0;
    var _EmployeeType = 0;
    var _IsActionPerformed = false;

    function GetInsuranceCompanyParameters()
    {
        var result = { userID: @ViewBag.UserID, showDeletedCompanies:$("#chkShowDeletedInsuranceCompany").is(":checked") };
        return result
    }

    function GetAdjustersParameters()
    {
        var result = { insuranceCompanyID: _InsuranceCompanyID, showDeletedAdjusters:$("#chkShowDeletedAdjusters").is(":checked") };
        return result
    }

    function GetClaimRepsParameters()
    {
        var result = { insuranceCompanyID: _InsuranceCompanyID, showDeletedClaimReps:$("#chkShowDeletedClaimReps").is(":checked") };
        return result
    }

    function ResetEmployeeFields()
    {
        // label
        $('#lblEmpFirstName').text('First Name');
        $('#lblEmpLastName').text('Last Name');
        $('#lblEmpPhone').text('Phone');
        $('#lblEmpExtension').text('Extension');
        $('#lblEmpFax').text('Fax');
        $('#lblEmpEmail').text('Email');

        ClearRepDetails();

        _EmployeeType = "";
        $('#btnSaveEmployee').val('Save');
    }

    function SetAdjusterEmployeeFields(isTxtEmpty)
    {
        // label
        $('#lblEmpFirstName').html('Adjuster First Name');
        $('#lblEmpLastName').text('Adjuster Last Name');
        $('#lblEmpPhone').text('Adjuster Phone');
        $('#lblEmpExtension').text('Extension');
        $('#lblEmpFax').text('Adjuster Fax');
        $('#lblEmpEmail').text('Adjuster Email');

        // text
        if(isTxtEmpty == true)
        {
            ClearRepDetails();
        }

        _EmployeeType = "adjuster";
        $('#btnSaveEmployee').val('Save Adjuster');
    }

    function ClearRepDetails() {
        $('#txtEmpFirstName').val('');
        $('#txtEmpLastName').val('');
        $('#txtEmpPhone').val('');
        $('#txtEmpExtension').val('');
        $('#txtEmpFax').val('');
        $('#txtEmpEmail').val('');
        $("#txtEmpEmail").css("border", "");
    }

    function SetClaimRepEmployeeFields(isTxtEmpty)
    {
        // label
        $('#lblEmpFirstName').text('Claim Rep. First Name');
        $('#lblEmpLastName').text('Claim Rep. Last Name');
        $('#lblEmpPhone').text('Claim Rep. Phone');
        $('#lblEmpExtension').text('Extension');
        $('#lblEmpFax').text('Claim Rep. Fax');
        $('#lblEmpEmail').text('Claim Rep. Email');

        // text
        if(isTxtEmpty == true)
        {
            ClearRepDetails();
        }

        _EmployeeType = "claimrep";
        $('#btnSaveEmployee').val('Save Claim Rep.');
    }

    function InsuranceGridLineSelectionChanged(arg) {

        // Remove the Hover state from all rows
        $("#insurance-grid").find(".k-state-hover").each(function (index) {
            $(this).removeClass("k-state-hover");
        });

        // Get the selected item and call the ClickedItem event
        var row = $("#insurance-grid").find(".k-state-selected").first();
        _InsuranceCompanyID = row.find("td").first().html();

        // set company name in text box
        var insuranceCompanyName = row.find("td").eq(1).html();
        $("#txtInsuranceCompanyName").val(insuranceCompanyName);

        ResetEmployeeFields();
        RefreshAdjusterGrid();
        RefreshClaimRepGrid();

        $(".popup-panel-insurance-right").show();
    }

    function RefreshInsuranceGrid() {

        var grid = $("#insurance-grid").data("kendoGrid");

        if (grid) {
            grid.dataSource.read();

            //// select first row
            //if (grid.dataSource.total() >= 1)
            //{
            //    var firstRow = $("#insurance-grid").find("tbody").find("tr").first();
            //    grid.select(firstRow);
            //    firstRow.addClass("k-state-selected");
            //}
        }

        RefreshAdjusterGrid();
        RefreshClaimRepGrid();
    }

    function RefreshAdjusterGrid() {

        var grid = $("#adjuster-grid").data("kendoGrid");

        if (grid) {
            grid.dataSource.read();
        }
    }

    function RefreshClaimRepGrid() {

        var grid = $("#claimrep-grid").data("kendoGrid");

        if (grid) {
            grid.dataSource.read();
        }
    }

    function SaveInsuranceCompany(successFunction)
    {
        $.ajax({
            url: '@Url.Action("SaveInsuranceCompany", "Insurance")',
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                "userID": @Model.UserID,
                "insuranceCompanyID": _InsuranceCompanyID,
                "insuranceCompanyName": $("#txtInsuranceCompanyName").val()
            }),
            success: successFunction
        });
    }

    function SaveEmployee(successFunction)
    {
        $.ajax({
            url: '@Url.Action("SaveInsuranceEmployee", "Insurance")',
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                "userID": @ViewBag.UserID,
                "loginID": @Model.LoginID,
                "insuranceCompanyID": _InsuranceCompanyID,
                "employeeType": _EmployeeType,
                "employeeID": _EmployeeID,
                "firstName" : $("#txtEmpFirstName").val(),
                "lastName" : $("#txtEmpLastName").val(),
                "phone" : $("#txtEmpPhone").val(),
                "extension" : $("#txtEmpExtension").val(),
                "fax" : $("#txtEmpFax").val(),
                "email" : $("#txtEmpEmail").val()
            }),
            success: successFunction
        });
    }

    function AdjusterGridLineSelectionChanged(arg) {

        // Remove the Hover state from all rows
        $("#adjuster-grid").find(".k-state-hover").each(function (index) {
            $(this).removeClass("k-state-hover");
        });

        // Get the selected item and call the ClickedItem event
        var row = $("#adjuster-grid").find(".k-state-selected").first();
        _EmployeeID = row.find("td").first().html();

        _EmployeeType = "adjuster";

        SetAdjusterEmployeeFields(false);
        RefreshEmployeeFields();
    }

    function ClaimRepGridLineSelectionChanged(arg) {

        // Remove the Hover state from all rows
        $("#claimrep-grid").find(".k-state-hover").each(function (index) {
            $(this).removeClass("k-state-hover");
        });

        // Get the selected item and call the ClickedItem event
        var row = $("#claimrep-grid").find(".k-state-selected").first();
        _EmployeeID = row.find("td").first().html();

        _EmployeeType = "claimrep";

        SetClaimRepEmployeeFields(false);
        RefreshEmployeeFields();
    }

    function RefreshEmployeeFields(ID) {

        $.getJSON('@Url.Action("GetInsuranceEmployee", "Insurance")', { userID: @ViewBag.UserID, id: _EmployeeID }, function (data) {
            if (data) {
                $("#txtEmpFirstName").val(data.FirstName);
                $("#txtEmpLastName").val(data.LastName);
                $("#txtEmpPhone").val(data.Phone);
                $("#txtEmpExtension").val(data.Extension);
                $("#txtEmpFax").val(data.Fax);
                $("#txtEmpEmail").val(data.Email);
                ValidateEmail("txtEmpEmail");
            }
        });
    }

    function DeleteInsurance(id,isDeleted)
    {
        var loadingImage = $.parseHTML("<img src='/Images/animatedCircle.gif' width='15' height='15' id='Loading" + id + "' />");
        $("#DeleteLink" + id).replaceWith(loadingImage);

        $.getJSON("/Insurance/DeleteInsuranceCompany", { userID: @ViewBag.UserID, insuranceCompanyID: id, isDeleted:isDeleted }, function (data)
        {
            if (data != "")
            {
                ShowUserMessage(data, true, 5000);
            }

            $("#txtInsuranceCompanyName").val('');
            _InsuranceCompanyID = 0;
            _IsActionPerformed = true;
            RefreshInsuranceGrid();
        });
    }

    $('.modal-container').hide();

    function show(id, savePosition) {
        if (id)
        {
            var panelToShow = $('#' + id);

            if (panelToShow) {
                $('.modal-container').show();
                panelToShow.show();
            }

            if (ScreenIsSmall() && (savePosition == 'undefined' || savePosition === true))
            {
                SaveScrollPosition();
            }
        }
    }

    function ScreenIsSmall() {
        var sizeDetectorVisible = $(".size-detector").is(":visible");
        return !sizeDetectorVisible;
    }

    function FillInsuranceCompanyDropDown(dropDown)
    {
        $.getJSON('@Url.Action("GetInsuranceCompaniesWithEmptyCompany", "Insurance")', { loginID: @Model.LoginID }, function (data) {

            if (data) {
                if (data.length > 0)
                {
                    dropDown.append("<option value='" + data[0].InsuranceCompanyID + "'" + " selected='selected'>" + data[0].InsuranceCompanyName + "</option>");

                    for(i = 1; i < data.length; i++)
                    {
                        dropDown.append("<option value='" + data[i].InsuranceCompanyID + "'>" + data[i].InsuranceCompanyName + "</option>");
                    }
                }
            }
        });
    }

    $("#chkShowDeletedInsuranceCompany").change(function() {
        if($("#chkShowDeletedInsuranceCompany").is(":checked")==true)
        {
            $("#insurance-grid thead [data-index=2] .k-link").html("Restore")
        }
        else
        {
            $("#insurance-grid thead [data-index=2] .k-link").html("Delete")
        }

        RefreshInsuranceGrid();
    });

    $("#chkShowDeletedAdjusters").change(function() {
        if($("#chkShowDeletedAdjusters").is(":checked")==true)
        {
            $("#adjuster-grid thead [data-index=2] .k-link").html("Restore")
        }
        else
        {
            $("#adjuster-grid thead [data-index=2] .k-link").html("Delete")
        }

        RefreshAdjusterGrid();
    });

    $("#chkShowDeletedClaimReps").change(function() {
        if($("#chkShowDeletedClaimReps").is(":checked")==true)
        {
            $("#claimrep-grid thead [data-index=2] .k-link").html("Restore")
        }
        else
        {
            $("#claimrep-grid thead [data-index=2] .k-link").html("Delete")
        }

        RefreshClaimRepGrid();
    });

    $('#btnAddAdjuster').click(function() {
        SetAdjusterEmployeeFields(true);
    });

    $('#btnAddClaimRep').click(function() {
        SetClaimRepEmployeeFields(true);
    });

    $("#btnAddInsurance").click(function () {
        _InsuranceCompanyID = 0;
        $("#txtInsuranceCompanyName").val('');
    });

    $("#btnSaveInsuranceCompany").click(function () {

        if($.trim($("#txtInsuranceCompanyName").val())=="")
        {
            alert("Please enter Insurance details.");
            return;
        }

        SaveInsuranceCompany(function (result) {
            if (result.Success === true) {
                _InsuranceCompanyID = 0;
                $("#txtInsuranceCompanyName").val('');
                ShowUserMessage("Insurance Company Saved successfully.", false, 3000)
                RefreshInsuranceGrid();
                _IsActionPerformed = true;
            }
            else {
                ShowUserMessage(result.ErrorMessage, true, 5000)
            }
        });
    });

    function DeleteEmployee(employeeType,id,isDeleted)
    {
        var loadingImage = $.parseHTML("<img src='/Images/animatedCircle.gif' width='15' height='15' id='Loading" + id + "' />");
        $("#DeleteLink" + id).replaceWith(loadingImage);

        $.getJSON("/Insurance/DeleteInsuranceEmployee", { userID: @ViewBag.UserID, employeeID: id, isDeleted:isDeleted }, function (data)
        {
            if (data != "")
            {
                ShowUserMessage(data, true, 5000);
            }

            if(employeeType == 'adjuster')
            {
                RefreshAdjusterGrid();
            }
            else if(employeeType == 'claimrep')
            {
                RefreshClaimRepGrid();
            }

            _IsActionPerformed = true;

        });
    }

</script>

@*****************************************************************************************************************************************************************@
@* The Manage Insurance popup *@
@*****************************************************************************************************************************************************************@
<div class="popup-panel-container">

    

    <div class="popup-panel">
        <input type="button" id="btnCancelEdit" class="button nav-btn do-not-disable" value="Cancel" style="margin: 0px; float: right;" />

        <div class="container">

            @* First column, Agent info *@
            <div class="popup-panel-insurance-left">
                <p>
                    <label style="font-size: 0.75em;margin-bottom: -15px;"><input type="checkbox" id="chkShowDeletedInsuranceCompany" />Show Deleted Insurance Companies</label>
                </p>

                <div class="datagrid">
                    @(Html.Kendo().Grid<Proestimator.ViewModel.InsuranceVM>()
                        .Name("insurance-grid")
                        .Columns(columns =>
                        {
                            columns.Bound(item => item.InsuranceCompanyID).Hidden();
                            columns.Bound(item => item.InsuranceCompanyName).HeaderHtmlAttributes(new { @class = "insurance" }).HtmlAttributes(new { @class = "insurance" }).Title("Insurance Company");
                            columns.Bound("").Template(@<text></text>).ClientTemplate(" <a id=\"DeleteInsurance#=InsuranceCompanyID#\" onclick=\"DeleteInsurance(#=InsuranceCompanyID#,#=IsDeleted#)\" style=\"cursor: pointer;\"><img src=\"/images/#=DeleteRestoreImgName#\" width=\"15\" height=\"15\" /></a>").Title(@Proestimator.Resources.ProStrings.Delete).Visible(ViewBag.InsurancePermit);
                        })
                        .Selectable()
                        .Scrollable()
                        .Events(events => events
                            .Change("InsuranceGridLineSelectionChanged")
                        )
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .ServerOperation(false)
                            .Read(read => read.Action("GetInsuranceCompanies", "Insurance").Data("GetInsuranceCompanyParameters"))
                        )
                    )
                </div>

                <div class="container" style="padding-top: 10px;">
                    <label class="inputLabel field-label" style="background-color: whitesmoke;">Insurance Company</label>
                    <div class="field-control">
                        <input id="txtInsuranceCompanyName" name="txtInsuranceCompanyName" type="text" value="" />
                    </div>

                    @if (ViewBag.InsurancePermit)
                    {
                        <input type="button" id="btnSaveInsuranceCompany" class="button nav-btn do-not-disable" value="Save" />
                        <input type="button" id="btnAddInsurance" class="button nav-btn  do-not-disable" value="Add Insurance" />
                    }

                </div>
            </div>

            <div class="popup-panel-insurance-right" style="display: none;">

                <div class="container">

                    <ul class="tab" style="margin-top: 20px;">
                        <li id="tabButtonAdjusters"><a href="javascript:void(0)" class="button" onclick="ShowAdjusters()">@Proestimator.Resources.ProStrings.SavedAdjusters</a></li>
                        <li id="tabButtonClaimReps"><a href="javascript:void(0)" class="button" onclick="ShowClaimReps()">@Proestimator.Resources.ProStrings.SavedClaimReps</a></li>
                    </ul>

                    <div id="EditAdjustersContainer" class="container tabcontent">
                        <p style="margin-top: 0px;">
                            <label style="font-size: 0.75em;width: 150px;float: left;margin-left: 8px;margin-bottom: 0px;"><input type="checkbox" id="chkShowDeletedAdjusters" />Show Deleted Adjusters</label>
                        </p>

                        <div class="half-container" style="width:100%;overflow-y: scroll;">

                            <div class="datagrid" style="margin-left:10px">
                                @(Html.Kendo().Grid<Proestimator.ViewModel.InsuranceCompanyEmployeeVM>()
                                    .Name("adjuster-grid")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(item => item.ID).Hidden();
                                        columns.Bound(item => item.FullName).HeaderHtmlAttributes(new { @class = "insurance" }).HtmlAttributes(new { @class = "insurance" }).Title("Adjuster");
                                        columns.Bound("").Template(@<text></text>).ClientTemplate(" <a id=\"DeleteAdjuster#=ID#\" onclick=\"DeleteEmployee('adjuster',#=ID#,#=IsDeleted#)\" style=\"cursor: pointer;\"><img src=\"/images/#=DeleteRestoreImgName#\" width=\"15\" height=\"15\" /></a>").Title(@Proestimator.Resources.ProStrings.Delete).Visible(ViewBag.InsurancePermit);
                                    })
                                    .Selectable()
                                    .Scrollable()
                                    .Events(events => events
                                        .Change("AdjusterGridLineSelectionChanged")
                                    )
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .ServerOperation(false)
                                        .Read(read => read.Action("GetAdjusters", "Insurance").Data("GetAdjustersParameters"))
                                    )
                                )
                            </div>
                        </div>

                        @if (ViewBag.InsurancePermit)
                        {
                            <input type="button" class="button nav-btn  do-not-disable" id="btnAddAdjuster" value="Add Adjuster" style="font-size: 0.75em;float: left;margin-left: 10px;margin-top: 4px;">
                        }
                    </div>

                    <div id="EditClaimRepsContainer" class="container tabcontent">
                        <p style="margin-top: -4px;">
                            <label style="font-size: 0.75em;width: 154px;float: left;margin-bottom: 0px;margin-left: 8px;margin-top: 4px;"><input type="checkbox" id="chkShowDeletedClaimReps" />Show Deleted ClaimReps</label>
                        </p>

                        <div class="half-container" style="width:100%;overflow-y: scroll;">
                            <div class="datagrid" style="margin-left:10px">
                                @(Html.Kendo().Grid<Proestimator.ViewModel.InsuranceCompanyEmployeeVM>()
                                    .Name("claimrep-grid")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(item => item.ID).Hidden();
                                        columns.Bound(item => item.FullName).HeaderHtmlAttributes(new { @class = "insurance" }).HtmlAttributes(new { @class = "insurance" }).Title("Claim Rep.");
                                        columns.Bound("").Template(@<text></text>).ClientTemplate(" <a id=\"DeleteClaimRep#=ID#\" onclick=\"DeleteEmployee('claimrep',#=ID#,#=IsDeleted#)\" style=\"cursor: pointer;\"><img src=\"/images/#=DeleteRestoreImgName#\" width=\"15\" height=\"15\" /></a>").Title(@Proestimator.Resources.ProStrings.Delete).Visible(ViewBag.InsurancePermit);
                                    })
                                    .Selectable()
                                    .Scrollable()
                                    .Events(events => events
                                        .Change("ClaimRepGridLineSelectionChanged")
                                    )
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .ServerOperation(false)
                                        .Read(read => read.Action("GetClaimReps", "Insurance").Data("GetClaimRepsParameters"))
                                    )
                                )
                            </div>
                        </div>

                        @if (ViewBag.InsurancePermit)
                        {
                            <input type="button" class="button nav-btn  do-not-disable" id="btnAddClaimRep" value="Add Claim Rep" style="font-size: 0.75em;float: left;margin-left: 10px;">
                        }
                    </div>
                </div>

                @*****************************************************************************************************************************************************************@
                @* The selected adjuster or claim rep details. *@
                @*****************************************************************************************************************************************************************@
                <div id="empAdjusterClaimRep" class="container" style="margin-top:5px">

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half" style="background-color: whitesmoke;" id="lblEmpFirstName" name="lblEmpFirstName">First Name</label>
                        <div class="field-control-half">
                            <input autocomplete="off" id="txtEmpFirstName" name="txtEmpFirstName" type="text" />
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half" style="background-color: whitesmoke;" id="lblEmpLastName" name="lblEmpLastName">Last Name</label>
                        <div class="field-control-half">
                            <input autocomplete="off" id="txtEmpLastName" name="txtEmpLastName" type="text" />
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half" style="background-color: whitesmoke;" id="lblEmpPhone" name="lblEmpPhone">Phone</label>
                        <div class="field-control-half">
                            <input autocomplete="off" id="txtEmpPhone" name="txtEmpPhone" type="tel" class="phone" />
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half" style="background-color: whitesmoke;" id="lblEmpExtension" name="lblEmpExtension">Extension</label>
                        <div class="field-control-half">
                            <input autocomplete="off" id="txtEmpExtension" name="txtEmpExtension" type="text" />
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half" style="background-color: whitesmoke;" id="lblEmpFax" name="lblEmpFax">Fax</label>
                        <div class="field-control-half">
                            <input autocomplete="off" id="txtEmpFax" name="txtEmpFax" type="tel" class="phone" />
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half" style="background-color: whitesmoke;" id="lblEmpEmail" name="lblEmpEmail">Email</label>
                        <div class="field-control-half">
                            <input autocomplete="off" id="txtEmpEmail" name="txtEmpEmail" type="email" class="email-address" />
                        </div>
                    </div>

                    <div class="field-wrapper-half" style="float:right;font-size: 0.75em; text-align: right;">
                        @if (ViewBag.InsurancePermit)
                        {
                            <input type="button" id="btnSaveEmployee" class="button nav-btn do-not-disable" value="Save" />
                        }

                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<div id="workDesk" class="page-container">

    @using (Html.BeginForm("Insurance", "Insurance", FormMethod.Post, new { @class = "container" }))
    {
        <input type="hidden" id="redirectData" name="redirectDataField" />

        @Html.HiddenFor(o => o.LoginID)
        @Html.HiddenFor(o => o.EstimateID)

        @Html.HiddenFor(model => model.ClaimantVM.ContactID)
        @Html.HiddenFor(model => model.ClaimantNotes)
        @Html.HiddenFor(model => model.InsuredVM.ContactID)
        @Html.HiddenFor(model => model.InsuredNotes)
        @Html.HiddenFor(model => model.AgentVM.ContactID)
        @Html.HiddenFor(model => model.AdjusterVM.ContactID)
        @Html.HiddenFor(model => model.ClaimRepVM.ContactID)

        Html.EnableClientValidation(false);

        <div id="estimateFormHeader">

            <div id="formHeader-back">
                <a class="button nav-btn" data-link-id="AddParts-Back" href="javascript:SubmitAndRedirect('/@ViewBag.UserID/estimate/@Model.EstimateID/add-parts');">@Proestimator.Resources.ProStrings.AddPartsBackButton</a>
            </div>

            <div id="formHeader-center">
                <h1>@Proestimator.Resources.ProStrings.InsuranceInformation</h1>

                @if (!Model.EstimateIsLocked)
                {
                    <input id="submitButton" class="button nav-btn" type="submit" value="@Proestimator.Resources.ProStrings.Save" />
                }
                @if (Model.EstimateIsLocked)
                {
                    <p class="error-message">@Proestimator.Resources.ProStrings.Estimate_Message_LockedNoEdit</p>
                }

            </div>

            <div id="formHeader-next">
                <a class="button nav-btn" data-link-id="Images-Next" href="javascript:SubmitAndRedirect('/@ViewBag.UserID/estimate/@Model.EstimateID/images');">@Proestimator.Resources.ProStrings.AddImagesPageButton </a>
            </div>

        </div>

        <div class="container hack-fix">

            @*****************************************************************************************************************************************************************@
            @* Part 1. Insurance Information *@
            @*****************************************************************************************************************************************************************@
            <div class="container">

                <fieldset>
                    <legend><span class="number">1</span>@Proestimator.Resources.ProStrings.InsuranceInfoHeader</legend>

                    <div class="half-container">

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.PolicyNumber</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.PolicyNumber, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimNumber</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.ClaimNumber, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.Deductible $</label>
                            <div class="field-control">
                                @Html.TextBoxFor(model => model.Deduction, new { @class = "currency", autocomplete = "off" })
                            </div>
                        </div>

                    </div>

                    <div class="half-container">
                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.CoverageType</label>
                            <div class="field-control">
                                @{
                                    List<ProEstimatorData.Models.SubModel.SimpleListItem> coverlist = new List<ProEstimatorData.Models.SubModel.SimpleListItem>();
                                    coverlist.Add(new ProEstimatorData.Models.SubModel.SimpleListItem("-----" + Proestimator.Resources.ProStrings.Select + "-----", "255"));
                                    coverlist.Add(new ProEstimatorData.Models.SubModel.SimpleListItem(Proestimator.Resources.ProStrings.Comprehensive, "0"));
                                    coverlist.Add(new ProEstimatorData.Models.SubModel.SimpleListItem(Proestimator.Resources.ProStrings.Collision, "1"));
                                    coverlist.Add(new ProEstimatorData.Models.SubModel.SimpleListItem(Proestimator.Resources.ProStrings.ThirdParty, "2"));
                                    SelectList CoverTypeList = new SelectList(coverlist, "Value", "Text");
                                }

                                @Html.DropDownListFor(model => model.CoverageType, CoverTypeList)
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.DateOfLoss</label>
                            <div class="field-control">
                                @Html.TextBoxFor(model => model.DateOfLoss, new { autocomplete = "off", @class = "datepicker" })
                            </div>
                        </div>
                    </div>

                </fieldset>

            </div>
        </div>
        @*****************************************************************************************************************************************************************@
        @* End part 1 *@
        @*****************************************************************************************************************************************************************@

        @*****************************************************************************************************************************************************************@
        @* Part 2. Insurance Company *@
        @*****************************************************************************************************************************************************************@
        <div class="container">

            <fieldset>
                <legend><span class="number">2</span>@Proestimator.Resources.ProStrings.InsuranceCompany</legend>

                @* First column, Agent info *@
                <div class="half-container">

                    @if (Model.InsuranceCompanies.Count() > 1)
                    {
                        <div class="field-wrapper existingInsuranceCompany">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.ExistingInsuranceCompanyName</label>
                            <div class="field-control">
                                @Html.DropDownListFor(model => model.InsuranceCompanyID, Model.InsuranceCompanies)
                            </div>
                        </div>
                    }

                    <div class="field-wrapper manualInsuranceCompany">
                        <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.InsuranceCompanyName</label>
                        <div class="field-control">
                            @Html.TextBoxFor(model => model.InsuranceCompanyName, new { autocomplete = "off" })
                            @Html.CheckBoxFor(o => o.UseLinkedInsuranceCompany, new { @style = "display: none;" })
                        </div>
                    </div>

                    <div class="field-wrapper" style="margin-bottom:10px">
                        <label class="inputLabel field-label"></label>
                        <div class="field-control">
                            <input type="button" id="btnManageInsurance" value="Manage Insurance" />
                        </div>
                    </div>

                    <div class="field-wrapper manualInsuranceCompany">
                        <label class="inputLabel field-label"></label>
                        <div class="field-control">
                            <label style="font-size: 0.75em;">@Html.CheckBoxFor(model => model.SaveInsuranceInfo)@Proestimator.Resources.ProStrings.SaveInsuranceProfile</label>
                        </div>
                    </div>

                </div>

                @* Agent information *@
                <div class="half-container">
                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AgentFirstName</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AgentVM.FirstName, new { autocomplete = "off" })
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AgentLastName</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AgentVM.LastName, new { autocomplete = "off" })
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AgentPhone</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AgentVM.Phone1, new { autocomplete = "off", @type = "tel", @class = "phone" })
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.Extension</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AgentVM.Extension1, new { autocomplete = "off" })
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AgentFax</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AgentVM.Fax, new { autocomplete = "off", @type = "tel", @class = "phone" })
                        </div>
                    </div>

                    <div class="field-wrapper-half">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AgentEmail</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AgentVM.Email, new { autocomplete = "off", @class = "email-address" })
                        </div>
                    </div>

                </div>

                <div style="clear: both; padding-top: 20px;"></div>

                @* Adjuster Information *@
                <div class="half-container">

                    <div class="field-wrapper">
                        <label class="inputLabel field-label saved-adjusters-controls">@(Model.AdjustersList != null ? Proestimator.Resources.ProStrings.SavedAdjusters : " ")</label>
                        <div class="field-control">
                            @Html.DropDownListFor(model => model.SavedAdjusterID, Model.AdjustersList, new { @class = "saved-adjusters-controls" })
                            @Html.CheckBoxFor(o => o.UseSavedAdjuster, new { @style = "display: none;" })
                        </div>
                    </div>

                    <div class="field-wrapper-half adjuster-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AdjusterFirstName</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AdjusterVM.FirstName, new { autocomplete = "off" })
                        </div>
                    </div>

                    <div class="field-wrapper-half adjuster-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AdjusterLastName</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AdjusterVM.LastName, new { autocomplete = "off" })
                        </div>
                    </div>

                    <div class="field-wrapper-half adjuster-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AdjusterPhone</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AdjusterVM.Phone1, new { autocomplete = "off", @type = "tel", @class = "phone" })
                        </div>
                    </div>

                    <div class="field-wrapper-half adjuster-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.Extension</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AdjusterVM.Extension1, new { autocomplete = "off" })
                        </div>
                    </div>

                    <div class="field-wrapper-half adjuster-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AdjusterFax</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AdjusterVM.Fax, new { autocomplete = "off", @type = "tel", @class = "phone" })
                        </div>
                    </div>

                    <div class="field-wrapper-half adjuster-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.AdjusterEmail</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.AdjusterVM.Email, new { autocomplete = "off", @class = "email-address" })
                        </div>
                    </div>

                    <div class="field-wrapper-half adjuster-inputs saved-adjusters-controls">
                        <label class="inputLabel field-label-half"></label>
                        <div class="field-control-half">
                            <label style="font-size: 0.75em;">@Html.CheckBoxFor(model => model.SaveAdjusterInfo) Save Adjuster</label>
                        </div>
                    </div>
                </div>

                @* Second column, Claim rep info *@
                <div class="half-container">

                    <div class="field-wrapper">
                        <label class="inputLabel field-label saved-claimreps-controls">@(Model.ClaimRepList != null ? Proestimator.Resources.ProStrings.SavedClaimReps : " ")</label>
                        <div class="field-control">
                            @Html.DropDownListFor(model => model.SavedClaimRepID, Model.ClaimRepList, new { @class = "saved-claimreps-controls" })
                            @Html.CheckBoxFor(o => o.UseSavedClaimRep, new { @style = "display: none;" })
                        </div>
                    </div>
                    <div class="field-wrapper-half claimrep-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimRepFirstName</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.ClaimRepVM.FirstName, new { autocomplete = "off" })
                        </div>
                    </div>

                    <div class="field-wrapper-half claimrep-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimRepLastName</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.ClaimRepVM.LastName, new { autocomplete = "off" })
                        </div>
                    </div>

                    <div class="field-wrapper-half claimrep-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimRepPhone</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.ClaimRepVM.Phone1, new { autocomplete = "off", @type = "tel", @class = "phone" })
                        </div>
                    </div>

                    <div class="field-wrapper-half claimrep-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.Extension</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.ClaimRepVM.Extension1, new { autocomplete = "off" })
                        </div>
                    </div>

                    <div class="field-wrapper-half claimrep-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimRepFax</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.ClaimRepVM.Fax, new { autocomplete = "off", @type = "tel", @class = "phone" })
                        </div>
                    </div>

                    <div class="field-wrapper-half claimrep-inputs">
                        <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimRepEmail</label>
                        <div class="field-control-half">
                            @Html.TextBoxFor(model => model.ClaimRepVM.Email, new { autocomplete = "off", @class = "email-address" })
                        </div>
                    </div>

                    <div class="field-wrapper-half claimrep-inputs saved-claimreps-controls">
                        <label class="inputLabel field-label-half"></label>
                        <div class="field-control-half">
                            <label style="font-size: 0.75em;">@Html.CheckBoxFor(model => model.SaveClaimRepInfo) Save Claim Rep</label>
                        </div>
                    </div>

                </div>
            </fieldset>
        </div>
        @*****************************************************************************************************************************************************************@
        @* End of Part 2 *@
        @*****************************************************************************************************************************************************************@

        @*****************************************************************************************************************************************************************@
        @* Part 3. Claimant Information *@
        @*****************************************************************************************************************************************************************@
        <div id="claimantContainer" class="container" style="padding-top:8px;">

            <fieldset id="containerFieldSet">

                <legend><span class="number">3</span> @Proestimator.Resources.ProStrings.ClaimantHeader</legend>

                @* Part 3 A - Claimant contact info *@
                <label class="inputText">
                    @Html.CheckBoxFor(x => x.ClaimantSameAsOwner, new { @id = "claimantCheckbox" })
                    @Proestimator.Resources.ProStrings.SameAsOwner
                </label>

                <div id="claimantInfo" class="container">
                    <div class="half-container">

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimantFirstName</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.ClaimantVM.FirstName, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimantLastName</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.ClaimantVM.LastName, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimantMobile</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.ClaimantVM.Phone1, new { autocomplete = "off", @type = "tel", @class = "phone" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.Extension</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.ClaimantVM.Extension1, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimantEmail</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.ClaimantVM.Email, new { autocomplete = "off", @class = "email-address" })
                            </div>
                        </div>

                    </div>

                    @* Part 3 B - Claimant Address *@
                    <div class="half-container">
                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.ClaimantBusinessName</label>
                            <div class="field-control">
                                @Html.TextBoxFor(model => model.ClaimantVM.BusinessName, new { autocomplete = "off", @class = "col" })
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.ClaimantAddress1</label>
                            <div class="field-control">
                                @Html.TextBoxFor(model => model.ClaimantAddressVM.Line1, new { autocomplete = "off", @class = "col" })
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.ClaimantAddress2</label>
                            <div class="field-control">
                                @Html.TextBoxFor(model => model.ClaimantAddressVM.Line2, new { autocomplete = "off", @class = "col" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.ClaimantCity</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.ClaimantAddressVM.City, new { autocomplete = "off", @class = "col" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.States</label>
                            <div class="field-control-half">
                                @Html.DropDownListFor(model => model.ClaimantAddressVM.State, (SelectList)ViewBag.States)
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.Zip</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.ClaimantAddressVM.Zip, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">&nbsp;</label>
                            <div class="field-control-half">
                                @{
                                    List<string> timezones = new List<string>();
                                    timezones.Add(Proestimator.Resources.ProStrings.TimeZone_Eastern);
                                    timezones.Add(Proestimator.Resources.ProStrings.TimeZone_Central);
                                    timezones.Add(Proestimator.Resources.ProStrings.TimeZone_Mountain);
                                    timezones.Add(Proestimator.Resources.ProStrings.TimeZone_Pacific);
                                    timezones.Add(Proestimator.Resources.ProStrings.TimeZone_Alaska);
                                    timezones.Add(Proestimator.Resources.ProStrings.TimeZone_Hawaii);
                                }
                                @Html.DropDownListFor(model => model.ClaimantAddressVM.TimeZone, new SelectList(timezones))
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>

        @*****************************************************************************************************************************************************************@
        @* Part 4. Insured *@
        @*****************************************************************************************************************************************************************@
        <div id="insuredContainer" class="container">

            <fieldset id="customerFieldSet" style="padding-left: 0px;">

                <legend><span class="number">4</span> @Proestimator.Resources.ProStrings.InsuredHeader</legend>

                @* Part 4 A - Insured contact info *@
                <div class="container">
                    <div class="half-container">
                        <div class="field-wrapper-half">
                            <label class="inputText">
                                @Html.CheckBoxFor(x => x.InsuredSameAsOwner, new { @id = "insuredCheckbox" })
                                @Proestimator.Resources.ProStrings.SameAsOwner
                            </label>
                        </div>
                        <div class="field-wrapper-half">
                            <label class="inputText print-insured">
                                @Html.CheckBoxFor(x => x.PrintInsured, new { @id = "insuredPrintCheckbox" })
                                @Proestimator.Resources.ProStrings.PrintInsured
                            </label>
                        </div>
                    </div>

                    <div class="half-container">
                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half"></label>
                            <div class="field-control-half">
                            </div>
                        </div>
                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half"></label>
                            <div class="field-control-half">
                            </div>
                        </div>
                    </div>
                </div>

                <div id="insuredInfo" class="container">

                    <div class="half-container">

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.InsuredFirstName</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.InsuredVM.FirstName, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.InsuredLastName</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.InsuredVM.LastName, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.InsuredMobile</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.InsuredVM.Phone1, new { autocomplete = "off", @type = "tel", @class = "phone" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.Extension</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.InsuredVM.Extension1, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.InsuredEmail</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.InsuredVM.Email, new { autocomplete = "off", @class = "email-address" })
                            </div>
                        </div>
                    </div>

                    @* Part 4 B - Insured Address *@
                    <div class="half-container">
                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.InsuredBusinessName</label>
                            <div class="field-control">
                                @Html.TextBoxFor(model => model.InsuredVM.BusinessName, new { autocomplete = "off", @class = "col" })
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.Address1</label>
                            <div class="field-control">
                                @Html.TextBoxFor(model => model.InsuredAddressVM.Line1, new { autocomplete = "off", @class = "col" })
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.Address2</label>
                            <div class="field-control">
                                @Html.TextBoxFor(model => model.InsuredAddressVM.Line2, new { autocomplete = "off", @class = "col" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.InsuredCity</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.InsuredAddressVM.City, new { autocomplete = "off", @class = "col" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.States</label>
                            <div class="field-control-half">
                                @Html.DropDownListFor(model => model.InsuredAddressVM.State, (SelectList)ViewBag.States)
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.InsuredZip</label>
                            <div class="field-control-half">
                                @Html.TextBoxFor(model => model.InsuredAddressVM.Zip, new { autocomplete = "off" })
                            </div>
                        </div>

                        <div class="field-wrapper-half">
                            <label class="inputLabel field-label-half">@Proestimator.Resources.ProStrings.TimeZone</label>
                            <div class="field-control-half">
                                @Html.DropDownListFor(model => model.InsuredAddressVM.TimeZone, new SelectList(timezones))
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>

        </div>
    }
</div>