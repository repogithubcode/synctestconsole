@model Proestimator.ViewModel.UserAccountsPageVM

@*@using Resources;*@
@using System.Linq;
@using Proestimator.Resources;

@{
    ViewBag.Title = Proestimator.Resources.ProStrings.PageTitle_LoginInformation;
}

<head>
    <title></title>

</head>

<style>
    .option-wrapper {
        clear: both;
        padding: 5px;
        height: 30px;
        font-size: 13px !important;
    }

    .option-left {
        width: 30%;
        float: left;
    }

    .option-right {
        width: 70%;
        float: right;
    }

    input[type="checkbox"][readonly] {
        pointer-events: none;
        opacity: 0.5;
    }

    @@media (min-width: 900px) {
        .four-tenth {
            width: 40%;
        }

        .six-tenth {
            width: 60%;
        }
    }
</style>

<script>

    var _siteUserID = 0;

    var _refreshPermission = false;
    var _fadeOutComplete = false;
    var _doNew = false;
    var _userData;

    var _fadeSpeed = 200;

    var _activeAccounts = 0;
    var _maxUsers = @Model.MaxUsers.ToString();

    $(document).ready(function () {
        $("#checkboxDeleted").change(function () {
            RefreshSiteUsersGrid();
        });
    });

    function IsEmail(email) {
        var regex = /^([a-zA-Z0-9_\.\-\+])+\@@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        if(!regex.test(email)) {
            return false;
        } else {
            return true;
        }
    }

    function GetSiteUsersParameters() {
        var result =
        {
              userID: @ViewBag.UserID
            , loginID: @Model.LoginID
            , deleted: $("#checkboxDeleted").is(":checked")
        };
        return result
    }

    function RefreshSiteUsersGrid() {
        var grid = $("#site-users-grid").data("kendoGrid");

        if (grid) {
            grid.dataSource.read();
            grid.refresh();
        }
    }

    function SiteUsersGridDataChanged(arg) {
        // Wire up hilighting the row when hovering.
        $("#site-users-grid tbody tr").hover(
            function () {
                // Get the hovered row and its LineItemPreview data
                var row = $(this).closest("tr");
                //var userID = row.find("td").first().html();

                row.toggleClass("k-state-hover");
            }
        );

        // Change the class of deleted rows
        var grid = $("#site-users-grid").data("kendoGrid");
        var models = grid.dataSource.data();

        var clearForm = true;   // clear the form unless the selected site user is in the grid
        _activeAccounts = 0;

        for (i = 0; i < models.length; i++) {
            var row = grid.table.find("[data-uid=" + models[i].uid + "]");

            if (models[i].IsDeleted === true) {
                row.addClass("deleted-row");
            }

            if (_siteUserID > 0) {
                if (models[i].UserID == _siteUserID) {
                    grid.select(row);
                    clearForm = false;
                }
            }

            if (models[i].IsDeleted === false) {
                _activeAccounts += 1;
            }
        }

        $("#usedCount").text(_activeAccounts + "/" + _maxUsers);

        //if (clearForm === true) {
        //    NewUser();
        //}
    }

    function SiteUsersLineSelectionChanged(arg) {
        // Remove the Hover state from all rows
        $(".k-state-hover").each(function (index) {
            $(this).removeClass("k-state-hover");
        });

        // Get the selected item and call the ClickedItem event
        var row = $("#site-users-grid").find(".k-state-selected").first();
        _siteUserID = row.find("td").first().html();

        _fadeOutComplete = false;
        HideUsersForm();

         $.ajax({
            url: '@Url.Action("GetSiteUser", "Settings")',
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ "userID": @ViewBag.UserID, "loginID": @Model.LoginID, "targetUserID": _siteUserID }),
            success: function (result) {
                if (result.Success)
                {
                    _refreshPermission = true;
                    _userData = result;
                    ShowFormIfData();
                }
                else
                {
                    ShowUserMessage(result.ErrorMessage, true, 5000);
                }
            }
         });
    }

    function HideUsersForm() {
        _userData = null;
        _fadeOutComplete = false;

        $("#noMoreUsers").fadeOut(_fadeSpeed);

        $("#siteUserForm").fadeOut(_fadeSpeed, function () {
            _fadeOutComplete = true;
            ShowFormIfData();
        });
    }

    function ShowFormIfData() {
        if (_fadeOutComplete === true)
        {
            if (_userData) {
                var doLoad = true;

                if (_userData.SiteUser.IsDeleted === true && !$("#checkboxDeleted").is(":checked")) {
                    doLoad = false;
                }

                if (doLoad === true) {
                    LoadUserDetails(_userData);
                    $("#siteUserForm").fadeIn(_fadeSpeed);
                    _userData = null;
                }
            }
            else if (_doNew === true) {
                _doNew = false;

                $("#EmailAddress").val("");
                $("#Name").val("");
                $("#Password").val("");

                $("#btnDelete").hide();

                $("#btnSave").val("Create User");

                $(".permission-checkbox").prop("checked", false);
                $(".permission-checkbox").prop('readonly', '');

                $(".k-state-selected").removeClass("k-state-selected");
                $(".k-state-hover").removeClass("k-state-hover");

                if (_maxUsers > _activeAccounts) {
                    $("#siteUserForm").fadeIn(_fadeSpeed);
                }
                else {
                    $("#noMoreUsers").fadeIn(_fadeSpeed);
                }
            }
        }
    }

    function LoadUserDetails(userVM) {
        $("#siteUserForm").fadeIn(_fadeSpeed);

        if (_refreshPermission) {
            RefreshPermissionGrid();
        }

        $("#EmailAddress").val(userVM.SiteUser.EmailAddress);
        $("#Name").val(userVM.SiteUser.Name);
        $("#Password").val(userVM.SiteUser.Password);

        ValidateEmail("EmailAddress");

        $("#btnSave").val("Save");

        $("#btnDelete").show();
        if (userVM.SiteUser.IsDeleted) {
            if (_activeAccounts < _maxUsers) {
                $("#btnDelete").val("Un-Delete");
            }
            else {
                $("#btnDelete").hide();
            }
        }
        else if (_activeAccounts > 1) {
            $("#btnDelete").val("Delete");
        }
        else {
            $("#btnDelete").hide();
        }

        //var wrapper = $("#permissionsWrapper");

        //$.each(userVM.Permissions, function (i, item) {
        //    wrapper.find("[data-tag= '" + item.Tag + "']").prop('checked', item.HasPermission);
        //});
    }

    function NewUser() {
        _siteUserID = 0;
        _doNew = true;
        HideUsersForm();
    }

    function SaveUser() {
        var permissionsSave = "";
        $(".permission-checkbox").each(function () {
            var tag = $(this).attr("data-tag");
            var isChecked = $(this).is(":checked");

            if (tag == "Admin" && isChecked) {
                permissionsSave = tag + "-" + isChecked;
                return false;
            }

            permissionsSave += tag + "-" + isChecked + "|";        
        });

        _fadeOutComplete = false;
        HideUsersForm();

        $.ajax({
            url: '@Url.Action("SaveSiteUser", "Settings")',
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                  "userID": @ViewBag.UserID
                , "loginID": @Model.LoginID
                , "siteUserID": _siteUserID
                , "email": $("#EmailAddress").val()
                , "name": $("#Name").val()
                , "password": $("#Password").val()
                , "permissions": permissionsSave
            }),
            success: function (result) {
                _refreshPermission = result.Success;
                if (_refreshPermission) {
                    _siteUserID = result.SiteUser.UserID;
                }
                _userData = result;
                ShowFormIfData();

                if (result.Success)
                {
                    RefreshSiteUsersGrid();

                    var saveMessage = "User saved.";
                    if (result.ErrorMessage != "") {
                        saveMessage += "  " + result.ErrorMessage;
                    }

                    ShowUserMessage(saveMessage, false, 3000);
                }
                else
                {
                    ShowUserMessage(result.ErrorMessage, true, 3000);
                }
            }
        });
    }

    function DeleteUser() {
        if (_siteUserID > 0) {
            $.ajax({
                url: '@Url.Action("DeleteSiteUser", "Settings")',
                type: "POST",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                      "userID": @ViewBag.UserID
                    , "loginID": @Model.LoginID
                    , "siteUserID": _siteUserID
                }),
                success: function (result) {
                    _userData = result;
                    // ShowFormIfData();

                    if (result.Success)
                    {
                        _fadeOutComplete = false;
                        HideUsersForm();

                        RefreshSiteUsersGrid();
                        ShowUserMessage("User deleted.", false, 3000);
                    }
                    else{
                        ShowUserMessage(result.ErrorMessage, true, 5000);
                    }
                }
            });
        }
    }

    function GetPermissionsParameters() {
        var result =
        {
              userID: @ViewBag.UserID
            , siteUserID: _siteUserID
        };
        return result
    }

    function RefreshPermissionGrid() {
        var grid = $("#permissiongrid").data("kendoGrid");

        if (grid) {
            grid.dataSource.read();
            grid.refresh();
        }
    }

    function PermissionClick(checkbox) {
        var checked = checkbox.checked;
        var tag = $(checkbox).attr("data-tag");

        if (tag == "Admin") {
            $(".permission-checkbox").prop('checked', checked);

            if (checked) {
                $(".permission-checkbox").each(function () {
                    if ($(this).attr("data-tag") != "Admin") {
                        $(this).prop('readonly', 'readonly');
                    }
                });
            }
            else {
                $(".permission-checkbox").each(function () {
                    if ($(this).attr("data-tag") != "Admin") {
                        $(this).prop('readonly', '');
                    }
                });
            }  
        }
    }

    function PermissionGridDataChanged(arg) {
        var grid = $("#permissiongrid").data("kendoGrid");
        var models = grid.dataSource.data();
        var adminChecked = false;
        
        for (var i = 0; i < models.length; i++) {
            if (models[i].Tag == "Admin") {
                adminChecked = models[i].HasPermission;
                break;
            }
        }

        if (adminChecked) {
            for (var i = 0; i < models.length; i++) {
                if (models[i].Tag != "Admin") {
                    var checkbox = grid.table.find("[data-tag= '" + models[i].Tag + "']");
                    checkbox.prop('checked', adminChecked);
                    checkbox.prop('readonly', 'readonly');
                }
            }
        }
    }

</script> 

<div id="workDesk" class="page-container">

    @using (Html.BeginForm("UserAccounts", "Settings", FormMethod.Post, new { @class = "container" }))
    {
        @Html.Partial("SettingTopMenu")

        @*<input type="hidden" id="redirectData" name="redirectDataField" />*@
        @Html.HiddenFor(o => o.LoginID)

        <div class="tabcontent container tabcontent2" style="padding-bottom: 20px;">
            <div class="container" style="margin-top: 30px;">

                <div class="container four-tenth">
                    <a href="~/Files/Instructions/Creating Additional Users in Pro-Estimator.pdf" target="_blank" style="color: black; font-size: small;">
                        <img src="~/Images/help.png" width="20" height="20" style="margin-top: -2px; margin-left: 0px; margin-right: 0px;" />
                    </a>

                    <div class="datagrid">
                        @(Html.Kendo().Grid<Proestimator.ViewModel.SiteUserVM>()
                        .Name("site-users-grid")
                        .Columns(columns =>
                        {
                            columns.Bound(item => item.UserID).Hidden();
                            columns.Bound(item => item.EmailAddress).MinScreenWidth(150).Title(@Proestimator.Resources.ProStrings.EmailAddress);
                            columns.Bound(item => item.Name).MinScreenWidth(150).Title(@Proestimator.Resources.ProStrings.Name);
                            columns.Bound(item => item.Admin).ClientTemplate("<img src='../../Images/checkmark.png' style='display: #: (Admin ? 'block' : 'none') #;' />").Title("Admin").Width(50);
                        })
                        .Sortable()
                        .Selectable()
                        .Events(events => events
                            .DataBound("SiteUsersGridDataChanged")
                            .Change("SiteUsersLineSelectionChanged")
                        )
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .ServerOperation(false)
                            .Sort(sort => sort.Add("EmailAddress").Ascending())
                            .Read(read => read.Action("GetSiteUsers", "Settings").Data("GetSiteUsersParameters"))
                            .PageSize(20)
                        )
                    )
                    </div>

                    <input type="button" class="button nav-btn do-not-disable" style="float: left;" onclick="NewUser()" value="@Proestimator.Resources.ProStrings.New" />
                    <div id="usedCount" style="float: left; margin-left: 5px; margin-top: 11px;">1/5</div>
                    <label style="font-size: small; float: right; margin-top: 5px;"><input id="checkboxDeleted" type="checkbox" />Show Deleted</label>

                </div>

                <div class="container six-tenth">

                    <div id="siteUserForm" style="display: none;">

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">&nbsp;</label>
                            <div class="field-control">
                                <legend>User Info</legend>
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.EmailAddress</label>
                            <div class="field-control">
                                <input type="text" id="EmailAddress" class="email-address" />
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.Name</label>
                            <div class="field-control">
                                <input type="text" id="Name" />
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">@Proestimator.Resources.ProStrings.Password</label>
                            <div class="field-control">
                                <input type="password" id="Password" />
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">&nbsp;</label>
                            <div class="field-control">
                                <legend>User Permissions</legend>
                            </div>
                        </div>

                        @*<div id="permissionsWrapper">
            @foreach (Proestimator.ViewModel.SiteUserPermissionVM permission in Model.Permissions)
            {
                <div class="field-wrapper">
                    <label class="inputLabel field-label">&nbsp;</label>
                    <div class="field-control">
                        <label>
                            <div class="option-wrapper">
                                <div class="option-left">
                                    <input class="permission-checkbox" data-tag="@permission.Tag" type="checkbox" />@permission.Name
                                </div>
                                <div class="option-right">
                                    @permission.Description
                                </div>
                            </div>
                        </label>
                    </div>
                </div>
            }
        </div>*@
                        <div class="field-wrapper">
                            <label class="inputLabel field-label">&nbsp;</label>
                            <div class="field-control">

                                <div class="datagrid" style="max-height: 400px; overflow-y: auto;">
                                    @(Html.Kendo().Grid<Proestimator.ViewModel.SiteUserPermissionVM>()
                            .Name("permissiongrid")
                            .Columns(columns =>
                            {
                                columns.Bound(item => item.Tag).Hidden();
                                columns.Bound("").Sortable(false).Template(@<text></text>).ClientTemplate("<input class='permission-checkbox' data-tag='#=Tag#' type='checkbox' onclick='PermissionClick(this);' # if (HasPermission) { #" + "checked" + "# } #  style='margin-left:5px;' />").Title("Select").Width("10%");
                                columns.Bound(item => item.Name).Title("Permission Type");
                                columns.Bound(item => item.Description).Title("Description");
                            })
                            .Events(events => events
                            .DataBound("PermissionGridDataChanged")
                            )
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .ServerOperation(false)
                                .Read(read => read.Action("GetPermissions", "Settings").Data("GetPermissionsParameters"))
                            )
                            )
                                </div>
                            </div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">&nbsp;</label>
                            <div class="field-control">&nbsp;</div>
                        </div>

                        <div class="field-wrapper">
                            <label class="inputLabel field-label">&nbsp;</label>
                            <div class="field-control">
                                <input type="button" id="btnSave" class="button nav-btn do-not-disable" onclick="SaveUser()" value="@Proestimator.Resources.ProStrings.Save" />
                                <input type="button" id="btnDelete" class="button nav-btn do-not-disable" onclick="DeleteUser()" value="@Proestimator.Resources.ProStrings.Delete" />
                            </div>
                        </div>
                    </div>

                            <div id="noMoreUsers" style="text-align: center; display: none;">
                                <p>No more available user accounts.</p>
                            </div>
                        </div>

                    </div>
        </div>
    }
</div>
